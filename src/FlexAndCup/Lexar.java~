/* The following code was generated by JFlex 1.7.0 */

package FlexAndCup;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./main.flex</tt>
 */
class Lexar implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int line_comment = 2;
  public static final int comment = 4;
  public static final int includes = 6;
  public static final int whileLoops = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 32, 58, 58, 57,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    56,  1, 31, 28,  0, 29,  5, 18, 25, 26,  9,  7, 14,  8, 17, 10, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15, 16,  3,  2,  4, 19, 
    27, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 52, 11, 50, 11, 
    11, 11, 11, 11, 11, 51, 11, 11, 11, 11, 11, 23,  0, 24, 30, 20, 
     0, 38, 53, 43, 44, 36, 37, 46, 49, 41, 11, 11, 39, 11, 42, 47, 
    45, 11, 34, 40, 33, 35, 54, 48, 11, 11, 11, 21,  6, 22,  0,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\16\1\1\35\1\1\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\34\1\53\1\54\1\55\1\0\1\56\13\0\1\57"+
    "\14\0\1\54\1\0\1\55\6\0\1\60\5\0\1\61"+
    "\7\0\1\62\1\0\1\54\1\55\1\63\4\0\1\64"+
    "\7\0\1\65\3\0\1\66\1\67\1\70\1\62\5\0"+
    "\1\71\1\72\2\0\1\73\1\74\1\75\2\0\1\76"+
    "\1\0\1\77\1\0\1\100\1\101\1\102\1\103\1\0"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u0127\0\u079b\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u07d6\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0811\0\u084c\0\u0887\0\u0127\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0127\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u03eb\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0127\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u0d23\0\u12e6"+
    "\0\u1321\0\u135c\0\u0127\0\u1397\0\u13d2\0\u140d\0\u1448\0\u110e"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u110e"+
    "\0\u1620\0\u165b\0\u1696\0\u0127\0\u110e\0\u0127\0\u0d99\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u0127\0\u110e\0\u17f8\0\u1833"+
    "\0\u0127\0\u0127\0\u186e\0\u18a9\0\u18e4\0\u0127\0\u191f\0\u0127"+
    "\0\u195a\0\u0127\0\u0127\0\u110e\0\u0127\0\u1995\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\6\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\6\1\50\1\6\1\51\1\52"+
    "\1\53\1\6\1\54\1\55\1\56\2\6\1\57\1\6"+
    "\1\60\2\6\1\61\1\62\2\6\1\21\1\63\15\6"+
    "\1\21\22\6\1\44\30\6\1\21\1\63\11\6\1\64"+
    "\3\6\1\21\22\6\1\21\30\6\1\21\74\63\15\6"+
    "\1\21\10\6\1\65\11\6\1\21\30\6\1\21\1\63"+
    "\75\0\1\66\72\0\1\67\72\0\1\70\72\0\1\71"+
    "\75\0\1\72\5\0\1\73\25\0\26\73\1\0\1\73"+
    "\10\0\1\74\66\0\1\75\4\0\1\76\65\0\1\77"+
    "\5\0\1\100\64\0\1\101\7\0\1\102\62\0\1\103"+
    "\6\0\1\104\1\105\75\0\1\21\22\0\1\21\30\0"+
    "\1\21\14\0\1\106\23\0\1\107\1\0\26\106\1\0"+
    "\1\106\17\0\1\21\22\0\1\44\30\0\1\21\43\0"+
    "\1\110\74\0\1\111\100\0\1\112\66\0\1\113\1\114"+
    "\7\0\1\115\72\0\1\116\54\0\1\117\7\0\1\120"+
    "\1\0\1\121\5\0\1\122\56\0\1\123\4\0\1\124"+
    "\101\0\1\125\70\0\1\126\55\0\1\127\111\0\1\130"+
    "\74\0\1\131\66\0\1\132\72\0\1\133\25\0\1\102"+
    "\73\0\2\73\24\0\26\73\1\0\1\73\2\0\11\134"+
    "\1\135\1\136\1\137\1\134\1\104\22\134\1\104\26\137"+
    "\1\104\1\140\2\104\13\0\1\141\1\0\1\105\22\0"+
    "\1\105\26\141\1\105\1\142\2\105\14\0\1\143\121\0"+
    "\1\144\70\0\1\145\101\0\1\146\71\0\1\147\102\0"+
    "\1\150\55\0\1\151\102\0\1\152\62\0\1\153\106\0"+
    "\1\154\62\0\1\155\103\0\1\156\54\0\1\157\77\0"+
    "\1\160\67\0\1\161\100\0\1\162\72\0\1\163\105\0"+
    "\1\164\65\0\1\165\64\0\1\166\21\0\11\134\1\135"+
    "\26\134\1\0\30\134\2\0\11\134\1\135\1\167\25\134"+
    "\1\0\30\134\2\0\11\134\1\170\26\134\1\0\30\134"+
    "\2\0\11\134\1\135\2\134\1\171\23\134\1\0\30\134"+
    "\2\0\11\134\1\135\1\136\1\137\1\171\1\104\22\134"+
    "\1\104\26\137\1\104\1\140\2\104\14\0\1\172\71\0"+
    "\1\141\1\172\1\105\22\0\1\105\26\141\1\105\1\142"+
    "\2\105\44\0\1\173\71\0\1\174\100\0\1\175\71\0"+
    "\1\176\70\0\1\177\102\0\1\200\65\0\1\201\73\0"+
    "\1\202\72\0\1\203\62\0\1\204\41\0\1\205\3\0"+
    "\1\206\22\0\1\206\26\0\2\207\1\206\1\207\42\0"+
    "\1\210\115\0\1\211\57\0\1\212\67\0\1\213\107\0"+
    "\1\214\55\0\1\215\77\0\1\216\16\0\11\134\1\135"+
    "\1\217\1\220\1\134\1\221\22\134\1\221\26\220\1\221"+
    "\1\222\2\221\11\134\1\135\1\136\1\137\24\134\1\0"+
    "\26\137\1\134\1\137\15\0\1\141\25\0\26\141\1\0"+
    "\1\141\44\0\1\223\106\0\1\224\60\0\1\225\67\0"+
    "\1\226\103\0\1\227\64\0\1\230\73\0\1\231\66\0"+
    "\1\232\44\0\1\233\25\0\26\233\1\0\1\233\13\0"+
    "\1\205\3\0\1\206\22\0\1\206\30\0\1\206\12\0"+
    "\1\205\130\0\1\234\64\0\1\235\75\0\1\236\26\0"+
    "\11\134\1\135\2\134\1\237\23\134\1\0\30\134\2\0"+
    "\11\134\1\135\1\136\1\220\1\134\1\221\22\134\1\221"+
    "\26\220\1\221\1\222\2\221\11\134\1\135\1\136\1\220"+
    "\1\237\1\221\22\134\1\221\26\220\1\221\1\222\2\221"+
    "\52\0\1\240\72\0\1\241\76\0\1\242\70\0\1\243"+
    "\31\0\2\233\24\0\26\233\1\0\1\233\46\0\1\244"+
    "\73\0\1\245\25\0\11\134\1\135\1\136\1\220\24\134"+
    "\1\0\26\220\1\134\1\220\46\0\1\246\102\0\1\247"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\13\1\21\11\20\1\1\11\1\1\6\11"+
    "\1\1\10\11\2\1\1\0\1\11\13\0\1\11\14\0"+
    "\1\1\1\0\1\1\6\0\1\11\5\0\1\1\7\0"+
    "\1\1\1\0\2\1\1\11\4\0\1\1\7\0\1\1"+
    "\3\0\1\11\1\1\1\11\1\1\5\0\1\11\1\1"+
    "\2\0\2\11\1\1\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 69: break;
          case 2: 
            { System.out.println("exclamation symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.EXCLAMATION,yyline,yycolumn,yytext());
            } 
            // fall through
          case 70: break;
          case 3: 
            { System.out.println("equal symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.EQUALS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { System.out.println("lesserThan found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.LESSERTHAN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 72: break;
          case 5: 
            { System.out.println("greaterThan found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.GREATERTHAN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 73: break;
          case 6: 
            { System.out.println("ampersand symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.AMPERSAND,yyline,yycolumn,yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { System.out.println("plus symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.PLUS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { System.out.println("minus symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.MINUS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { System.out.println("asterisk symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.TIMES,yyline,yycolumn,yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { System.out.println("slash symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.DIVIDE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { System.out.println("comma symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.COMMA,yyline,yycolumn,yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { System.out.println("colon symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.COLON,yyline,yycolumn,yytext());
            } 
            // fall through
          case 80: break;
          case 13: 
            { System.out.println("semicolon symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.SEMICOLON);
        return new Symbol(sym.SEMICOLON,yyline,yycolumn,yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { System.out.println("period symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.PERIOD,yyline,yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { System.out.println("apostrophe symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.APOSTROPHE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 83: break;
          case 16: 
            { System.out.println("question symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.QUESTION,yyline,yycolumn,yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { System.out.println("underscore symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.UNDERSCORE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { System.out.println("opening brace symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.OPEN_BRACE);
        return new Symbol(sym.OPEN_BRACE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { System.out.println("closing brace symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.CLOSE_BRACE);
        return new Symbol(sym.CLOSE_BRACE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { System.out.println("opening bracket symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.OPEN_BRACKET);
        return new Symbol(sym.OPEN_BRACKET,yyline,yycolumn,yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { System.out.println("closing bracket symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.CLOSE_BRACKET);
        return new Symbol(sym.CLOSE_BRACKET,yyline,yycolumn,yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { System.out.println("opening parenthesis symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            //return symbol(sym.OPEN_PARENTHESIS);
        return new Symbol(sym.OPEN_PARENTHESIS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { System.out.println("closing parenthesis symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        //return symbol(sym.CLOSE_PARENTHESIS);
        return new Symbol(sym.CLOSE_PARENTHESIS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { System.out.println("at (@) symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.AT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { System.out.println("hash symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.HASH,yyline,yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { System.out.println("percent symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.MOD,yyline,yycolumn,yytext());
            } 
            // fall through
          case 94: break;
          case 27: 
            { System.out.println("hat symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
        return new Symbol(sym.HAT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 95: break;
          case 28: 
            { System.out.print(yytext()+"\n"); yybegin(1);
            } 
            // fall through
          case 96: break;
          case 29: 
            { System.out.print(yytext());
            } 
            // fall through
          case 97: break;
          case 30: 
            { System.out.println("While end found at line: " + " => at (" +yyline + ","+ yycolumn+")" );
            yybegin(YYINITIAL);
            } 
            // fall through
          case 98: break;
          case 31: 
            { System.out.println("different found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.DIFFERENT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { System.out.println("comparisson found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.COMPARISSON,yyline,yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { System.out.println("lesserEqualThan found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.LESSEREQUALTHAN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { System.out.println("greaterEqualThan found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.GREATEREQUALTHAN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { System.out.println("and found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.AND);
        return new Symbol(sym.AND,yyline,yycolumn,yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { System.out.println("pointer reference found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
       // return symbol(sym.STRING);
        return new Symbol(sym.POINTERREFERENCE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { System.out.println("or found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.OR);
        return new Symbol(sym.OR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { System.out.println("plusEquals found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.PLUSEQUALS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { System.out.println("plus plus symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.PLUSPLUS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 107: break;
          case 40: 
            { System.out.println("minusEquals found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.MINUSEQUALS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { System.out.println("minus minus symbol found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.MINUSMINUS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { System.out.println("timesEquals found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.TIMESEQUALS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { System.out.println("divideEquals found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.DIVIDEEQUALS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { System.out.print("Comentario encontrado: \n"+ yytext()); yybegin(comment);
                return new Symbol(sym.COMMENTARYSTART,yyline,yycolumn,yytext());
            } 
            // fall through
          case 112: break;
          case 45: 
            { System.out.print("Comentario en linea encontrado:"  + " => at (" +yyline + ","+ yycolumn+")" +yytext() );
        yybegin(line_comment);
                return new Symbol(sym.LINECOMMENTARY,yyline,yycolumn,yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { System.out.println("strs found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.STRING);
        return new Symbol(sym.STRING,yyline,yycolumn,yytext());
            } 
            // fall through
          case 114: break;
          case 47: 
            { System.out.println("if found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.IF);
        return new Symbol(sym.IF,yyline,yycolumn,yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { System.out.println("For found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.FOR);
        return new Symbol(sym.FOR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { System.out.println("int found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.INT);
        return new Symbol(sym.INT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { System.out.print("Comentario encontrado: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" + "\n");
        return new Symbol(sym.COMMENTARY,yyline,yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { System.out.println("true found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.TRUE);
        return new Symbol(sym.TRUE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { System.out.println("long found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.LONG,yyline,yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { System.out.println("char found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.CHAR);
        return new Symbol(sym.CHAR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { System.out.println("NULL found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
       // return symbol(sym.NULL);
        return new Symbol(sym.NULL,yyline,yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { System.out.println("bool found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.BOOL);
        return new Symbol(sym.BOOL,yyline,yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { System.out.println("void found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.VOID,yyline,yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 57: 
            { System.out.println("false found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.FALSE);
        return new Symbol(sym.FALSE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 125: break;
          case 58: 
            { System.out.println("float found: " + yytext()  + " => at (" + yyline + "," + yycolumn + ")" );
        return new Symbol(sym.FLOAT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { System.out.println("scanf found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.SCANF,yyline,yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { System.out.println("short found: " + yytext()  + " => at (" + yyline + ","+ yycolumn+")" );
        return new Symbol(sym.SHORT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { System.out.println("pointer found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.STRING);
        return new Symbol(sym.POINTER,yyline,yycolumn,yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { System.out.println("while found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.WHILE);
        return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { System.out.println("return found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.RETURN);
        return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { System.out.println("string found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        //return symbol(sym.STRING);
        return new Symbol(sym.STRING,yyline,yycolumn,yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { System.out.println("signed found: " + yytext()  + " => at (" + yyline + ","+ yycolumn+")" );
        return new Symbol(sym.SIGNED,yyline,yycolumn,yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { System.out.println("double found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.DOUBLE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { System.out.println("printf found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        return new Symbol(sym.PRINTF,yyline,yycolumn,yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { System.out.println("unsigned found: " + yytext()  + " => at (" + yyline + ","+ yycolumn+")" );
        return new Symbol(sym.UNSIGNED,yyline,yycolumn,yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
