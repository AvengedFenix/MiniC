package proyectocompiladores;

import proyectocompiladores.MiArbolito;
import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;


parser code {:
    
    ArrayList<String> errors = new ArrayList();

     @Override
    public void syntax_error(Symbol s){
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        int line = s.right;
        int column = s.left;
        String err = "";
        if(lexVal.equals("EOF")){
            err = "Error found: expected }";
        } else {
            err = "Error found: " +  " line: " + line + " column: " + column + ", Token not expected: " + lexVal;
        }

        System.err.println(err);
        errors.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        int line = s.right;
        int column = s.left;
        String err = "";
        if(lexVal.equals("EOF")){
            err = "";
        }else{
            err = "PANIC MODE! Error found: " + " line: " + line + " column: " + column + ", Token not expected: " + lexVal;
        }
        System.err.println(err);
        errors.add(err);
    }

    public String getToken(int id){
        String value = "";
        value = sym.terminalNames[id];
        switch(id){
            case sym.CURLYL:
                return "{";
            case sym.CURLYR:
                return "}";
            case sym.PARAL:
                return "(";
            case sym.PARAR:
                return ")";
            default:
                return value;
 
    }
}











/*
    public parser (java.io.Reader input) {super(new Lexer(input));}
	public void report_error(String errorBody, Object info) {
		StringBuffer errorHead = new StringBuffer("Error");
			if(info instanceof java_cup.runtime.Symbol){
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {
                    errorHead.append(" en la linea "+(s.right+1));
                    if (s.right >= 0){
                        errorHead.append(", columna "+(s.left+1));
                    }
			}
			if(s.value != null){
                            errorHead.append(" en el token "+s.value );
                            //System.out.println("veamos que hay aqui ");
                            //System.out.println(s.value +" ");
                            if(s.value == "#-1"){
                                    return;
                            }
                            errorHead.append(": "+ getToken(Integer.parseInt(s.value.toString().replaceAll("#",""))));
							
			}
			errorHead.append(": ");
                        // errorHead.append(": " + getToken((int) s.value));
                        
		}
		System.err.print(errorHead);
		System.err.print(errorBody);

        errors.add(errorHead +" ");
	}

        public String getToken(int id){
            String value = "";
            value = sym.terminalNames[id];
            return value;
        }

*/
           
:};

terminal IDENTIFIER, CONSTANT, STRING_LITERAL, SIZEOF, PTR_OP, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP,
		AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN,
		XOR_ASSIGN, OR_ASSIGN, TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER,
		CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ELLIPSIS,
		CASE, DEFAULT, IF, ELSE, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN,
		SEMI, CURLYL, CURLYR, COMMA, COLON, ASSIGN, PARAL, PARAR, SQUAREDL, SQUAREDR, POINT, ADRESS,
		NOT, TILDE, MINUS, PLUS, MUL, DIVIDE, MODULUS, LESS, GREATER, XOR, OR, COND,
		SCANF, PRINTF;

non terminal MiArbolito translation_unit;
non terminal MiArbolito primary_expression;
non terminal MiArbolito postfix_expression;
non terminal MiArbolito expression;
non terminal MiArbolito assignment_expression;
non terminal MiArbolito unary_expression;
non terminal MiArbolito unary_operator;
non terminal MiArbolito type_name;
non terminal MiArbolito cast_expression;
non terminal MiArbolito multiplicative_expression;
non terminal MiArbolito additive_expression;
non terminal MiArbolito relational_expression;
non terminal MiArbolito shift_expression;
non terminal MiArbolito equality_expression;
non terminal MiArbolito and_expression;
non terminal MiArbolito exclusive_or_expression;
non terminal MiArbolito inclusive_or_expression;
non terminal MiArbolito logical_and_expression;
non terminal MiArbolito logical_or_expression;
non terminal MiArbolito conditional_expression;
non terminal MiArbolito constant_expression;
non terminal MiArbolito declaration;
non terminal MiArbolito declaration_specifiers;
non terminal MiArbolito init_declarator_list;
non terminal MiArbolito storage_class_specifier;
non terminal MiArbolito type_specifier;
non terminal MiArbolito type_qualifier;
non terminal MiArbolito init_declarator;
non terminal MiArbolito declarator;
non terminal MiArbolito struct_or_union_specifier;
non terminal MiArbolito struct_declaration_list;
non terminal MiArbolito struct_declaration;
non terminal MiArbolito initializer;
non terminal MiArbolito specifier_qualifier_list;
non terminal MiArbolito struct_declarator_list;
non terminal MiArbolito struct_declarator;
non terminal MiArbolito enum_specifier;
non terminal MiArbolito enumerator_list;
non terminal MiArbolito enumerator;
non terminal MiArbolito pointer;
non terminal MiArbolito direct_declarator;
non terminal MiArbolito parameter_type_list;
non terminal MiArbolito identifier_list;
non terminal MiArbolito type_qualifier_list;
non terminal MiArbolito parameter_declaration;
non terminal MiArbolito abstract_declarator;
non terminal MiArbolito direct_abstract_declarator;
non terminal MiArbolito initializer_list;
non terminal MiArbolito statement;
non terminal MiArbolito labeled_statement;
non terminal MiArbolito compound_statement;
non terminal MiArbolito selection_statement;
non terminal MiArbolito iteration_statement;
non terminal MiArbolito jump_statement;
non terminal MiArbolito expression_statement;
non terminal MiArbolito external_declaration;
non terminal MiArbolito function_definition;
non terminal MiArbolito declaration_list;
non terminal MiArbolito statement_list;
non terminal MiArbolito decl_stmnt_list;
non terminal MiArbolito assignment_operator;
non terminal MiArbolito parameter_list;

precedence nonassoc ELSE;
start with translation_unit;

primary_expression ::=
	IDENTIFIER:ident {:
		System.out.println("Produccion 1");
		MiArbolito parent = new MiArbolito(null, "primary_expression");
		parent.addChild(ident);
		RESULT = parent;
		
	:}
	| CONSTANT:constant {:
		System.out.println("Produccion 2");
		MiArbolito parent = new MiArbolito(null, "primary_expression");
		parent.addChild(constant);
		RESULT = parent;
		

	:}
	| STRING_LITERAL:stringliteral {:
		System.out.println("Produccion 3");
		MiArbolito parent = new MiArbolito(null, "primary_expression");
		parent.addChild(stringliteral);
		RESULT = parent;
		
	:}
	| PARAL:pl expression:e PARAR:pr {:
		System.out.println("Produccion 4");
		MiArbolito parent = new MiArbolito(null, "primary_expression");
		parent.addChild(e);
		RESULT = parent;
	:}
	;

postfix_expression ::=
	primary_expression:pe {:
		System.out.println("Produccion 5");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(pe);
		RESULT = parent;
	:}
	| postfix_expression:pe SQUAREDL:sl expression:index SQUAREDR:sd {:
		System.out.println("Produccion 6");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"array"));
		parent.addChild(pe);
		parent.addChild(index);
		RESULT = parent;
	:}
	| postfix_expression:pe PARAL:pl PARAR:pr {:
		System.out.println("Produccion 7");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(pe);
		RESULT = parent;
	:}
	| postfix_expression:pe PARAL:pl expression:e PARAR:pr {:
		System.out.println("Produccion 8");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(pe);
		parent.addChild(e);
		RESULT = parent;
	:}
	| PRINTF:pf PARAL:pl PARAR:pr {:
		System.out.println("Produccion 9");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(pf);
		RESULT = parent;
	:}
	| SCANF:sf PARAL:pl PARAR:pr {:
		System.out.println("Produccion 10");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(sf);
		RESULT = parent;
	:}
	| PRINTF:pf PARAL:pl expression:e PARAR:pr {:
		System.out.println("Produccion 11");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(pf);
		parent.addChild(e);
		RESULT = parent;
	:}
	| SCANF:sf PARAL:pl expression:e PARAR:pr {:
		System.out.println("Produccion 12");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(new Symbol(-1,0,0,"function_call"));
		parent.addChild(sf);
		parent.addChild(e);
		RESULT = parent;
	:}
	| postfix_expression:pe POINT:p IDENTIFIER:id {:
		System.out.println("Produccion 13");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(pe);
		parent.addChild(p);
		parent.addChild(id);
		RESULT = parent;
	:}
	| postfix_expression:pe PTR_OP:po IDENTIFIER:id {:
		System.out.println("Produccion 14");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(pe);
		parent.addChild(po);
		parent.addChild(id);
		RESULT = parent;
	:}
	| postfix_expression:pe INC_OP:op {:
		System.out.println("Produccion 15");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(pe);
		parent.addChild(op);
		RESULT = parent;
	:}
	| postfix_expression:pe DEC_OP:op {:
		System.out.println("Produccion 16");
		MiArbolito parent = new MiArbolito(null, "postfix_expression");
		parent.addChild(pe);
		parent.addChild(op);
		RESULT = parent;
	:}
	;

unary_expression ::=
	postfix_expression:pe {:
		System.out.println("Produccion 17");
		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(pe);
		RESULT = parent;
	:}
	| INC_OP:op unary_expression:ue {:
		System.out.println("Produccion 18");
		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(op);
		parent.addChild(ue);
		RESULT = parent;
	:}
	| DEC_OP:op unary_expression:ue {:
		System.out.println("Produccion 19");
		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(op);
		parent.addChild(ue);
		RESULT = parent;
	:}
	| unary_operator:uo cast_expression:ce {:
		System.out.println("Produccion 20");

		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(uo);
		parent.addChild(ce);
		RESULT = parent;
	:}
	| SIZEOF:so unary_expression:ue {:
		System.out.println("Produccion 21");

		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(so);
		parent.addChild(ue);
		RESULT = parent;
	:}
	| SIZEOF:so PARAL type_name:tn PARAR {:
		System.out.println("Produccion 22");
		MiArbolito parent = new MiArbolito(null, "unary_expression");
		parent.addChild(so);
		parent.addChild(tn);
		RESULT = parent;
	:}
	;

unary_operator ::=
	ADRESS:op {:
		System.out.println("Produccion 23");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	| MUL:op {:
		System.out.println("Produccion 24");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	| PLUS:op {:
		System.out.println("Produccion 25");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	| MINUS:op {:
		System.out.println("Produccion 26");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	| TILDE:op {:
		System.out.println("Produccion 27");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	| NOT:op {:
		System.out.println("Produccion 28");
		MiArbolito parent = new MiArbolito(null, "unary_operator");
		parent.addChild(op);
		RESULT = parent;
	:}
	;


cast_expression ::=
	unary_expression:ue {:
		System.out.println("Produccion 29");
		MiArbolito parent = new MiArbolito(null, "cast_expression");
		parent.addChild(ue);
		RESULT = parent;
	:}
	| PARAL type_name:tn PARAR cast_expression:ce {:
		System.out.println("Produccion 30");
		MiArbolito parent = new MiArbolito(null, "cast_expression");
		parent.addChild(tn);
		parent.addChild(ce);
		RESULT = parent;
	:}
	;


multiplicative_expression ::=
	cast_expression:ce {:
		System.out.println("Produccion 31");
		MiArbolito parent = new MiArbolito(null, "multiplicative_expression");
		parent.addChild(ce);
		RESULT = parent;
	:}
	| multiplicative_expression:me MUL:op cast_expression:ce {:
		System.out.println("Produccion 32");
		MiArbolito parent = new MiArbolito(null, "multiplicative_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(me);
		child.addChild(ce);
		RESULT = parent;
	:}
	| multiplicative_expression:me DIVIDE:op cast_expression:ce {:
		System.out.println("Produccion 33");
		MiArbolito parent = new MiArbolito(null, "multiplicative_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(me);
		child.addChild(ce);
		RESULT = parent;
	:}
	| multiplicative_expression:me MODULUS:op cast_expression:ce {:
		System.out.println("Produccion 34");
		MiArbolito parent = new MiArbolito(null, "multiplicative_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(me);
		child.addChild(ce);
		RESULT = parent;
	:}
	;

additive_expression ::=
	multiplicative_expression:me {:
		System.out.println("Produccion 35");
		MiArbolito parent = new MiArbolito(null, "additive_expression");
		parent.addChild(me);
		RESULT = parent;
	:}
	| additive_expression:ae PLUS:op multiplicative_expression:me {:
                System.out.println("Produccion 35.5");
		MiArbolito parent = new MiArbolito(null, "additive_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(ae);
		child.addChild(me);
		RESULT = parent;
	:}
	| additive_expression:ae MINUS:op multiplicative_expression:me {:
		System.out.println("Produccion 36");
		MiArbolito parent = new MiArbolito(null, "additive_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(ae);
		child.addChild(me);
		RESULT = parent;
	:}
	;

shift_expression ::=
	additive_expression:ae {:
		System.out.println("Produccion 37");
		MiArbolito parent = new MiArbolito(null, "shift_expression");
		parent.addChild(ae);
		RESULT = parent;
	:}
	| shift_expression:se LEFT_OP:op additive_expression:ae {:
		System.out.println("Produccion 38");
		MiArbolito parent = new MiArbolito(null, "shift_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		child.addChild(se);
		child.addChild(ae);
		RESULT = parent;
	:}
	| shift_expression:se RIGHT_OP:op additive_expression:ae {:
		System.out.println("Produccion 39");
		MiArbolito parent = new MiArbolito(null, "shift_expression");
		MiArbolito child = new MiArbolito(parent, (Symbol)op);
		parent.addChild(child);
		parent.addChild(se);
		parent.addChild(ae);
		RESULT = parent;
	:}
	;

relational_expression ::=
	shift_expression:se {:
		System.out.println("Produccion 40");
		MiArbolito parent = new MiArbolito(null, "relational_expression");
		parent.addChild(se);
		RESULT = parent;
	:}
	| relational_expression:re LESS:op shift_expression:se {:
		System.out.println("Produccion 41");
		MiArbolito parent = new MiArbolito(null, "relational_expression");
		parent.addChild(re);
		parent.addChild(op);
		parent.addChild(se);
		RESULT = parent;
	:}
	| relational_expression:re GREATER:op shift_expression:se {:
		System.out.println("Produccion 42");
		MiArbolito parent = new MiArbolito(null, "relational_expression");
		parent.addChild(re);
		parent.addChild(op);
		parent.addChild(se);
		RESULT = parent;
	:}
	| relational_expression:re LE_OP:op shift_expression:se {:
		System.out.println("Produccion 43");
		MiArbolito parent = new MiArbolito(null, "relational_expression");
		parent.addChild(re);
		parent.addChild(op);
		parent.addChild(se);
		RESULT = parent;
	:}
	| relational_expression:re GE_OP:op shift_expression:se {:
		System.out.println("Produccion 44");
		MiArbolito parent = new MiArbolito(null, "relational_expression");
		parent.addChild(re);
		parent.addChild(op);
		parent.addChild(se);
		RESULT = parent;
	:}
	;

equality_expression ::=
	relational_expression:re {:
		System.out.println("Produccion 45");
		MiArbolito parent = new MiArbolito(null, "equality_expression");
		parent.addChild(re);
		RESULT = parent;
	:}
	| equality_expression:ee EQ_OP:op relational_expression:re {:
		System.out.println("Produccion 46");
		MiArbolito parent = new MiArbolito(null, "equality_expression");
		parent.addChild(ee);
		parent.addChild(op);
		parent.addChild(re);
		RESULT = parent;
	:}
	| equality_expression:ee NE_OP:op relational_expression:re {:
		System.out.println("Produccion 47");
		MiArbolito parent = new MiArbolito(null, "equality_expression");
		parent.addChild(ee);
		parent.addChild(op);
		parent.addChild(re);
		RESULT = parent;
	:}
	;

and_expression ::=
	equality_expression:ee {:
		System.out.println("Produccion 48");
		MiArbolito parent = new MiArbolito(null, "and_expression");
		parent.addChild(ee);
		RESULT = parent;
	:}
	| and_expression:ae ADRESS:a equality_expression:ee {:
		System.out.println("Produccion 49");
		MiArbolito parent = new MiArbolito(null, "and_expression");
		parent.addChild(ae);
		parent.addChild(ee);
		RESULT = parent;
	:}
	;

exclusive_or_expression	::=
	and_expression:ae {:
		System.out.println("Produccion 50");
		MiArbolito parent = new MiArbolito(null, "and_expression");
		parent.addChild(ae);
		RESULT = parent;
	:}
	| exclusive_or_expression:eoe XOR and_expression:ae {:
		System.out.println("Produccion 51");
		MiArbolito parent = new MiArbolito(null, "and_expression");
		parent.addChild(eoe);
		parent.addChild(ae);
		RESULT = parent;
	:}
	;


inclusive_or_expression	::=
	exclusive_or_expression:eoe {:
		System.out.println("Produccion 52");
		MiArbolito parent = new MiArbolito(null, "inclusive_or_expression");
		parent.addChild(eoe);
		RESULT = parent;
	:}
	| inclusive_or_expression:ioe OR exclusive_or_expression:eoe {:
                System.out.println("Produccion 52.5");
		MiArbolito parent = new MiArbolito(null, "inclusive_or_expression");
		parent.addChild(ioe);
		parent.addChild(eoe);
		RESULT = parent;
	:}
	;

logical_and_expression ::=
	inclusive_or_expression:ioe {:
		System.out.println("Produccion 53");
		MiArbolito parent = new MiArbolito(null, "logical_and_expression");
		parent.addChild(ioe);
		RESULT = parent;
	:}
	| logical_and_expression:lae AND_OP:op inclusive_or_expression:ioe {:
		System.out.println("Produccion 54");
		MiArbolito parent = new MiArbolito(null, "logical_and_expression");
		parent.addChild(lae);
		parent.addChild(ioe);
		RESULT = parent;
	:}
	;

logical_or_expression ::=
	logical_and_expression:lae {:
		System.out.println("Produccion 55");
		MiArbolito parent = new MiArbolito(null, "logical_or_expression");
		parent.addChild(lae);
		RESULT = parent;
	:}
	| logical_or_expression:loe OR_OP:op logical_and_expression:lae {:
		System.out.println("Produccion 56");
		MiArbolito parent = new MiArbolito(null, "logical_or_expression");
		parent.addChild(loe);
		parent.addChild(lae);
		RESULT = parent;
	:}
	;

conditional_expression ::=
	logical_or_expression:loe {:
		System.out.println("Produccion 57");
		MiArbolito parent = new MiArbolito(null, "conditional_expression");
		parent.addChild(loe);
		RESULT = parent;
	:}
	| logical_or_expression:loe COND expression:e COLON conditional_expression:ce {:
		System.out.println("Produccion 58");
		MiArbolito parent = new MiArbolito(null, "conditional_expression");
		parent.addChild(loe);
		parent.addChild(e);
		parent.addChild(ce);
		RESULT = parent;
	:}
	;

assignment_expression ::=
	conditional_expression:ce {:
		System.out.println("Produccion 59");
		MiArbolito parent = new MiArbolito(null, "assignment_expression");
		parent.addChild(ce);
		RESULT = parent;
	:}
	| unary_expression:ue assignment_operator:aop assignment_expression:ae {:
		System.out.println("Produccion 60");
		MiArbolito parent = new MiArbolito(null, "assignment_expression");
		MiArbolito child = new MiArbolito(null, aop.getValue());
		parent.addChild(child);
		child.addChild(ue);
		child.addChild(ae);
		RESULT = parent;
	:}
	| error assignment_operator:aop assignment_expression:ae {:
		System.out.println("Produccion 61");
		MiArbolito parent = new MiArbolito(null, "assignment_expression");
		MiArbolito child = new MiArbolito(parent, aop.getValue());
		parent.addChild(child);
		child.addChild(new Symbol(-1,0,0,"ERROR"));
		child.addChild(ae);
		RESULT = parent;
		System.err.println("Asignacion solo a identificadores");
		this.parser.errors.add("Asignacion solo a identificadores");

		//System.err.println(RESULT);
	:}
	;

assignment_operator ::=
	ASSIGN:a {:
		System.out.println("Produccion 62");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| MUL_ASSIGN:a {:
		System.out.println("Produccion 63");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| DIV_ASSIGN:a {:
		System.out.println("Produccion 64");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| MOD_ASSIGN:a {:
		System.out.println("Produccion 65");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| ADD_ASSIGN:a {:
		System.out.println("Produccion 66");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| SUB_ASSIGN:a {:
		System.out.println("Produccion 67");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| LEFT_ASSIGN:a {:
		System.out.println("Produccion 68");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| RIGHT_ASSIGN:a {:
		System.out.println("Produccion 69");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| AND_ASSIGN:a {:
		System.out.println("Produccion 70");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| XOR_ASSIGN:a {:
		System.out.println("Produccion 71");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	| OR_ASSIGN:a {:
		System.out.println("Produccion 72");
		MiArbolito parent = new MiArbolito(null, (Symbol)a);
		RESULT = parent;
	:}
	;

expression ::=
	assignment_expression:ae {:
		System.out.println("Produccion 73");
		MiArbolito parent = new MiArbolito(null, "expression");
		parent.addChild(ae);
		RESULT = parent;
	:}
	| expression:e COMMA assignment_expression:ae {:
		System.out.println("Produccion 74");
		MiArbolito parent = new MiArbolito(null, "expression");
		parent.addChild(e);
		parent.addChild(ae);
		RESULT = parent;
	:}
	;

constant_expression ::=
	conditional_expression:ce {:
		System.out.println("Produccion 75");
		MiArbolito parent = new MiArbolito(null, "constant_expression");
		parent.addChild(ce);
		RESULT = parent;
	:}
	;

declaration ::=
	declaration_specifiers:ds SEMI {:
		System.out.println("Produccion 76");
		MiArbolito parent = new MiArbolito(null, "declaration");
		parent.addChild(ds);
		RESULT = parent;
	:}
	| declaration_specifiers:ds init_declarator_list:idl SEMI {:
		System.out.println("Produccion 77");
		MiArbolito parent = new MiArbolito(null, "declaration");
		parent.addChild(ds);
		parent.addChild(idl);
		RESULT = parent;
	:}
	| declaration_specifiers:ds error {:
		System.out.println("Produccion 78");
		MiArbolito parent = new MiArbolito(null, "declaration");
		parent.addChild(ds);
		parent.addChild(new Symbol(-1,0,0,"ERROR"));
		RESULT = parent;
		System.err.println("Se esperaba ; en la declaracion:");
		this.parser.errors.add("Se esperaba ; en la declaracion:");

		//System.err.println(RESULT);
	:}
	;

declaration_specifiers ::=
	storage_class_specifier:scc {:
		System.out.println("Produccion 79");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(scc);
		RESULT = parent;
	:}
	| storage_class_specifier:scc declaration_specifiers:ds {:
		System.out.println("Produccion 80");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(scc);
		parent.addChild(ds);
		RESULT = parent;
	:}
	| type_specifier:ts {:
		System.out.println("Produccion 81");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(ts);
		RESULT = parent;
	:}
	| type_specifier:ts declaration_specifiers:ds {:
		System.out.println("Produccion 82");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(ts);
		parent.addChild(ds);
		RESULT = parent;
	:}
	| type_qualifier:tq {:
		System.out.println("Produccion 83");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(tq);
		RESULT = parent;
	:}
	| type_qualifier:tq declaration_specifiers:ds {:
		System.out.println("Produccion 84");
		MiArbolito parent = new MiArbolito(null, "declaration_specifiers");
		parent.addChild(tq);
		parent.addChild(ds);
		RESULT = parent;
	:}
	;

init_declarator_list ::=
	init_declarator:id {:
		System.out.println("Produccion 85");
		MiArbolito parent = new MiArbolito(null, "init_declarator_list");
		parent.addChild(id);
		RESULT = parent;
	:}
	| init_declarator_list:idl COMMA init_declarator:id {:
		System.out.println("Produccion 86");
		MiArbolito parent = new MiArbolito(null, "init_declarator_list");
		parent.addChild(idl);
		parent.addChild(id);
		RESULT = parent;
	:}
	;

init_declarator ::=
	declarator:d {:
		System.out.println("Produccion 87");
		MiArbolito parent = new MiArbolito(null, "init_declarator");
		parent.addChild(d);
		RESULT = parent;
	:}
	| declarator:d ASSIGN initializer:i {:
		System.out.println("Produccion 88");
		MiArbolito parent = new MiArbolito(null, "init_declarator");
		parent.addChild(d);
		parent.addChild(i);
		RESULT = parent;
	:}
	;

storage_class_specifier ::=
	TYPEDEF:id {:
		System.out.println("Produccion 89");
		MiArbolito parent = new MiArbolito(null, "storage_class_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	| EXTERN:id {:
		System.out.println("Produccion 90");
		MiArbolito parent = new MiArbolito(null, "storage_class_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	| STATIC:id {:
		System.out.println("Produccion 91");
		MiArbolito parent = new MiArbolito(null, "storage_class_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	| AUTO:id {:
		System.out.println("Produccion 92");
		MiArbolito parent = new MiArbolito(null, "storage_class_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	| REGISTER:id {:
		System.out.println("Produccion 93");
		MiArbolito parent = new MiArbolito(null, "storage_class_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	;

type_specifier ::=
	VOID:type {:
		System.out.println("Produccion 94");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| CHAR:type {:
		System.out.println("Produccion 95");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| SHORT:type {:
		System.out.println("Produccion 96");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| INT:type {:
		System.out.println("Produccion 97");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| LONG:type {:
		System.out.println("Produccion 98");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| FLOAT:type {:
		System.out.println("Produccion 99");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| DOUBLE:type {:
		System.out.println("Produccion 100");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| SIGNED:type {:
		System.out.println("Produccion 101");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| UNSIGNED:type {:
		System.out.println("Produccion 102");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| struct_or_union_specifier:type {:
		System.out.println("Produccion 103");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| enum_specifier:type {:
		System.out.println("Produccion 104");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	| TYPE_NAME:type {:
		System.out.println("Produccion 105");
		MiArbolito parent = new MiArbolito(null, "type_specifier");
		parent.addChild(type);
		RESULT = parent;
	:}
	;

struct_or_union_specifier ::=
	STRUCT:s IDENTIFIER:id CURLYL struct_declaration_list:sdl CURLYR {:
		System.out.println("Produccion 106");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(s);
		parent.addChild(id);
		parent.addChild(sdl);
		RESULT = parent;
	:}
	| STRUCT:s CURLYL struct_declaration_list:sdl CURLYR {:
		System.out.println("Produccion 107");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(s);
		parent.addChild(sdl);
		RESULT = parent;
	:}
	| STRUCT:s IDENTIFIER:id {:
		System.out.println("Produccion 108");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(s);
		parent.addChild(id);
		RESULT = parent;
	:}
	| UNION:u IDENTIFIER:id CURLYL struct_declaration_list:sdl CURLYR {:
		System.out.println("Produccion 109");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(u);
		parent.addChild(id);
		parent.addChild(sdl);
		RESULT = parent;
	:}
	| UNION:u CURLYL struct_declaration_list:sdl CURLYR {:
		System.out.println("Produccion 110");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(u);
		parent.addChild(sdl);
		RESULT = parent;
	:}
	| UNION:u IDENTIFIER:id {:
		System.out.println("Produccion 111");
		MiArbolito parent = new MiArbolito(null, "struct_or_union_specifier");
		parent.addChild(u);
		parent.addChild(id);
		RESULT = parent;
	:}
	;

struct_declaration_list ::=
	struct_declaration:s {:
		System.out.println("Produccion 112");
		MiArbolito parent = new MiArbolito(null, "struct_declaration_list");
		parent.addChild(s);
		RESULT = parent;
	:}
	| struct_declaration_list:sl struct_declaration:s {:
		System.out.println("Produccion 113");
		MiArbolito parent = new MiArbolito(null, "struct_declaration_list");
		parent.addChild(sl);
		parent.addChild(s);
		RESULT = parent;
	:}
	;

struct_declaration ::=
	specifier_qualifier_list:sq struct_declarator_list:sd SEMI {:
		System.out.println("Produccion 114");
		MiArbolito parent = new MiArbolito(null, "struct_declaration");
		parent.addChild(sq);
		parent.addChild(sd);
		RESULT = parent;
	:}
	;

specifier_qualifier_list ::=
	type_specifier:ts specifier_qualifier_list:sq {:
		System.out.println("Produccion 115");
		MiArbolito parent = new MiArbolito(null, "specifier_qualifier_list");
		parent.addChild(ts);
		parent.addChild(sq);
		RESULT = parent;
	:}
	| type_specifier:ts {:
		System.out.println("Produccion 116");
		MiArbolito parent = new MiArbolito(null, "specifier_qualifier_list");
		parent.addChild(ts);
		RESULT = parent;
	:}
	| type_qualifier:tq specifier_qualifier_list:sq {:
		System.out.println("Produccion 117");
		MiArbolito parent = new MiArbolito(null, "specifier_qualifier_list");
		parent.addChild(tq);
		parent.addChild(sq);
		RESULT = parent;
	:}
	| type_qualifier:tq {:
		System.out.println("Produccion 118");
		MiArbolito parent = new MiArbolito(null, "specifier_qualifier_list");
		parent.addChild(tq);
		RESULT = parent;
	:}
	;

struct_declarator_list ::=
	struct_declarator:s {:
		System.out.println("Produccion 119");
		MiArbolito parent = new MiArbolito(null, "struct_declarator_list");
		parent.addChild(s);
		RESULT = parent;
	:}
	| struct_declarator_list:sl COMMA struct_declarator:s {:
		System.out.println("Produccion 120");
		MiArbolito parent = new MiArbolito(null, "struct_declarator_list");
		parent.addChild(sl);
		parent.addChild(s);
		RESULT = parent;
	:}
	;

struct_declarator ::=
	declarator:d {:
		System.out.println("Produccion 121");
		MiArbolito parent = new MiArbolito(null, "struct_declarator");
		parent.addChild(d);
		RESULT = parent;
	:}
	| COLON constant_expression:ce {:
		System.out.println("Produccion 122");
		MiArbolito parent = new MiArbolito(null, "struct_declarator");
		parent.addChild(ce);
		RESULT = parent;
	:}
	| declarator:d COLON constant_expression:ce {:
		System.out.println("Produccion 123");
		MiArbolito parent = new MiArbolito(null, "struct_declarator");
		parent.addChild(d);
		parent.addChild(ce);
		RESULT = parent;
	:}
	;

enum_specifier ::=
	ENUM CURLYL enumerator_list:el CURLYR {:
		System.out.println("Produccion 124");
		MiArbolito parent = new MiArbolito(null, "enum_specifier");
		parent.addChild(el);
		RESULT = parent;
	:}
	| ENUM IDENTIFIER:id CURLYL enumerator_list:el CURLYR {:
		System.out.println("Produccion 125");
		MiArbolito parent = new MiArbolito(null, "enum_specifier");
		parent.addChild(id);
		parent.addChild(el);
		RESULT = parent;
	:}
	| ENUM IDENTIFIER:id {:
		System.out.println("Produccion 126");
		MiArbolito parent = new MiArbolito(null, "enum_specifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	;

enumerator_list ::=
	enumerator:e {:
		System.out.println("Produccion 127");
		MiArbolito parent = new MiArbolito(null, "enumerator_list");
		parent.addChild(e);
		RESULT = parent;
	:}
	| enumerator_list:el COMMA enumerator:e {:
		System.out.println("Produccion 128");
		MiArbolito parent = new MiArbolito(null, "enumerator_list");
		parent.addChild(el);
		parent.addChild(e);
		RESULT = parent;
	:}
	;

enumerator ::=
	IDENTIFIER:id {:
		System.out.println("Produccion 129");
		MiArbolito parent = new MiArbolito(null, "enumerator");
		parent.addChild(id);
		RESULT = parent;
	:}
	| IDENTIFIER:id ASSIGN constant_expression:ce {:
		System.out.println("Produccion 130");
		MiArbolito parent = new MiArbolito(null, "enumerator");
		parent.addChild(id);
		parent.addChild(ce);
		RESULT = parent;
	:}
	;

type_qualifier ::=
	CONST:id {:
		System.out.println("Produccion 131");
		MiArbolito parent = new MiArbolito(null, "type_qualifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	| VOLATILE:id {:
		System.out.println("Produccion 132");
		MiArbolito parent = new MiArbolito(null, "type_qualifier");
		parent.addChild(id);
		RESULT = parent;
	:}
	;

declarator ::=
	pointer:p direct_declarator:direct {:
		System.out.println("Produccion 133");
		MiArbolito parent = new MiArbolito(null, "declarator");
		parent.addChild(p);
		parent.addChild(direct);
		RESULT = parent;
	:}
	| direct_declarator:direct {:
		System.out.println("Produccion 134");
		MiArbolito parent = new MiArbolito(null, "declarator");
		parent.addChild(direct);
		RESULT = parent;
	:}
	;

direct_declarator ::=
	IDENTIFIER:identifier {:
		System.out.println("Produccion 135");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(identifier);
		RESULT = parent;
	:}
	| PARAL declarator:d PARAR {:
		System.out.println("Produccion 136");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(d);
		RESULT = parent;
	:}
	| direct_declarator:dd SQUAREDL constant_expression:ce SQUAREDR {:
		System.out.println("Produccion 137");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(new Symbol(-1,0,0,"array_declarator"));
		parent.addChild(dd);
		parent.addChild(ce);
		RESULT = parent;
	:}
	| direct_declarator:dd SQUAREDL SQUAREDR {:
		System.out.println("Produccion 138");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(new Symbol(-1,0,0,"array_declarator"));
		parent.addChild(dd);
		RESULT = parent;
	:}
	| direct_declarator:dd PARAL parameter_type_list:ptl PARAR {:
		System.out.println("Produccion 139");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(new Symbol(-1,0,0,"function_declarator"));
		parent.addChild(dd);
		parent.addChild(ptl);
		RESULT = parent;
	:}
	| direct_declarator:dd PARAL identifier_list:il PARAR {:
		System.out.println("Produccion 140");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(new Symbol(-1,0,0,"function_declarator"));
		parent.addChild(dd);
		parent.addChild(il);
		RESULT = parent;
	:}
	| direct_declarator:dd PARAL PARAR {:
		System.out.println("Produccion 141");
		MiArbolito parent = new MiArbolito(null, "direct_declarator");
		parent.addChild(new Symbol(-1,0,0,"function_declarator"));
		parent.addChild(dd);
		RESULT = parent;
	:}
	;

pointer ::=
	MUL:id {:
		System.out.println("Produccion 142");
		MiArbolito parent = new MiArbolito(null, "pointer");
		parent.addChild(id);
		RESULT = parent;
	:}
	| MUL:id type_qualifier_list:tql {:
		System.out.println("Produccion 143");
		MiArbolito parent = new MiArbolito(null, "pointer");
		parent.addChild(id);
		parent.addChild(tql);
		RESULT = parent;
	:}
	| MUL:id pointer:p {:
		System.out.println("Produccion 144");
		MiArbolito parent = new MiArbolito(null, "pointer");
		parent.addChild(id);
		parent.addChild(p);
		RESULT = parent;
	:}
	| MUL:id type_qualifier_list:tql pointer:p {:
		System.out.println("Produccion 145");
		MiArbolito parent = new MiArbolito(null, "pointer");
		parent.addChild(id);
		parent.addChild(tql);
		parent.addChild(p);
		RESULT = parent;
	:}
	;

type_qualifier_list ::=
	type_qualifier:tq {:
		System.out.println("Produccion 146");
		MiArbolito parent = new MiArbolito(null, "type_qualifier_list");
		parent.addChild(tq);
		RESULT = parent;
	:}
	| type_qualifier_list:tql type_qualifier:tq {:
		System.out.println("Produccion 147");
		MiArbolito parent = new MiArbolito(null, "type_qualifier_list");
		parent.addChild(tql);
		parent.addChild(tq);
		RESULT = parent;
	:}
	;


parameter_type_list ::=
	parameter_list:pl {:
		System.out.println("Produccion 148");
		MiArbolito parent = new MiArbolito(null, "parameter_type_list");
		parent.addChild(pl);
		RESULT = parent;
	:}
	| parameter_list:pl COMMA ELLIPSIS:id {:
		System.out.println("Produccion 149");
		MiArbolito parent = new MiArbolito(null, "parameter_type_list");
		parent.addChild(pl);
		parent.addChild(id);
		RESULT = parent;
	:}
	;

parameter_list ::=
	parameter_declaration:pd {:
		System.out.println("Produccion 150");
		MiArbolito parent = new MiArbolito(null, "parameter_list");
		parent.addChild(pd);
		RESULT = parent;
	:}
	| parameter_list:pl COMMA parameter_declaration:pd {:
		System.out.println("Produccion 151");
		MiArbolito parent = new MiArbolito(null, "parameter_list");
		parent.addChild(pl);
		parent.addChild(pd);
		RESULT = parent;
	:}
	;

parameter_declaration	::=
	declaration_specifiers:ds declarator:d {:
		System.out.println("Produccion 152");
		MiArbolito parent = new MiArbolito(null, "parameter_declaration");
		parent.addChild(ds);
		parent.addChild(d);
		RESULT = parent;
	:}
	| declaration_specifiers:ds abstract_declarator:ad {:
		System.out.println("Produccion 153");
		MiArbolito parent = new MiArbolito(null, "parameter_declaration");
		parent.addChild(ds);
		parent.addChild(ad);
		RESULT = parent;
	:}
	| declaration_specifiers:ds {:
		System.out.println("Produccion 154");
		MiArbolito parent = new MiArbolito(null, "parameter_declaration");
		parent.addChild(ds);
		RESULT = parent;
	:}
	;

identifier_list	::=
	IDENTIFIER:id {:
		System.out.println("Produccion 155");
		MiArbolito parent = new MiArbolito(null, "identifier_list");
		parent.addChild(id);
		RESULT = parent;
	:}
	| identifier_list:idl COMMA IDENTIFIER:id {:
		System.out.println("Produccion 156");
		MiArbolito parent = new MiArbolito(null, "identifier_list");
		parent.addChild(idl);
		parent.addChild(id);
		RESULT = parent;
	:}
	;

type_name	::=
	specifier_qualifier_list:sl {:
		System.out.println("Produccion 157");
		MiArbolito parent = new MiArbolito(null, "type_name");
		parent.addChild(sl);
		RESULT = parent;
	:}
	| specifier_qualifier_list:sl abstract_declarator:ad {:
		System.out.println("Produccion 158");
		MiArbolito parent = new MiArbolito(null, "type_name");
		parent.addChild(sl);
		parent.addChild(ad);
		RESULT = parent;
	:}
	;

abstract_declarator	::=
	pointer:p {:
		System.out.println("Produccion 159");
		MiArbolito parent = new MiArbolito(null, "abstract_declarator");
		parent.addChild(p);
		RESULT = parent;
	:}
	| direct_abstract_declarator:dad {:
		System.out.println("Produccion 160");
		MiArbolito parent = new MiArbolito(null, "abstract_declarator");
		parent.addChild(dad);
		RESULT = parent;
	:}
	| pointer:p direct_abstract_declarator:d {:
		System.out.println("Produccion 161");
		MiArbolito parent = new MiArbolito(null, "abstract_declarator");
		parent.addChild(p);
		parent.addChild(d);
		RESULT = parent;
	:}
	;

direct_abstract_declarator ::=
	PARAL:id abstract_declarator:ad PARAR:idr {:
		System.out.println("Produccion 162");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(ad);
		RESULT = parent;
	:}
	| SQUAREDL:id SQUAREDR:idr {:
		System.out.println("Produccion 163");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		RESULT = parent;
	:}
	| SQUAREDL:id constant_expression:ce SQUAREDR:idr {:
		System.out.println("Produccion 164");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(ce);
		RESULT = parent;
	:}
	| direct_abstract_declarator:dad SQUAREDL:id SQUAREDR:idr {:
		System.out.println("Produccion 165");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(dad);
		RESULT = parent;
	:}
	| direct_abstract_declarator:dad SQUAREDL:id constant_expression:ce SQUAREDR:idr {:
		System.out.println("Produccion 166");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(dad);
		parent.addChild(ce);
		RESULT = parent;
	:}
	| PARAL:id PARAR:idr {:
		System.out.println("Produccion 167");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		RESULT = parent;
	:}
	| PARAL:id parameter_type_list:ptl PARAR:idr {:
		System.out.println("Produccion 168");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(ptl);
		RESULT = parent;
	:}
	| direct_abstract_declarator:dad PARAL:id PARAR:idr {:
		System.out.println("Produccion 169");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(dad);
		RESULT = parent;
	:}
	| direct_abstract_declarator:dad PARAL:id parameter_type_list:ptl PARAR:idr {:
		System.out.println("Produccion 170");
		MiArbolito parent = new MiArbolito(null, "direct_abstract_declarator");
		parent.addChild(dad);
		parent.addChild(ptl);
		RESULT = parent;
	:}
	;

initializer ::=
	assignment_expression:ae {:
		System.out.println("Produccion 171");
		MiArbolito parent = new MiArbolito(null, "initializer");
		parent.addChild(ae);
		RESULT = parent;
	:}
	| CURLYL initializer_list:il CURLYR {:
		System.out.println("Produccion 172");
		MiArbolito parent = new MiArbolito(null, "initializer");
		parent.addChild(il);
		RESULT = parent;
	:}
	| CURLYL initializer_list:il COMMA CURLYR {:
		System.out.println("Produccion 173");
		MiArbolito parent = new MiArbolito(null, "initializer");
		parent.addChild(il);
		RESULT = parent;
	:}
	;

initializer_list ::=
	initializer:i {:
		System.out.println("Produccion 174");
		MiArbolito parent = new MiArbolito(null, "initializer");
		parent.addChild(i);
		RESULT = parent;
	:}
	| initializer_list:il COMMA initializer:i {:
		System.out.println("Produccion 175");
		MiArbolito parent = new MiArbolito(null, "initializer");
		parent.addChild(i);
		parent.addChild(il);
		RESULT = parent;
	:}
	;

statement ::=
	labeled_statement:otherstmnt {:
		System.out.println("Produccion 176");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	| compound_statement:otherstmnt {:
		System.out.println("Produccion 177");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	| expression_statement:otherstmnt {:
		System.out.println("Produccion 178");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	| selection_statement:otherstmnt {:
		System.out.println("Produccion 179");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	| iteration_statement:otherstmnt {:
		System.out.println("Produccion 180");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	| jump_statement:otherstmnt {:
		System.out.println("Produccion 181");
		MiArbolito parent = new MiArbolito(null, "statement");
		parent.addChild(otherstmnt);
		RESULT = parent;
	:}
	;

labeled_statement ::=
	IDENTIFIER:id COLON statement:s {:
		System.out.println("Produccion 182");
		MiArbolito parent = new MiArbolito(null, "labeled_statement");
		parent.addChild(id);
		parent.addChild(s);
		RESULT = parent;
	:}
	| CASE:cs constant_expression:ce COLON statement:s {:
		System.out.println("Produccion 183");
		MiArbolito parent = new MiArbolito(null, "labeled_statement");
		parent.addChild(cs);
		parent.addChild(ce);
		parent.addChild(s);
		RESULT = parent;
	:}
	| DEFAULT:d COLON statement:s {:
		System.out.println("Produccion 184");
		MiArbolito parent = new MiArbolito(null, "labeled_statement");
		parent.addChild(d);
		parent.addChild(s);
		RESULT = parent;
	:}
	;

compound_statement ::=
	CURLYL CURLYR {:
		System.out.println("Produccion 185");
		MiArbolito parent = new MiArbolito(null, "compound_statement");
		RESULT = parent;
	:}
	| CURLYL decl_stmnt_list:dsl CURLYR {:
		System.out.println("Produccion 186");
		MiArbolito parent = new MiArbolito(null, "compound_statement");
		parent.addChild(dsl);
		RESULT = parent;
	:}
	;
declaration_list ::=
	declaration:d {:
		System.out.println("Produccion 187");
		MiArbolito parent = new MiArbolito(null, "declaration_list");
		parent.addChild(d);
		RESULT = parent;
	:}
	| declaration_list:dl declaration:d {:
		System.out.println("Produccion 188");
		MiArbolito parent = new MiArbolito(null, "declaration_list");
		parent.addChild(dl);
		parent.addChild(d);
		RESULT = parent;
	:}
	;

statement_list ::=
	statement:s {:
		System.out.println("Produccion 189");
		MiArbolito parent = new MiArbolito(null, "statement_list");
		parent.addChild(s);
		RESULT = parent;
	:}
	| statement_list:sl statement:s {:
		System.out.println("Produccion 190");
		MiArbolito parent = new MiArbolito(null, "statement_list");
		parent.addChild(sl);
		parent.addChild(s);
		RESULT = parent;
	:}
	;
decl_stmnt_list ::=
	declaration_list:dl {:
		System.out.println("Produccion 191");
		MiArbolito parent = new MiArbolito(null, "decl_stmnt_list");
		parent.addChild(dl);
		RESULT = parent;
	:}
	| statement_list:sl {:
		System.out.println("Produccion 191");
		MiArbolito parent = new MiArbolito(null, "decl_stmnt_list");
		parent.addChild(sl);
		RESULT = parent;
	:}
	| declaration_list:dl statement_list:sl {:
		System.out.println("Produccion 192");
		MiArbolito parent = new MiArbolito(null, "decl_stmnt_list");
		parent.addChild(dl);
		parent.addChild(sl);
		RESULT = parent;
	:}
	| statement_list:sl declaration_list:dl {:
		System.out.println("Produccion 193");
		MiArbolito parent = new MiArbolito(null, "decl_stmnt_list");
		parent.addChild(sl);
		parent.addChild(new Symbol(-1,0,0,"ERROR"));
		System.err.println("Las declaraciones se hacen antes");
		this.parser.errors.add("Las declaraciones se hacen antes");
		RESULT = parent;
	:}
	;

expression_statement ::=
	SEMI {:
		System.out.println("Produccion 194");
		MiArbolito parent = new MiArbolito(null, "expression_statement");
		RESULT = parent;
	:}
	| expression:e SEMI {:
		System.out.println("Produccion 195");
		MiArbolito parent = new MiArbolito(null, "expression_statement");
		parent.addChild(e);
		RESULT = parent;
	:}
	| expression:e declaration:d{:
		System.out.println("Produccion 196");
		MiArbolito parent = new MiArbolito(null, "expression_statement");
		parent.addChild(e);
		parent.addChild(new Symbol(-1,0,0,"ERROR"));
		RESULT = parent;
		System.err.println("Se esperaba ; no una declaración");
				this.parser.errors.add("Se esperaba ; no una declaración");

		//System.err.println(RESULT);
	:}
	| error SEMI {:
		System.out.println("Produccion 197");
		MiArbolito parent = new MiArbolito(null, "expression_statement");
		parent.addChild(new Symbol(-1,0,0,"ERROR"));
		RESULT = parent;
		System.err.println("Expresion malformada");
				this.parser.errors.add("Expresion malformada");

		//System.err.println(RESULT);
	:}
	;

selection_statement ::=
	IF:i PARAL expression:e PARAR statement:s {:
		System.out.println("Produccion 198");
		MiArbolito parent = new MiArbolito(null, "selection_statement");
		parent.addChild(i);
		parent.addChild(e);
		parent.addChild(s);
		RESULT = parent;
	:}
	| IF:i PARAL expression:e PARAR statement:s1 ELSE statement:s2 {:
		System.out.println("Produccion 199");
		MiArbolito parent = new MiArbolito(null, "selection_statement");
		parent.addChild(i);
		parent.addChild(e);
		parent.addChild(s1);
		parent.addChild(s2);
		RESULT = parent;
	:}
	| SWITCH:sw PARAL expression:e PARAR statement:s {:
		System.out.println("Produccion 200");
		MiArbolito parent = new MiArbolito(null, "selection_statement");
		parent.addChild(sw);
		parent.addChild(e);
		parent.addChild(s);
		RESULT = parent;
	:}
	;

iteration_statement ::=
	WHILE:wh PARAL expression:e PARAR statement:s {:
		System.out.println("Produccion 201");
		MiArbolito parent = new MiArbolito(null, "iteration_statement");
		parent.addChild(wh);
		parent.addChild(e);
		parent.addChild(s);
		RESULT = parent;
	:}
	| DO:d statement:s WHILE:wh PARAL expression:e PARAR SEMI {:
		System.out.println("Produccion 202");
		MiArbolito parent = new MiArbolito(null, "iteration_statement");
		parent.addChild(d);
		parent.addChild(s);
		parent.addChild(wh);
		parent.addChild(e);
		RESULT = parent;
	:}
	| FOR:f PARAL expression_statement:es1 expression_statement:es2 PARAR statement:s {:
		System.out.println("Produccion 203");
		MiArbolito parent = new MiArbolito(null, "iteration_statement");
		parent.addChild(f);
		parent.addChild(es1);
		parent.addChild(es2);
		parent.addChild(s);
		RESULT = parent;
	:}
	| FOR:f PARAL expression_statement:es1 expression_statement:es2 expression:e PARAR statement:s {:
		System.out.println("Produccion 204");
		MiArbolito parent = new MiArbolito(null, "iteration_statement");
		parent.addChild(f);
		parent.addChild(es1);
		parent.addChild(es2);
		parent.addChild(e);
		parent.addChild(s);
		RESULT = parent;
	:}
	;

jump_statement ::=
	GOTO:gt IDENTIFIER:id SEMI {:
		System.out.println("Produccion 205");
		MiArbolito parent = new MiArbolito(null, "jump_statement");
		parent.addChild(gt);
		parent.addChild(id);
		RESULT = parent;
	:}
	| CONTINUE:c SEMI {:
		System.out.println("Produccion 206");
		MiArbolito parent = new MiArbolito(null, "jump_statement");
		parent.addChild(c);
		RESULT = parent;
	:}
	| BREAK:br SEMI {:
		System.out.println("Produccion 207");
		MiArbolito parent = new MiArbolito(null, "jump_statement");
		parent.addChild(br);
		RESULT = parent;
	:}
	| RETURN:r SEMI {:
		System.out.println("Produccion 208");
		MiArbolito parent = new MiArbolito(null, "jump_statement");
		parent.addChild(r);
		RESULT = parent;
	:}
	| RETURN:r expression:e SEMI {:
		System.out.println("Produccion 209");
		MiArbolito parent = new MiArbolito(null, "jump_statement");
		parent.addChild(r);
		parent.addChild(e);
		RESULT = parent;
	:}
	;

translation_unit ::=
	external_declaration:ed {:
		System.out.println("Produccion 210");
		MiArbolito parent = new MiArbolito(null, "translation_unit");
		parent.addChild(ed);
		RESULT = parent;                
	:}
	| translation_unit:tu external_declaration:ed {:
		System.out.println("Produccion 211");
		MiArbolito parent = new MiArbolito(null, "translation_unit");
		parent.addChild(tu);
		parent.addChild(ed);
		RESULT = parent;
	:}
	;

external_declaration ::=
	function_definition:fd {:
		System.out.println("Produccion 214");
		MiArbolito parent = new MiArbolito(null, "external_declaration");
		parent.addChild(fd);
		RESULT = parent;
	:}
	| declaration:d {:
		System.out.println("Produccion 215");
		MiArbolito parent = new MiArbolito(null, "external_declaration");
		parent.addChild(d);
		RESULT = parent;
	:}
	| error {:
		System.out.println("Produccion 216");
		MiArbolito parent = new MiArbolito(null, "external_declaration");
		parent.addChild(new Symbol(-1,0,0,"ERROR"));
		RESULT = parent;
		System.err.println("No se esperaba token");
		this.parser.errors.add("No se esperaba token");
		//System.err.println(RESULT);
	:}
	;

function_definition ::=
	declaration_specifiers:ds declarator:d declaration_list:dl compound_statement:cs {:
		System.out.println("Produccion 217");
		MiArbolito parent = new MiArbolito(null, "function_definition");
		parent.addChild(ds);
		parent.addChild(d);
		parent.addChild(dl);
		parent.addChild(cs);
		RESULT = parent;
	:}
	| declaration_specifiers:ds declarator:d compound_statement:cs {:
		System.out.println("Produccion 218");
		MiArbolito parent = new MiArbolito(null, "function_definition");
		parent.addChild(ds);
		parent.addChild(d);
		parent.addChild(cs);
		RESULT = parent;
	:}
	| declarator:d declaration_list:dl compound_statement:cs {:
		System.out.println("Produccion 219");
		MiArbolito parent = new MiArbolito(null, "function_definition");
		parent.addChild(d);
		parent.addChild(dl);
		parent.addChild(cs);
		RESULT = parent;
	:}
	| declarator:d compound_statement:cs {:
		System.out.println("Produccion 220");
		MiArbolito parent = new MiArbolito(null, "function_definition");
		parent.addChild(d);
		parent.addChild(cs);
		RESULT = parent;
	:}
	;
