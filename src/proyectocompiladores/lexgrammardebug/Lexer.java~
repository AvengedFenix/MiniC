// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/proyectocompiladores/lexgrammardebug/c2.flex

package proyectocompiladores;
import java_cup.runtime.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  6,  6,  6, 
     1,  7,  8,  6,  0,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
    20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 24, 25, 26, 27, 
     6, 28, 28, 28, 28, 29, 30, 31, 31, 31, 31, 31, 32, 31, 31, 31, 
    31, 31, 31, 31, 31, 33, 31, 31, 34, 31, 31, 35, 36, 37, 38, 31, 
     6, 39, 40, 41, 42, 43, 44, 45, 46, 47, 31, 48, 49, 50, 51, 52, 
    53, 31, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,  0, 
     0,  0,  0,  0,  0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  6,  0,  0,  0,  0,  6,  6,  6,  6,  0,  6,  6,  0,  6,  6, 
     6,  6,  6,  6,  6,  0,  6,  6,  6,  6,  0,  6,  6,  6,  6,  6, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\2\25"+
    "\1\26\1\27\1\30\20\25\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\36\1\0\1\37\1\40\1\41\3\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\0\1\16"+
    "\2\0\1\50\1\0\1\16\1\0\1\51\1\52\1\53"+
    "\1\54\1\55\1\0\1\56\6\25\1\57\6\25\1\60"+
    "\15\25\1\61\1\62\1\16\1\0\1\63\1\0\1\64"+
    "\3\0\2\16\1\65\1\66\13\25\1\67\1\25\1\70"+
    "\21\25\1\0\1\71\1\25\1\72\1\73\4\25\1\74"+
    "\1\75\2\25\1\76\1\77\15\25\1\100\2\25\1\101"+
    "\1\102\4\25\1\103\3\25\1\104\1\105\6\25\1\106"+
    "\2\25\1\107\2\25\1\110\1\111\1\112\1\25\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\4\25\1\121\1\25"+
    "\1\122\2\25\1\123\1\124\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\104\0\104\0\u0220\0\u0264\0\104\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\104\0\u0440\0\u0484\0\u04c8"+
    "\0\104\0\u050c\0\u0550\0\104\0\104\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\104\0\u0a18"+
    "\0\104\0\104\0\104\0\u0110\0\104\0\u0a5c\0\104\0\104"+
    "\0\104\0\u0aa0\0\u0ae4\0\u0b28\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\104\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\104\0\104\0\104\0\u0d8c\0\u0dd0"+
    "\0\104\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u050c\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\104\0\104\0\104\0\u14fc"+
    "\0\104\0\u1540\0\104\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\104\0\104\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u050c\0\u19c4\0\u050c"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u050c\0\u1ed0\0\u050c\0\u050c\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u050c\0\u050c\0\u2024\0\u2068\0\u050c\0\u050c"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u050c\0\u2420\0\u2464"+
    "\0\u050c\0\u050c\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u050c\0\u25b8"+
    "\0\u25fc\0\u2640\0\u050c\0\u050c\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u050c\0\u281c\0\u2860\0\u050c\0\u28a4\0\u28e8"+
    "\0\u050c\0\u050c\0\u050c\0\u292c\0\u050c\0\u050c\0\u050c\0\u050c"+
    "\0\u050c\0\u050c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u050c\0\u2a80"+
    "\0\u050c\0\u2ac4\0\u2b08\0\u050c\0\u050c\0\u050c\0\u050c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\4\32\1\33\2\32\1\34\1\2"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\32\1\46\1\32\1\47\3\32\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\3\32\1\57\1\60"+
    "\1\61\1\62\1\2\106\0\1\3\132\0\1\63\52\0"+
    "\10\64\1\65\33\64\1\66\37\64\31\0\1\67\1\61"+
    "\63\0\1\70\16\0\1\71\52\0\1\72\12\73\1\0"+
    "\10\73\2\72\6\73\7\72\1\73\1\74\2\73\30\72"+
    "\4\73\1\72\31\0\1\75\71\0\1\76\11\0\1\77"+
    "\73\0\1\100\7\0\1\101\1\102\73\0\1\103\1\0"+
    "\2\104\74\0\1\105\4\0\1\106\5\0\1\107\74\0"+
    "\1\104\1\0\2\23\7\0\1\110\2\0\2\111\1\112"+
    "\10\0\1\110\5\0\1\111\7\0\1\111\2\0\1\112"+
    "\31\0\1\104\1\0\2\23\7\0\1\110\2\0\2\111"+
    "\11\0\1\110\5\0\1\111\7\0\1\111\44\0\1\35"+
    "\62\0\1\57\14\0\1\34\1\0\1\113\1\114\103\0"+
    "\1\115\103\0\1\116\1\117\75\0\2\32\6\0\7\32"+
    "\4\0\30\32\15\0\1\64\2\0\1\120\10\0\2\32"+
    "\6\0\7\32\4\0\30\32\36\0\1\121\76\0\2\32"+
    "\6\0\7\32\4\0\22\32\1\122\5\32\31\0\2\32"+
    "\6\0\7\32\4\0\17\32\1\123\10\32\31\0\2\32"+
    "\6\0\7\32\4\0\1\124\6\32\1\125\5\32\1\126"+
    "\12\32\31\0\2\32\6\0\7\32\4\0\4\32\1\127"+
    "\10\32\1\130\12\32\31\0\2\32\6\0\7\32\4\0"+
    "\12\32\1\131\1\32\1\132\10\32\1\133\2\32\31\0"+
    "\2\32\6\0\7\32\4\0\12\32\1\134\2\32\1\135"+
    "\12\32\31\0\2\32\6\0\7\32\4\0\15\32\1\136"+
    "\12\32\31\0\2\32\6\0\7\32\4\0\5\32\1\137"+
    "\6\32\1\140\13\32\31\0\2\32\6\0\7\32\4\0"+
    "\15\32\1\141\12\32\31\0\2\32\6\0\7\32\4\0"+
    "\17\32\1\142\10\32\31\0\2\32\6\0\7\32\4\0"+
    "\4\32\1\143\23\32\31\0\2\32\6\0\7\32\4\0"+
    "\2\32\1\144\4\32\1\145\1\146\10\32\1\147\2\32"+
    "\1\150\3\32\31\0\2\32\6\0\7\32\4\0\26\32"+
    "\1\151\1\32\31\0\2\32\6\0\7\32\4\0\14\32"+
    "\1\152\13\32\31\0\2\32\6\0\7\32\4\0\15\32"+
    "\1\153\12\32\31\0\2\32\6\0\7\32\4\0\7\32"+
    "\1\154\20\32\36\0\1\155\46\0\1\156\3\0\2\64"+
    "\4\0\75\64\1\0\13\73\1\157\30\73\1\160\52\73"+
    "\1\161\30\73\1\160\37\73\1\72\1\73\4\0\5\73"+
    "\1\72\10\73\2\72\6\73\7\72\1\73\1\72\2\73"+
    "\30\72\4\73\1\162\22\0\1\163\105\0\2\104\7\0"+
    "\1\110\1\157\1\0\1\157\12\0\1\110\1\157\4\0"+
    "\1\157\22\0\16\164\1\165\65\164\2\106\1\3\2\106"+
    "\1\4\76\106\17\0\1\166\1\0\1\166\2\0\2\167"+
    "\116\0\2\111\17\0\1\111\7\0\1\111\36\0\2\170"+
    "\6\0\3\170\10\0\6\170\60\0\1\171\103\0\1\172"+
    "\52\0\13\73\1\0\30\73\1\160\37\73\24\0\2\32"+
    "\6\0\7\32\4\0\21\32\1\173\6\32\31\0\2\32"+
    "\6\0\7\32\4\0\4\32\1\174\23\32\31\0\2\32"+
    "\6\0\7\32\4\0\20\32\1\175\7\32\31\0\2\32"+
    "\6\0\7\32\4\0\1\176\27\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\177\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\5\32\1\200\22\32\31\0\2\32\6\0"+
    "\7\32\4\0\22\32\1\201\5\32\31\0\2\32\6\0"+
    "\7\32\4\0\20\32\1\202\7\32\31\0\2\32\6\0"+
    "\7\32\4\0\22\32\1\203\5\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\204\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\15\32\1\205\12\32\31\0\2\32\6\0"+
    "\7\32\4\0\17\32\1\206\10\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\207\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\210\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\211\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\10\32\1\212\17\32\31\0\2\32\6\0"+
    "\7\32\4\0\6\32\1\213\12\32\1\214\6\32\31\0"+
    "\2\32\6\0\7\32\4\0\1\215\27\32\31\0\2\32"+
    "\6\0\7\32\4\0\15\32\1\216\12\32\31\0\2\32"+
    "\6\0\7\32\4\0\6\32\1\217\20\32\1\220\31\0"+
    "\2\32\6\0\7\32\4\0\1\221\16\32\1\222\10\32"+
    "\31\0\2\32\6\0\7\32\4\0\10\32\1\223\17\32"+
    "\31\0\2\32\6\0\7\32\4\0\16\32\1\224\11\32"+
    "\31\0\2\32\6\0\7\32\4\0\10\32\1\225\7\32"+
    "\1\226\7\32\31\0\2\32\6\0\7\32\4\0\10\32"+
    "\1\227\1\32\1\230\15\32\31\0\2\32\6\0\7\32"+
    "\4\0\10\32\1\231\17\32\5\0\2\73\4\0\75\73"+
    "\14\0\1\157\70\0\16\164\1\232\65\164\16\0\1\165"+
    "\4\0\1\3\104\0\2\167\102\0\2\167\10\0\1\157"+
    "\1\0\1\157\13\0\1\157\4\0\1\157\46\0\2\170"+
    "\6\0\3\170\1\0\2\111\5\0\6\170\4\0\1\111"+
    "\7\0\1\111\36\0\2\32\6\0\7\32\4\0\15\32"+
    "\1\233\12\32\31\0\2\32\6\0\7\32\4\0\1\234"+
    "\27\32\31\0\2\32\6\0\7\32\4\0\4\32\1\235"+
    "\23\32\31\0\2\32\6\0\7\32\4\0\17\32\1\236"+
    "\10\32\31\0\2\32\6\0\7\32\4\0\20\32\1\237"+
    "\1\240\6\32\31\0\2\32\6\0\7\32\4\0\1\241"+
    "\27\32\31\0\2\32\6\0\7\32\4\0\1\32\1\242"+
    "\26\32\31\0\2\32\6\0\7\32\4\0\4\32\1\243"+
    "\23\32\31\0\2\32\6\0\7\32\4\0\13\32\1\244"+
    "\14\32\31\0\2\32\6\0\7\32\4\0\4\32\1\245"+
    "\23\32\31\0\2\32\6\0\7\32\4\0\1\246\27\32"+
    "\31\0\2\32\6\0\7\32\4\0\15\32\1\247\12\32"+
    "\31\0\2\32\6\0\7\32\4\0\6\32\1\250\21\32"+
    "\31\0\2\32\6\0\7\32\4\0\14\32\1\251\13\32"+
    "\31\0\2\32\6\0\7\32\4\0\10\32\1\252\17\32"+
    "\31\0\2\32\6\0\7\32\4\0\22\32\1\253\5\32"+
    "\31\0\2\32\6\0\7\32\4\0\14\32\1\254\13\32"+
    "\31\0\2\32\6\0\7\32\4\0\17\32\1\255\10\32"+
    "\31\0\2\32\6\0\7\32\4\0\14\32\1\256\13\32"+
    "\31\0\2\32\6\0\7\32\4\0\4\32\1\257\23\32"+
    "\31\0\2\32\6\0\7\32\4\0\21\32\1\260\6\32"+
    "\31\0\2\32\6\0\7\32\4\0\22\32\1\261\5\32"+
    "\31\0\2\32\6\0\7\32\4\0\21\32\1\262\6\32"+
    "\31\0\2\32\6\0\7\32\4\0\4\32\1\263\23\32"+
    "\31\0\2\32\6\0\7\32\4\0\15\32\1\264\12\32"+
    "\31\0\2\32\6\0\7\32\4\0\10\32\1\265\17\32"+
    "\31\0\2\32\6\0\7\32\4\0\3\32\1\266\24\32"+
    "\31\0\2\32\6\0\7\32\4\0\1\267\27\32\31\0"+
    "\2\32\6\0\7\32\4\0\12\32\1\270\15\32\5\0"+
    "\16\164\1\232\4\164\1\3\60\164\24\0\2\32\6\0"+
    "\7\32\4\0\11\32\1\271\16\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\272\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\10\32\1\273\17\32\31\0\2\32\6\0"+
    "\7\32\4\0\22\32\1\274\5\32\31\0\2\32\6\0"+
    "\7\32\4\0\12\32\1\275\15\32\31\0\2\32\6\0"+
    "\7\32\4\0\17\32\1\276\10\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\277\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\300\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\20\32\1\301\7\32\31\0\2\32\6\0"+
    "\7\32\4\0\17\32\1\302\10\32\31\0\2\32\6\0"+
    "\7\32\4\0\5\32\1\303\22\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\304\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\305\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\15\32\1\306\12\32\31\0\2\32\6\0"+
    "\7\32\4\0\10\32\1\307\17\32\31\0\2\32\6\0"+
    "\7\32\4\0\2\32\1\310\25\32\31\0\2\32\6\0"+
    "\7\32\4\0\2\32\1\311\25\32\31\0\2\32\6\0"+
    "\7\32\4\0\3\32\1\312\24\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\313\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\6\32\1\314\21\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\315\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\316\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\317\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\12\32\1\320\15\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\321\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\322\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\5\32\1\323\22\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\324\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\325\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\3\32\1\326\24\32\31\0\2\32\6\0"+
    "\7\32\4\0\5\32\1\327\22\32\31\0\2\32\6\0"+
    "\7\32\4\0\2\32\1\330\25\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\331\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\7\32\1\332\20\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\333\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\14\32\1\334\13\32\31\0\2\32\6\0"+
    "\7\32\4\0\10\32\1\335\17\32\31\0\2\32\6\0"+
    "\7\32\4\0\22\32\1\336\5\32\31\0\2\32\6\0"+
    "\7\32\4\0\21\32\1\337\6\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\340\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\5\32\1\341\22\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\342\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\12\32\1\343\15\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\344\23\32\31\0\2\32\6\0"+
    "\7\32\4\0\17\32\1\345\10\32\31\0\2\32\6\0"+
    "\7\32\4\0\3\32\1\346\24\32\31\0\2\32\6\0"+
    "\7\32\4\0\4\32\1\347\23\32\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11084];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\1\11\2\1\2\11\21\1\1\11\1\1\3\11"+
    "\1\0\1\11\1\0\3\11\3\0\6\11\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\3\11\1\1"+
    "\1\0\1\11\33\1\3\11\1\0\1\11\1\0\1\11"+
    "\3\0\2\1\2\11\37\1\1\0\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                System.out.println("EOF found" );
        return new Symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error Lexico, token no identificado: "+yytext()+" "+(yyline+1)+" : "+(yycolumn+1));
            }
            // fall through
          case 87: break;
          case 2:
            { 
            }
            // fall through
          case 88: break;
          case 3:
            { System.out.println("EXCLAMATION " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.NOT,yyline,yycolumn,yytext());
            }
            // fall through
          case 89: break;
          case 4:
            { System.out.println("MOD_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.MODULUS,yyline,yycolumn,yytext());
            }
            // fall through
          case 90: break;
          case 5:
            { System.out.println("AMPERSAND " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ADRESS,yyline,yycolumn,yytext());
            }
            // fall through
          case 91: break;
          case 6:
            { System.out.println("LPARENTHESIS " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.PARAL,yyline,yycolumn,yytext());
            }
            // fall through
          case 92: break;
          case 7:
            { System.out.println("RPARENTHERSIS " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.PARAR,yyline,yycolumn,yytext());
            }
            // fall through
          case 93: break;
          case 8:
            { System.out.println("MULT_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.MUL,yyline,yycolumn,yytext());
            }
            // fall through
          case 94: break;
          case 9:
            { System.out.println("ADD_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.PLUS,yyline,yycolumn,yytext());
            }
            // fall through
          case 95: break;
          case 10:
            { System.out.println("COMMA " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.COMMA,yyline,yycolumn,yytext());
            }
            // fall through
          case 96: break;
          case 11:
            { System.out.println("SUB_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.MINUS,yyline,yycolumn,yytext());
            }
            // fall through
          case 97: break;
          case 12:
            { System.out.println("DOT " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.POINT,yyline,yycolumn,yytext());
            }
            // fall through
          case 98: break;
          case 13:
            { System.out.println("DIV_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DIVIDE,yyline,yycolumn,yytext());
            }
            // fall through
          case 99: break;
          case 14:
            { System.out.println("CONSTANT " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CONSTANT,yyline,yycolumn,yytext());
            }
            // fall through
          case 100: break;
          case 15:
            { System.out.println("COLON " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.COLON,yyline,yycolumn,yytext());
            }
            // fall through
          case 101: break;
          case 16:
            { System.out.println("SEMICOLON " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SEMI,yyline,yycolumn,yytext());
            }
            // fall through
          case 102: break;
          case 17:
            { System.out.println("L_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.LESS,yyline,yycolumn,yytext());
            }
            // fall through
          case 103: break;
          case 18:
            { System.out.println("ASSIGN_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 104: break;
          case 19:
            { System.out.println("G_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.GREATER,yyline,yycolumn,yytext());
            }
            // fall through
          case 105: break;
          case 20:
            { System.out.println("QUESTION " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.COND,yyline,yycolumn,yytext());
            }
            // fall through
          case 106: break;
          case 21:
            { System.out.println("IDENTIFIER " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.IDENTIFIER,yyline,yycolumn,yytext());
            }
            // fall through
          case 107: break;
          case 22:
            { System.out.println("LBRACKET " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SQUAREDL,yyline,yycolumn,yytext());
            }
            // fall through
          case 108: break;
          case 23:
            { System.out.println("RBRACKET " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SQUAREDR,yyline,yycolumn,yytext());
            }
            // fall through
          case 109: break;
          case 24:
            { System.out.println("HAT " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.XOR,yyline,yycolumn,yytext());
            }
            // fall through
          case 110: break;
          case 25:
            { System.out.println("LCURLY " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CURLYL,yyline,yycolumn,yytext());
            }
            // fall through
          case 111: break;
          case 26:
            { System.out.println("PIPE " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.OR,yyline,yycolumn,yytext());
            }
            // fall through
          case 112: break;
          case 27:
            { System.out.println("RCURLY " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CURLYR,yyline,yycolumn,yytext());
            }
            // fall through
          case 113: break;
          case 28:
            { System.out.println("TILDE " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.TILDE,yyline,yycolumn,yytext());
            }
            // fall through
          case 114: break;
          case 29:
            { System.out.println("NE_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.NE_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 115: break;
          case 30:
            { System.out.println("STRING_LITERAL " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.STRING_LITERAL,yyline,yycolumn,yytext());
            }
            // fall through
          case 116: break;
          case 31:
            { System.out.println("MOD_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.MOD_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 117: break;
          case 32:
            { System.out.println("AND_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.AND_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 118: break;
          case 33:
            { System.out.println("AND_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.AND_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 119: break;
          case 34:
            { System.out.println("MUL_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.MUL_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 120: break;
          case 35:
            { System.out.println("INC_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.INC_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 121: break;
          case 36:
            { System.out.println("ADD_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ADD_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 122: break;
          case 37:
            { System.out.println("DEC_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DEC_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 123: break;
          case 38:
            { System.out.println("SUB_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SUB_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 124: break;
          case 39:
            { System.out.println("PTR_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.PTR_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 125: break;
          case 40:
            { System.out.println("DIV_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DIV_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 126: break;
          case 41:
            { System.out.println("LEFT_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.LEFT_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 127: break;
          case 42:
            { System.out.println("LE_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.LE_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 128: break;
          case 43:
            { System.out.println("EQ_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.EQ_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 129: break;
          case 44:
            { System.out.println("GE_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.GE_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 130: break;
          case 45:
            { System.out.println("RIGHT_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.RIGHT_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 131: break;
          case 46:
            { System.out.println("XOR_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.XOR_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 132: break;
          case 47:
            { System.out.println("do " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DO,yyline,yycolumn,yytext());
            }
            // fall through
          case 133: break;
          case 48:
            { System.out.println("if " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.IF,yyline,yycolumn,yytext());
            }
            // fall through
          case 134: break;
          case 49:
            { System.out.println("OR_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.OR_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 135: break;
          case 50:
            { System.out.println("OR_OP " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.OR_OP,yyline,yycolumn,yytext());
            }
            // fall through
          case 136: break;
          case 51:
            { System.err.println("Error Lexico, comillas dobles para strings: "+yytext()+" "+(yyline+1)+" : "+(yycolumn+1));
            }
            // fall through
          case 137: break;
          case 52:
            { System.out.println("ELLIPSIS " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ELLIPSIS,yyline,yycolumn,yytext());
            }
            // fall through
          case 138: break;
          case 53:
            { System.out.println("LEFT_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.LEFT_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 139: break;
          case 54:
            { System.out.println("RIGHT_ASSIGN " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.RIGHT_ASSIGN,yyline,yycolumn,yytext());
            }
            // fall through
          case 140: break;
          case 55:
            { System.out.println("for " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.FOR,yyline,yycolumn,yytext());
            }
            // fall through
          case 141: break;
          case 56:
            { System.out.println("int " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.INT,yyline,yycolumn,yytext());
            }
            // fall through
          case 142: break;
          case 57:
            { System.out.println("auto " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.AUTO,yyline,yycolumn,yytext());
            }
            // fall through
          case 143: break;
          case 58:
            { System.out.println("case " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CASE,yyline,yycolumn,yytext());
            }
            // fall through
          case 144: break;
          case 59:
            { System.out.println("char " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CHAR,yyline,yycolumn,yytext());
            }
            // fall through
          case 145: break;
          case 60:
            { System.out.println("else " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ELSE,yyline,yycolumn,yytext());
            }
            // fall through
          case 146: break;
          case 61:
            { System.out.println("enum " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.ENUM,yyline,yycolumn,yytext());
            }
            // fall through
          case 147: break;
          case 62:
            { System.out.println("goto " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.GOTO,yyline,yycolumn,yytext());
            }
            // fall through
          case 148: break;
          case 63:
            { System.out.println("long " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.LONG,yyline,yycolumn,yytext());
            }
            // fall through
          case 149: break;
          case 64:
            { System.out.println("void " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.VOID,yyline,yycolumn,yytext());
            }
            // fall through
          case 150: break;
          case 65:
            { System.out.println("break " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.BREAK,yyline,yycolumn,yytext());
            }
            // fall through
          case 151: break;
          case 66:
            { System.out.println("const " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CONST,yyline,yycolumn,yytext());
            }
            // fall through
          case 152: break;
          case 67:
            { System.out.println("float " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.FLOAT,yyline,yycolumn,yytext());
            }
            // fall through
          case 153: break;
          case 68:
            { System.out.println("scanf " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SCANF,yyline,yycolumn,yytext());
            }
            // fall through
          case 154: break;
          case 69:
            { System.out.println("short " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SHORT,yyline,yycolumn,yytext());
            }
            // fall through
          case 155: break;
          case 70:
            { System.out.println("union " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.UNION,yyline,yycolumn,yytext());
            }
            // fall through
          case 156: break;
          case 71:
            { System.out.println("while " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
            }
            // fall through
          case 157: break;
          case 72:
            { System.out.println("double " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DOUBLE,yyline,yycolumn,yytext());
            }
            // fall through
          case 158: break;
          case 73:
            { System.out.println("extern " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.EXTERN,yyline,yycolumn,yytext());
            }
            // fall through
          case 159: break;
          case 74:
            { System.out.println("printf " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.PRINTF,yyline,yycolumn,yytext());
            }
            // fall through
          case 160: break;
          case 75:
            { System.out.println("return " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
            }
            // fall through
          case 161: break;
          case 76:
            { System.out.println("signed " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SIGNED,yyline,yycolumn,yytext());
            }
            // fall through
          case 162: break;
          case 77:
            { System.out.println("sizeof " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SIZEOF,yyline,yycolumn,yytext());
            }
            // fall through
          case 163: break;
          case 78:
            { System.out.println("static " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.STATIC,yyline,yycolumn,yytext());
            }
            // fall through
          case 164: break;
          case 79:
            { System.out.println("struct " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.STRUCT,yyline,yycolumn,yytext());
            }
            // fall through
          case 165: break;
          case 80:
            { System.out.println("switch " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.SWITCH,yyline,yycolumn,yytext());
            }
            // fall through
          case 166: break;
          case 81:
            { System.out.println("default " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.DEFAULT,yyline,yycolumn,yytext());
            }
            // fall through
          case 167: break;
          case 82:
            { System.out.println("typedef " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.TYPEDEF,yyline,yycolumn,yytext());
            }
            // fall through
          case 168: break;
          case 83:
            { System.out.println("continue " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.CONTINUE,yyline,yycolumn,yytext());
            }
            // fall through
          case 169: break;
          case 84:
            { System.out.println("register " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.REGISTER,yyline,yycolumn,yytext());
            }
            // fall through
          case 170: break;
          case 85:
            { System.out.println("unsigned " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.UNSIGNED,yyline,yycolumn,yytext());
            }
            // fall through
          case 171: break;
          case 86:
            { System.out.println("volatile " + yytext() + " => at (" + yyline +"," + yycolumn +")");
                return new Symbol(sym.VOLATILE,yyline,yycolumn,yytext());
            }
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
