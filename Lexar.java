/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\41\1\42\1\42\1\41\22\0\1\40\1\1\1\45"+
    "\1\0\1\0\1\0\1\0\1\0\1\43\1\44\1\6\1\4\1\0"+
    "\1\5\1\0\1\7\12\11\1\0\1\13\1\3\1\2\1\3\1\0"+
    "\1\0\32\10\1\0\1\0\1\0\1\0\1\0\1\0\1\24\1\27"+
    "\1\31\1\25\1\30\1\23\1\22\1\32\1\15\2\10\1\20\1\10"+
    "\1\16\1\21\2\10\1\33\1\35\1\17\1\26\1\34\1\36\3\10"+
    "\1\14\1\0\1\0\7\0\1\42\32\0\1\37\1\0\35\0\1\0"+
    "\2\0\1\0\u15bd\0\1\37\u097f\0\13\37\35\0\1\42\1\42\5\0"+
    "\1\37\57\0\1\37\u0fa0\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\16\1\1\2\1\0\1\1\20\0\1\1\22\0"+
    "\1\3\1\1\143\0\1\4\2\0\1\5\40\0\1\6"+
    "\13\0\1\7\12\0\1\10\16\0\1\11\32\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u01c8"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u023a\0\u0792\0\u07b8"+
    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398"+
    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u0214\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2"+
    "\0\u15f8\0\u161e\0\46\0\u1644\0\u166a\0\46\0\u1690\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6"+
    "\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916"+
    "\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46"+
    "\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\46\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80"+
    "\0\u1ca6\0\u1ccc\0\46\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\46\0\u1e6e\0\u1e94"+
    "\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4"+
    "\0\u1fea\0\u2010\0\u2036\0\u205c\0\46\0\u2082\0\u20a8\0\u20ce"+
    "\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u21fe"+
    "\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e"+
    "\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\2\1\3\2\2\1\4\2\2\1\5\2\2\1\6"+
    "\2\2\1\7\1\2\1\10\1\11\1\12\1\2\1\13"+
    "\2\2\1\14\1\15\1\16\2\17\1\4\1\20\3\2"+
    "\54\0\1\21\51\0\1\22\5\0\1\23\14\0\1\24"+
    "\1\0\2\25\1\22\1\25\21\0\1\26\4\0\1\27"+
    "\43\0\1\30\44\0\1\31\1\32\45\0\1\33\42\0"+
    "\1\34\50\0\1\35\56\0\1\36\34\0\1\37\41\0"+
    "\1\40\62\0\1\41\25\0\1\25\5\0\1\23\14\0"+
    "\1\24\1\0\4\25\3\0\6\21\1\42\32\21\2\0"+
    "\3\21\12\0\1\43\2\0\1\44\5\0\1\45\1\0"+
    "\1\46\11\0\2\47\1\43\1\47\24\0\1\50\56\0"+
    "\1\51\25\0\1\47\2\0\1\44\5\0\1\45\1\0"+
    "\1\46\11\0\4\47\22\0\1\52\71\0\1\53\20\0"+
    "\1\54\50\0\1\55\57\0\1\56\40\0\1\57\54\0"+
    "\1\60\31\0\1\61\50\0\1\62\36\0\1\63\52\0"+
    "\1\64\40\0\1\65\30\0\6\21\1\42\1\66\31\21"+
    "\2\0\3\21\12\0\1\67\2\0\1\44\5\0\1\45"+
    "\1\0\1\46\13\0\1\67\22\0\1\70\47\0\1\71"+
    "\46\0\1\72\41\0\1\44\5\0\1\45\1\0\1\46"+
    "\36\0\1\73\50\0\1\74\36\0\1\75\24\0\4\75"+
    "\13\0\2\76\3\0\22\76\1\0\1\76\27\0\1\52"+
    "\47\0\1\26\33\0\1\56\24\0\4\56\1\77\31\0"+
    "\1\100\36\0\1\101\60\0\1\102\37\0\1\103\36\0"+
    "\1\104\47\0\1\105\37\0\1\67\26\0\1\67\23\0"+
    "\1\106\47\0\1\107\52\0\1\110\41\0\1\111\56\0"+
    "\1\112\22\0\2\113\1\114\2\0\17\113\1\115\2\113"+
    "\1\114\1\116\2\114\4\0\2\117\1\120\4\0\2\76"+
    "\3\0\22\76\1\0\1\76\22\0\1\121\2\0\1\122"+
    "\2\0\1\123\1\0\1\124\1\0\1\125\1\0\1\126"+
    "\34\0\1\127\37\0\1\130\24\0\4\130\15\0\1\131"+
    "\24\0\4\131\15\0\1\132\24\0\4\132\33\0\1\133"+
    "\45\0\1\134\27\0\1\135\24\0\4\135\27\0\1\70"+
    "\50\0\1\136\30\0\1\25\24\0\4\25\22\0\1\111"+
    "\36\0\2\113\1\137\2\0\22\113\1\137\1\113\2\137"+
    "\1\140\14\0\1\114\21\0\1\141\2\0\4\114\13\0"+
    "\2\113\1\137\2\0\7\113\1\142\12\113\1\137\1\113"+
    "\2\137\1\140\12\0\2\113\1\143\2\0\17\113\1\115"+
    "\2\113\1\143\1\116\2\143\1\140\4\0\1\144\45\0"+
    "\1\144\5\0\2\145\3\0\22\145\1\0\1\145\23\0"+
    "\1\146\50\0\1\147\44\0\1\150\46\0\1\151\45\0"+
    "\1\152\56\0\1\153\43\0\1\52\25\0\2\154\1\114"+
    "\2\0\17\154\1\155\2\154\1\114\1\156\2\114\13\0"+
    "\2\157\1\114\2\0\17\157\1\160\2\157\1\114\1\161"+
    "\2\114\13\0\2\113\3\0\22\113\1\0\1\113\32\0"+
    "\1\162\32\0\1\134\24\0\4\134\1\163\12\0\2\164"+
    "\3\0\22\164\1\0\1\164\25\0\1\165\37\0\1\137"+
    "\24\0\4\137\1\140\14\0\1\140\2\0\1\166\2\0"+
    "\1\167\2\0\1\170\1\0\1\171\1\0\1\172\1\0"+
    "\1\173\2\0\1\174\2\0\4\140\1\0\1\175\25\0"+
    "\1\176\31\0\2\113\1\137\2\0\16\113\1\177\3\113"+
    "\1\137\1\113\2\137\1\140\14\0\1\143\21\0\1\141"+
    "\2\0\4\143\1\140\12\0\2\145\3\0\22\145\1\0"+
    "\1\145\15\0\2\145\3\0\22\145\1\0\1\145\3\0"+
    "\1\200\20\0\1\201\44\0\1\202\50\0\1\203\52\0"+
    "\1\204\40\0\1\205\50\0\1\206\23\0\1\207\5\0"+
    "\2\154\1\210\2\0\22\154\1\210\1\154\2\210\1\140"+
    "\4\0\1\207\5\0\2\154\1\210\2\0\7\154\1\211"+
    "\12\154\1\210\1\154\2\210\1\140\4\0\1\207\5\0"+
    "\2\154\1\212\2\0\17\154\1\155\2\154\1\212\1\156"+
    "\2\212\1\140\4\0\1\213\5\0\2\157\1\214\2\0"+
    "\22\157\1\214\1\157\2\214\1\140\4\0\1\213\5\0"+
    "\2\157\1\214\2\0\7\157\1\215\12\157\1\214\1\157"+
    "\2\214\1\140\4\0\1\213\5\0\2\157\1\216\2\0"+
    "\17\157\1\160\2\157\1\216\1\161\2\216\1\140\14\0"+
    "\1\217\24\0\4\217\13\0\2\220\1\163\2\0\22\220"+
    "\1\163\1\221\2\163\5\0\1\222\5\0\2\164\1\223"+
    "\2\0\22\164\1\223\1\164\2\223\33\0\1\106\33\0"+
    "\1\224\50\0\1\225\44\0\1\226\46\0\1\227\45\0"+
    "\1\230\56\0\1\231\34\0\1\232\36\0\1\175\1\0"+
    "\1\233\22\0\4\175\36\0\1\234\22\0\2\113\1\137"+
    "\2\0\1\235\21\113\1\137\1\113\2\137\1\140\16\0"+
    "\1\236\43\0\1\237\24\0\4\237\25\0\1\201\47\0"+
    "\1\146\50\0\1\240\36\0\1\201\60\0\1\201\24\0"+
    "\1\207\4\0\1\241\3\0\1\242\13\0\4\207\5\0"+
    "\1\207\7\0\1\210\24\0\4\210\1\140\4\0\1\207"+
    "\5\0\2\154\1\210\2\0\16\154\1\243\3\154\1\210"+
    "\1\154\2\210\1\140\4\0\1\207\7\0\1\212\21\0"+
    "\1\141\2\0\4\212\1\140\14\0\1\213\24\0\4\213"+
    "\2\0\1\244\2\0\1\213\7\0\1\214\24\0\4\214"+
    "\1\140\4\0\1\213\5\0\2\157\1\214\2\0\16\157"+
    "\1\245\3\157\1\214\1\157\2\214\1\140\4\0\1\213"+
    "\7\0\1\216\21\0\1\141\2\0\4\216\1\140\3\0"+
    "\2\246\1\247\4\0\2\220\1\250\2\0\22\220\1\250"+
    "\1\220\2\250\4\0\2\246\1\247\4\0\2\220\1\221"+
    "\2\0\22\220\4\221\14\0\1\251\1\222\24\0\4\222"+
    "\5\0\1\222\7\0\1\223\24\0\4\223\22\0\1\252"+
    "\44\0\1\253\50\0\1\254\52\0\1\255\40\0\1\256"+
    "\50\0\1\257\36\0\1\260\45\0\1\261\40\0\2\113"+
    "\1\137\2\0\7\113\1\262\12\113\1\137\1\113\2\137"+
    "\1\140\12\0\2\263\3\0\22\263\1\0\1\263\25\0"+
    "\1\264\60\0\1\265\36\0\1\266\23\0\1\207\5\0"+
    "\2\154\1\210\2\0\1\267\21\154\1\210\1\154\2\210"+
    "\1\140\12\0\2\270\1\244\2\0\22\270\4\244\2\0"+
    "\1\271\2\0\1\213\5\0\2\157\1\214\2\0\1\272"+
    "\21\157\1\214\1\157\2\214\1\140\4\0\1\273\45\0"+
    "\1\273\5\0\2\274\1\273\2\0\22\274\1\273\1\275"+
    "\2\273\4\0\2\246\1\247\6\0\1\250\24\0\4\250"+
    "\14\0\1\251\1\276\1\277\23\0\4\276\15\0\1\300"+
    "\24\0\4\300\25\0\1\252\47\0\1\224\50\0\1\301"+
    "\36\0\1\252\60\0\1\252\37\0\1\302\44\0\1\303"+
    "\31\0\2\113\1\137\2\0\12\113\1\304\7\113\1\137"+
    "\1\113\2\137\1\140\4\0\1\305\5\0\2\263\1\306"+
    "\2\0\22\263\1\306\1\263\2\306\33\0\1\201\43\0"+
    "\1\307\37\0\1\310\27\0\1\207\5\0\2\154\1\210"+
    "\2\0\7\154\1\311\12\154\1\210\1\154\2\210\1\140"+
    "\12\0\2\270\1\312\2\0\22\270\1\312\1\270\2\312"+
    "\2\0\1\271\12\0\1\271\1\313\23\0\4\271\5\0"+
    "\1\213\5\0\2\157\1\214\2\0\7\157\1\314\12\157"+
    "\1\214\1\157\2\214\1\140\12\0\2\274\1\273\2\0"+
    "\22\274\1\273\1\275\2\273\13\0\2\274\1\315\2\0"+
    "\22\274\1\315\1\274\2\315\1\0\1\316\11\0\2\274"+
    "\1\275\2\0\22\274\4\275\1\0\1\316\13\0\1\276"+
    "\1\277\23\0\4\276\13\0\2\317\3\0\22\317\1\0"+
    "\1\317\25\0\1\320\37\0\1\302\24\0\4\302\1\0"+
    "\1\175\30\0\1\321\26\0\2\113\1\137\2\0\3\113"+
    "\1\322\16\113\1\137\1\113\2\137\1\140\13\0\1\323"+
    "\1\305\24\0\4\305\5\0\1\305\7\0\1\306\24\0"+
    "\4\306\33\0\1\271\52\0\1\307\12\0\1\207\5\0"+
    "\2\154\1\210\2\0\12\154\1\324\7\154\1\210\1\154"+
    "\2\210\1\140\14\0\1\312\24\0\4\312\2\0\1\271"+
    "\2\0\1\213\5\0\2\157\1\214\2\0\12\157\1\325"+
    "\7\157\1\214\1\157\2\214\1\140\14\0\1\315\24\0"+
    "\4\315\1\0\1\316\13\0\1\316\1\0\1\326\22\0"+
    "\4\316\13\0\2\317\1\302\2\0\22\317\1\302\1\317"+
    "\2\302\1\0\1\175\31\0\1\252\35\0\1\327\35\0"+
    "\2\113\1\137\2\0\13\113\1\330\6\113\1\137\1\113"+
    "\2\137\1\140\13\0\1\323\1\331\1\332\23\0\4\331"+
    "\5\0\1\207\5\0\2\154\1\210\2\0\3\154\1\333"+
    "\16\154\1\210\1\154\2\210\1\140\4\0\1\213\5\0"+
    "\2\157\1\214\2\0\3\157\1\334\16\157\1\214\1\157"+
    "\2\214\1\140\32\0\1\335\25\0\2\113\1\137\2\0"+
    "\20\113\1\336\1\113\1\137\1\113\2\137\1\140\14\0"+
    "\1\331\1\332\23\0\4\331\13\0\2\337\1\332\2\0"+
    "\22\337\1\332\1\340\2\332\5\0\1\207\5\0\2\154"+
    "\1\210\2\0\13\154\1\341\6\154\1\210\1\154\2\210"+
    "\1\140\4\0\1\213\5\0\2\157\1\214\2\0\13\157"+
    "\1\342\6\157\1\214\1\157\2\214\1\140\37\0\1\343"+
    "\20\0\2\113\1\344\1\345\1\0\17\113\1\115\2\113"+
    "\1\344\1\346\2\344\1\140\3\0\2\347\1\350\4\0"+
    "\2\337\1\351\2\0\22\337\1\351\1\337\2\351\4\0"+
    "\2\347\1\350\4\0\2\337\1\340\2\0\22\337\4\340"+
    "\5\0\1\207\5\0\2\154\1\210\2\0\20\154\1\352"+
    "\1\154\1\210\1\154\2\210\1\140\4\0\1\213\5\0"+
    "\2\157\1\214\2\0\20\157\1\353\1\157\1\214\1\157"+
    "\2\214\1\140\14\0\1\354\1\345\20\0\1\141\2\0"+
    "\4\354\15\0\1\344\1\345\23\0\4\344\1\140\12\0"+
    "\2\113\1\344\1\345\1\0\22\113\1\344\1\346\2\344"+
    "\1\140\4\0\1\355\45\0\1\355\6\0\1\356\1\355"+
    "\24\0\4\355\4\0\2\347\1\350\6\0\1\351\24\0"+
    "\4\351\5\0\1\207\5\0\2\154\1\357\1\345\1\0"+
    "\17\154\1\155\2\154\1\357\1\360\2\357\1\140\4\0"+
    "\1\213\5\0\2\157\1\361\1\345\1\0\17\157\1\160"+
    "\2\157\1\361\1\362\2\361\1\140\14\0\1\354\1\345"+
    "\23\0\4\354\14\0\1\356\1\355\24\0\4\355\14\0"+
    "\1\356\1\363\1\364\23\0\4\363\5\0\1\207\7\0"+
    "\1\357\1\345\23\0\4\357\1\140\4\0\1\207\5\0"+
    "\2\154\1\357\1\345\1\0\22\154\1\357\1\360\2\357"+
    "\1\140\4\0\1\213\7\0\1\361\1\345\23\0\4\361"+
    "\1\140\4\0\1\213\5\0\2\157\1\361\1\345\1\0"+
    "\22\157\1\361\1\362\2\361\1\140\14\0\1\363\1\364"+
    "\23\0\4\363\13\0\2\365\1\364\2\0\22\365\1\364"+
    "\1\366\2\364\5\0\1\367\1\0\1\370\1\371\2\0"+
    "\2\365\1\372\2\0\22\365\1\372\1\365\2\372\5\0"+
    "\1\367\1\0\1\370\1\371\2\0\2\365\1\373\2\0"+
    "\22\365\1\373\1\366\2\373\13\0\1\374\1\375\1\367"+
    "\2\0\22\374\4\367\7\0\1\376\46\0\1\376\42\0"+
    "\1\367\7\0\1\372\24\0\4\372\5\0\1\367\5\0"+
    "\2\365\1\373\2\0\22\365\1\373\1\366\2\373\13\0"+
    "\1\374\1\375\3\0\22\374\1\0\1\374\15\0\1\374"+
    "\1\375\1\376\2\0\22\374\1\376\1\375\2\376\1\0"+
    "\1\377\13\0\1\376\24\0\4\376\1\0\1\377\13\0"+
    "\1\377\1\0\1\u0100\22\0\4\377\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\0\1\1\20\0\1\1\22\0"+
    "\2\1\143\0\1\11\2\0\1\11\40\0\1\11\13\0"+
    "\1\11\12\0\1\11\16\0\1\11\32\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 11: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 12: break;
          case 3: 
            { System.out.println("Comentario encontrado: " + yytext() + "\n");
            } 
            // fall through
          case 13: break;
          case 4: 
            { System.out.println("Function found: " + yytext() + "\n");
            } 
            // fall through
          case 14: break;
          case 5: 
            { System.out.println("if was found: " + yytext() + "\n");
            } 
            // fall through
          case 15: break;
          case 6: 
            { System.out.println("Number declaration found: " + yytext() + "\n");
            } 
            // fall through
          case 16: break;
          case 7: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() + "\n");
            } 
            // fall through
          case 17: break;
          case 8: 
            { System.out.println("While found: " + yytext() + "\n");

        //yybegin(metodo);
            } 
            // fall through
          case 18: break;
          case 9: 
            { System.out.println("Declaration: " + yytext() + "\n");
            } 
            // fall through
          case 19: break;
          case 10: 
            { System.out.println("For found: " + yytext() + "\n");
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
