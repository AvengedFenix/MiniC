/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int line_comment = 2;
  public static final int comment = 4;
  public static final int includes = 6;
  public static final int whileLoops = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\51\1\57\1\57\1\56\22\0\1\54\1\1\1\55"+
    "\1\20\1\0\1\0\1\0\1\0\1\60\1\61\1\7\1\5\1\0"+
    "\1\6\1\15\1\10\4\12\1\42\1\12\1\41\3\12\1\0\1\14"+
    "\1\3\1\2\1\4\1\0\1\0\32\11\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\21\1\46\1\27\1\45\1\23\1\37\1\44\1\26"+
    "\1\40\1\43\1\11\1\33\1\31\1\36\1\30\1\32\1\11\1\24"+
    "\1\22\1\25\1\47\1\52\1\50\1\34\1\35\1\11\1\16\1\0"+
    "\1\17\7\0\1\57\32\0\1\53\1\0\35\0\1\0\u15c0\0\1\53"+
    "\u097f\0\13\53\35\0\1\57\1\57\5\0\1\53\57\0\1\53\u0fa0\0"+
    "\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\16\1\1\2\2\1\1\3\1\1\1\2\1\3"+
    "\1\4\1\2\1\5\1\6\1\1\20\0\1\2\4\0"+
    "\1\5\1\6\1\1\23\0\1\2\1\0\1\7\23\0"+
    "\1\7\155\0\1\10\4\0\1\11\12\0\1\12\30\0"+
    "\1\13\14\0\1\14\1\0\1\15\41\0\1\14\5\0"+
    "\1\16\2\0\1\17\106\0\1\20\42\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u041a\0\u044c"+
    "\0\u047e\0\372\0\372\0\372\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u08ca\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u092e\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u041a"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\372\0\u26de"+
    "\0\u2710\0\u2742\0\u2774\0\372\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\372\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\372"+
    "\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8"+
    "\0\u2fda\0\u300c\0\u303e\0\u3070\0\u2936\0\u30a2\0\372\0\u30d4"+
    "\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264"+
    "\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4"+
    "\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584"+
    "\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714"+
    "\0\372\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e\0\372\0\u3840"+
    "\0\u3872\0\372\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e"+
    "\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e"+
    "\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe"+
    "\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e"+
    "\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde"+
    "\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e"+
    "\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe"+
    "\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e"+
    "\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e"+
    "\0\372\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c"+
    "\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c"+
    "\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c"+
    "\0\u4c5e\0\u4c90\0\u4cc2\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\6\1\7\1\10\2\6\1\11\4\6\1\12\1\6"+
    "\1\13\4\6\1\14\3\6\1\15\3\6\1\16\1\17"+
    "\4\6\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\6\1\11\1\27\15\6\1\30\35\6\1\31\4\6"+
    "\1\30\1\32\11\6\1\7\3\6\1\30\35\6\1\30"+
    "\4\6\1\30\1\32\2\6\62\32\13\6\1\30\3\6"+
    "\1\33\31\6\1\30\4\6\1\30\1\32\2\6\72\0"+
    "\1\34\60\0\1\35\1\36\64\0\1\37\6\0\1\40"+
    "\10\0\1\41\15\0\1\37\1\0\2\42\1\0\1\37"+
    "\1\42\42\0\1\43\46\0\1\44\12\0\1\45\47\0"+
    "\1\46\63\0\1\47\61\0\1\50\2\0\1\51\64\0"+
    "\1\52\1\53\52\0\1\54\61\0\1\55\67\0\1\56"+
    "\51\0\1\57\46\0\1\37\6\0\1\40\10\0\1\41"+
    "\15\0\1\60\1\0\2\42\1\0\1\37\1\42\32\0"+
    "\1\61\44\0\1\42\6\0\1\40\10\0\1\41\15\0"+
    "\1\42\1\0\2\42\1\0\2\42\15\0\1\30\35\0"+
    "\1\30\4\0\1\30\16\0\1\30\35\0\1\31\4\0"+
    "\1\30\3\0\7\62\1\63\1\64\2\65\1\35\5\62"+
    "\30\65\1\35\1\65\2\35\1\62\2\35\2\62\11\0"+
    "\2\66\1\36\5\0\30\66\1\36\1\66\2\36\1\0"+
    "\2\36\15\0\1\67\23\0\1\70\1\71\4\0\1\72"+
    "\3\0\1\67\1\0\2\73\1\0\1\67\1\73\30\0"+
    "\1\74\63\0\1\75\44\0\1\73\23\0\1\70\1\71"+
    "\4\0\1\72\3\0\1\73\1\0\2\73\1\0\2\73"+
    "\40\0\1\76\47\0\1\77\101\0\1\100\36\0\1\101"+
    "\76\0\1\102\47\0\1\103\65\0\1\104\56\0\1\105"+
    "\114\0\1\106\50\0\1\107\42\0\1\110\53\0\1\111"+
    "\77\0\1\112\34\0\1\67\23\0\1\70\1\71\4\0"+
    "\1\72\3\0\1\113\1\0\2\73\1\0\1\67\1\73"+
    "\42\0\1\114\21\0\7\62\1\63\41\62\1\0\4\62"+
    "\2\0\11\62\1\63\1\115\40\62\1\0\4\62\2\0"+
    "\11\62\1\116\41\62\1\0\4\62\2\0\11\62\1\63"+
    "\1\64\2\65\6\62\30\65\1\0\1\65\1\62\1\65"+
    "\1\62\2\0\2\62\11\0\2\66\6\0\30\66\1\0"+
    "\1\66\1\0\1\66\20\0\1\30\23\0\1\70\1\71"+
    "\4\0\1\72\3\0\1\30\4\0\1\30\36\0\1\117"+
    "\64\0\1\120\53\0\1\121\70\0\1\70\1\71\4\0"+
    "\1\72\44\0\1\122\67\0\1\123\52\0\1\124\101\0"+
    "\1\125\50\0\1\126\47\0\1\127\101\0\1\130\30\0"+
    "\1\103\35\0\1\103\1\0\2\103\1\0\2\103\1\131"+
    "\22\0\1\132\53\0\1\133\35\0\1\133\1\0\2\133"+
    "\1\0\2\133\13\0\2\134\6\0\30\134\1\0\1\134"+
    "\1\0\1\134\53\0\1\135\46\0\1\136\66\0\1\45"+
    "\54\0\1\137\41\0\1\30\23\0\1\70\1\71\4\0"+
    "\1\72\3\0\1\31\4\0\1\30\50\0\1\140\14\0"+
    "\7\62\1\63\1\141\2\142\1\143\5\62\30\142\1\143"+
    "\1\142\2\143\1\62\2\143\2\62\30\0\1\144\56\0"+
    "\1\145\103\0\1\146\36\0\1\147\101\0\1\150\50\0"+
    "\1\151\55\0\1\152\55\0\1\153\51\0\1\154\35\0"+
    "\1\154\1\0\2\154\1\0\2\154\15\0\1\155\35\0"+
    "\1\155\1\0\2\155\1\0\2\155\31\0\1\156\3\0"+
    "\1\157\3\0\1\160\1\161\4\0\1\162\1\163\40\0"+
    "\1\130\45\0\2\164\1\165\5\0\10\164\1\166\17\164"+
    "\1\165\1\167\1\165\1\170\1\0\2\165\3\0\2\171"+
    "\2\172\4\0\2\134\6\0\30\134\1\0\1\134\1\0"+
    "\1\134\40\0\1\173\41\0\1\174\35\0\1\174\1\0"+
    "\2\174\1\0\2\174\25\0\1\175\51\0\1\176\35\0"+
    "\1\176\1\0\2\176\1\0\2\176\2\0\7\62\1\63"+
    "\1\64\2\142\6\62\30\142\1\0\1\142\1\62\1\142"+
    "\1\62\2\0\11\62\1\63\1\64\2\142\1\143\5\62"+
    "\30\142\1\143\1\142\2\143\1\62\2\143\2\62\21\0"+
    "\1\120\53\0\1\177\35\0\1\177\1\0\2\177\1\0"+
    "\2\177\50\0\1\200\40\0\1\150\47\0\1\42\35\0"+
    "\1\42\1\0\2\42\1\0\2\42\51\0\1\201\37\0"+
    "\1\202\101\0\1\203\25\0\2\204\1\205\5\0\30\204"+
    "\1\205\1\206\1\205\1\207\1\0\2\205\13\0\2\164"+
    "\1\205\5\0\30\164\1\205\1\167\1\205\1\210\1\0"+
    "\2\205\30\0\1\211\63\0\1\212\64\0\1\213\64\0"+
    "\1\214\53\0\1\215\61\0\1\216\42\0\2\164\1\217"+
    "\5\0\30\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\14\0\1\165\15\0\1\221\17\0\1\165\1\222"+
    "\2\165\1\0\2\165\13\0\2\164\1\217\5\0\1\223"+
    "\27\164\1\217\1\164\1\217\1\164\1\0\2\217\1\220"+
    "\12\0\2\164\1\217\5\0\1\224\27\164\1\217\1\164"+
    "\1\217\1\164\1\0\2\217\1\220\12\0\2\164\1\225"+
    "\5\0\10\164\1\166\17\164\1\225\1\167\1\225\1\170"+
    "\1\0\2\225\1\220\3\0\1\226\61\0\1\226\6\0"+
    "\2\227\6\0\30\227\1\0\1\227\1\0\1\227\30\0"+
    "\1\130\47\0\2\230\1\205\5\0\30\230\1\205\1\231"+
    "\1\205\1\232\1\0\2\205\15\0\1\175\35\0\1\175"+
    "\1\0\2\175\1\0\2\175\1\233\12\0\2\164\6\0"+
    "\30\164\1\0\1\164\1\0\1\164\16\0\2\234\6\0"+
    "\30\234\1\0\1\234\1\0\1\234\40\0\1\235\73\0"+
    "\1\236\27\0\1\237\35\0\1\237\4\0\1\237\16\0"+
    "\1\240\35\0\1\240\1\0\2\240\1\0\2\240\4\0"+
    "\1\241\6\0\2\204\1\242\5\0\30\204\1\242\1\204"+
    "\1\242\1\204\1\0\2\242\1\220\14\0\1\205\35\0"+
    "\1\205\1\222\2\205\1\0\2\205\4\0\1\241\6\0"+
    "\2\204\1\242\5\0\1\243\27\204\1\242\1\204\1\242"+
    "\1\204\1\0\2\242\1\220\3\0\1\241\6\0\2\204"+
    "\1\244\5\0\30\204\1\244\1\206\1\244\1\207\1\0"+
    "\2\244\1\220\12\0\2\164\1\245\5\0\30\164\1\245"+
    "\1\167\1\245\1\210\1\0\2\245\1\220\22\0\1\246"+
    "\76\0\1\247\53\0\1\250\56\0\1\251\103\0\1\252"+
    "\42\0\1\253\44\0\1\217\35\0\1\217\1\0\2\217"+
    "\1\0\2\217\1\220\14\0\1\220\13\0\1\254\3\0"+
    "\1\255\3\0\1\256\1\257\4\0\1\260\1\261\2\0"+
    "\1\220\1\262\2\220\1\0\2\220\1\0\1\263\21\0"+
    "\1\264\61\0\1\265\51\0\2\164\1\217\5\0\17\164"+
    "\1\266\10\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\12\0\2\164\1\217\5\0\3\164\1\267\24\164"+
    "\1\217\1\164\1\217\1\164\1\0\2\217\1\220\14\0"+
    "\1\225\15\0\1\221\17\0\1\225\1\222\2\225\1\0"+
    "\2\225\1\220\12\0\2\227\6\0\30\227\1\0\1\227"+
    "\1\0\1\227\16\0\2\227\6\0\30\227\1\0\1\227"+
    "\1\0\1\227\4\0\1\270\2\0\1\271\6\0\2\230"+
    "\1\272\5\0\30\230\1\272\1\230\1\272\1\230\1\0"+
    "\2\272\1\220\3\0\1\271\6\0\2\230\1\272\5\0"+
    "\1\273\27\230\1\272\1\230\1\272\1\230\1\0\2\272"+
    "\1\220\3\0\1\271\6\0\2\230\1\274\5\0\30\230"+
    "\1\274\1\231\1\274\1\232\1\0\2\274\1\220\12\0"+
    "\2\275\1\233\5\0\30\275\1\233\1\275\1\233\1\276"+
    "\1\0\2\233\4\0\1\277\6\0\2\234\1\300\5\0"+
    "\30\234\1\300\1\234\1\300\1\234\1\0\2\300\25\0"+
    "\1\145\61\0\1\301\47\0\2\302\1\303\5\0\30\302"+
    "\1\303\1\302\1\0\1\302\1\0\1\303\16\0\1\241"+
    "\35\0\1\241\1\0\2\241\1\304\2\241\4\0\1\241"+
    "\10\0\1\242\35\0\1\242\1\0\2\242\1\0\2\242"+
    "\1\220\3\0\1\241\6\0\2\204\1\242\5\0\3\204"+
    "\1\305\24\204\1\242\1\204\1\242\1\204\1\0\2\242"+
    "\1\220\3\0\1\241\10\0\1\244\35\0\1\244\1\222"+
    "\2\244\1\0\2\244\1\220\14\0\1\245\35\0\1\245"+
    "\1\222\2\245\1\0\2\245\1\220\25\0\1\251\101\0"+
    "\1\251\36\0\1\214\53\0\1\306\35\0\1\306\1\0"+
    "\2\306\1\0\2\306\50\0\1\307\46\0\1\251\54\0"+
    "\1\310\63\0\1\311\64\0\1\312\64\0\1\313\53\0"+
    "\1\314\61\0\1\315\61\0\1\316\44\0\1\263\2\0"+
    "\1\317\32\0\1\263\1\0\2\263\1\0\2\263\42\0"+
    "\1\320\45\0\1\321\46\0\2\164\1\217\5\0\15\164"+
    "\1\322\12\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\12\0\2\164\1\217\5\0\17\164\1\323\10\164"+
    "\1\217\1\164\1\217\1\164\1\0\2\217\1\220\17\0"+
    "\1\324\56\0\1\271\11\0\1\325\11\0\1\326\11\0"+
    "\1\271\1\0\2\271\1\0\2\271\4\0\1\271\10\0"+
    "\1\272\35\0\1\272\1\0\2\272\1\0\2\272\1\220"+
    "\3\0\1\271\6\0\2\230\1\272\5\0\3\230\1\327"+
    "\24\230\1\272\1\230\1\272\1\230\1\0\2\272\1\220"+
    "\3\0\1\271\10\0\1\274\35\0\1\274\1\222\2\274"+
    "\1\0\2\274\1\220\2\0\2\330\2\331\4\0\2\275"+
    "\1\332\5\0\30\275\1\332\1\275\1\332\1\275\1\0"+
    "\2\332\3\0\2\330\2\331\4\0\2\275\1\276\5\0"+
    "\30\275\1\276\1\275\2\276\1\0\2\276\14\0\1\333"+
    "\1\277\25\0\2\333\6\0\1\277\1\0\2\277\1\0"+
    "\2\277\4\0\1\277\10\0\1\300\35\0\1\300\1\0"+
    "\2\300\1\0\2\300\5\0\1\334\7\0\1\301\35\0"+
    "\1\301\1\0\2\301\1\335\2\301\13\0\2\302\1\336"+
    "\5\0\30\302\1\336\1\302\1\0\1\302\1\0\1\336"+
    "\14\0\2\302\1\303\2\0\1\337\2\0\30\302\1\303"+
    "\1\302\1\0\1\302\1\0\1\303\14\0\2\340\1\304"+
    "\5\0\30\340\1\304\1\340\2\304\1\341\2\304\4\0"+
    "\1\241\6\0\2\204\1\242\5\0\17\204\1\342\10\204"+
    "\1\242\1\204\1\242\1\204\1\0\2\242\1\220\12\0"+
    "\2\343\6\0\30\343\1\0\1\343\1\0\1\343\40\0"+
    "\1\344\47\0\1\345\76\0\1\346\53\0\1\347\56\0"+
    "\1\350\103\0\1\351\42\0\1\352\71\0\1\353\57\0"+
    "\1\354\63\0\1\355\32\0\2\164\1\356\5\0\30\164"+
    "\1\356\1\164\1\356\1\322\1\0\2\356\1\357\12\0"+
    "\2\164\1\217\5\0\1\360\27\164\1\217\1\164\1\217"+
    "\1\164\1\0\2\217\1\220\25\0\1\361\56\0\1\362"+
    "\42\0\1\271\6\0\2\230\1\272\5\0\17\230\1\363"+
    "\10\230\1\272\1\230\1\272\1\230\1\0\2\272\1\220"+
    "\3\0\1\364\61\0\1\364\6\0\2\365\1\364\5\0"+
    "\30\365\1\364\1\365\1\364\1\366\1\0\2\364\3\0"+
    "\2\330\2\331\6\0\1\332\35\0\1\332\1\0\2\332"+
    "\1\0\2\332\14\0\1\333\1\367\1\370\24\0\2\333"+
    "\6\0\1\367\1\0\2\367\1\0\2\367\5\0\1\334"+
    "\15\0\1\371\1\372\1\373\1\0\1\374\1\0\1\375"+
    "\1\0\1\376\1\0\1\377\3\0\1\u0100\1\u0101\6\0"+
    "\1\u0102\1\u0103\22\0\2\u0104\6\0\30\u0104\1\0\1\u0104"+
    "\1\0\1\u0104\1\u0105\17\0\1\336\2\0\1\337\32\0"+
    "\1\336\4\0\1\336\14\0\2\340\1\u0106\5\0\30\340"+
    "\1\u0106\1\340\1\u0106\1\340\1\341\2\u0106\15\0\1\341"+
    "\1\u0107\34\0\1\341\1\0\2\341\1\0\2\341\4\0"+
    "\1\241\6\0\2\204\1\242\5\0\1\u0108\27\204\1\242"+
    "\1\204\1\242\1\204\1\0\2\242\1\220\3\0\1\u0109"+
    "\6\0\2\343\1\u010a\5\0\30\343\1\u010a\1\343\1\u010a"+
    "\1\343\1\0\2\u010a\25\0\1\251\62\0\1\350\101\0"+
    "\1\350\36\0\1\313\53\0\1\u010b\35\0\1\u010b\1\0"+
    "\2\u010b\1\0\2\u010b\50\0\1\u010c\46\0\1\350\73\0"+
    "\1\u010d\27\0\1\354\35\0\1\354\1\0\2\354\1\0"+
    "\2\354\1\u010e\22\0\1\u010f\53\0\1\356\35\0\1\356"+
    "\1\0\2\356\1\0\2\356\1\357\14\0\1\357\13\0"+
    "\1\254\3\0\1\255\3\0\1\256\1\257\4\0\1\260"+
    "\1\261\2\0\1\357\1\262\2\357\1\0\2\357\1\0"+
    "\1\u0110\11\0\2\164\1\217\5\0\25\164\1\u0111\2\164"+
    "\1\217\1\164\1\217\1\164\1\0\2\217\1\220\50\0"+
    "\1\u0112\45\0\1\u0113\30\0\1\271\6\0\2\230\1\272"+
    "\5\0\1\u0114\27\230\1\272\1\230\1\272\1\230\1\0"+
    "\2\272\1\220\12\0\2\365\1\364\5\0\30\365\1\364"+
    "\1\365\1\364\1\366\1\0\2\364\13\0\2\365\1\u0115"+
    "\5\0\30\365\1\u0115\1\365\1\u0115\1\365\1\0\2\u0115"+
    "\1\0\1\u0116\11\0\2\365\1\366\5\0\30\365\1\366"+
    "\1\365\2\366\1\0\2\366\1\0\1\u0116\13\0\1\367"+
    "\1\370\34\0\1\367\1\0\2\367\1\0\2\367\24\0"+
    "\1\u0117\62\0\1\u0118\1\0\1\u0119\12\0\1\u011a\45\0"+
    "\1\u011b\63\0\1\u011c\11\0\1\u011d\3\0\1\u011e\42\0"+
    "\1\u011f\2\0\1\u0120\52\0\1\u0121\70\0\1\u0122\7\0"+
    "\1\u0123\54\0\1\u0124\50\0\1\u0125\13\0\1\u0126\52\0"+
    "\1\u0127\61\0\1\u0128\43\0\2\u0104\6\0\30\u0104\1\0"+
    "\1\u0104\1\0\1\u0104\1\u0129\17\0\1\u0106\35\0\1\u0106"+
    "\1\0\2\u0106\1\341\2\u0106\4\0\1\241\6\0\2\204"+
    "\1\242\5\0\25\204\1\u012a\2\204\1\242\1\204\1\242"+
    "\1\204\1\0\2\242\1\220\13\0\1\u012b\1\u0109\25\0"+
    "\2\u012b\6\0\1\u0109\1\0\2\u0109\1\0\2\u0109\4\0"+
    "\1\u0109\10\0\1\u010a\35\0\1\u010a\1\0\2\u010a\1\0"+
    "\2\u010a\13\0\2\u012c\6\0\30\u012c\1\0\1\u012c\1\0"+
    "\1\u012c\40\0\1\u012d\41\0\1\u010d\35\0\1\u010d\1\0"+
    "\2\u010d\1\0\2\u010d\1\0\1\263\13\0\1\u010e\35\0"+
    "\1\u010e\1\0\2\u010e\1\0\2\u010e\1\0\1\u0110\46\0"+
    "\1\u012e\26\0\1\u0110\2\0\1\u012f\32\0\1\u0110\1\0"+
    "\2\u0110\1\0\2\u0110\13\0\2\164\1\217\5\0\12\164"+
    "\1\u0130\15\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\24\0\1\341\60\0\1\u0112\41\0\1\271\6\0"+
    "\2\230\1\272\5\0\25\230\1\u0131\2\230\1\272\1\230"+
    "\1\272\1\230\1\0\2\272\1\220\14\0\1\u0115\35\0"+
    "\1\u0115\1\0\2\u0115\1\0\2\u0115\1\0\1\u0116\13\0"+
    "\1\u0116\2\0\1\u0132\32\0\1\u0116\1\0\2\u0116\1\0"+
    "\2\u0116\24\0\1\u0133\64\0\1\u0134\60\0\1\u0135\20\0"+
    "\1\u0136\60\0\1\u0137\41\0\1\u0138\61\0\1\u0139\66\0"+
    "\1\u013a\61\0\1\376\65\0\1\u013b\55\0\1\u013c\55\0"+
    "\1\u013d\63\0\1\u013e\63\0\1\u013f\60\0\1\u0140\61\0"+
    "\1\u0141\56\0\1\u0142\62\0\1\u0143\60\0\1\u011f\1\u0143"+
    "\35\0\1\241\6\0\2\204\1\242\5\0\12\204\1\u0144"+
    "\15\204\1\242\1\204\1\242\1\204\1\0\2\242\1\220"+
    "\13\0\1\u012b\1\u0145\1\u0146\24\0\2\u012b\6\0\1\u0145"+
    "\1\0\2\u0145\1\0\2\u0145\13\0\2\u012c\1\u010d\5\0"+
    "\30\u012c\1\u010d\1\u012c\1\u010d\1\u012c\1\0\2\u010d\1\0"+
    "\1\263\23\0\1\350\71\0\1\u0147\37\0\2\164\1\217"+
    "\5\0\2\164\1\u0148\25\164\1\217\1\164\1\217\1\164"+
    "\1\0\2\217\1\220\3\0\1\271\6\0\2\230\1\272"+
    "\5\0\12\230\1\u0149\15\230\1\272\1\230\1\272\1\230"+
    "\1\0\2\272\1\220\24\0\1\u014a\101\0\1\u014b\56\0"+
    "\1\u014c\42\0\1\u014d\11\0\1\u014e\2\0\1\u014f\1\0"+
    "\1\u0150\4\0\1\u0151\1\u0152\51\0\1\u0153\61\0\1\u0154"+
    "\46\0\1\u0155\61\0\1\u0156\70\0\1\u013a\61\0\1\u0157"+
    "\55\0\1\u0156\54\0\1\u0158\100\0\1\u0159\42\0\1\u015a"+
    "\101\0\1\u015b\45\0\1\u015c\55\0\1\u015d\42\0\1\241"+
    "\6\0\2\204\1\242\5\0\2\204\1\u015e\25\204\1\242"+
    "\1\204\1\242\1\204\1\0\2\242\1\220\14\0\1\u0145"+
    "\1\u0146\34\0\1\u0145\1\0\2\u0145\1\0\2\u0145\13\0"+
    "\2\u015f\1\u0146\5\0\30\u015f\1\u0146\1\u015f\1\u0146\1\u0160"+
    "\1\0\2\u0146\25\0\1\u0161\47\0\2\164\1\217\5\0"+
    "\1\164\1\u0162\26\164\1\217\1\164\1\217\1\164\1\0"+
    "\2\217\1\220\3\0\1\271\6\0\2\230\1\272\5\0"+
    "\2\230\1\u0163\25\230\1\272\1\230\1\272\1\230\1\0"+
    "\2\272\1\220\25\0\1\u015a\66\0\1\u0164\66\0\1\u0165"+
    "\47\0\1\u0165\1\u0166\5\0\1\u0167\66\0\1\u0168\51\0"+
    "\1\u0169\61\0\1\u0156\5\0\1\u015a\46\0\1\u016a\66\0"+
    "\1\u016b\52\0\1\u016c\70\0\1\u0156\52\0\1\u016d\55\0"+
    "\1\u016e\77\0\1\u016f\61\0\1\u013a\53\0\1\u0170\61\0"+
    "\1\u0156\76\0\1\u0171\54\0\1\u0172\50\0\1\u0156\37\0"+
    "\1\241\6\0\2\204\1\242\5\0\1\204\1\u0173\26\204"+
    "\1\242\1\204\1\242\1\204\1\0\2\242\1\220\2\0"+
    "\2\u0174\2\u0175\4\0\2\u015f\1\u0176\5\0\30\u015f\1\u0176"+
    "\1\u015f\1\u0176\1\u015f\1\0\2\u0176\3\0\2\u0174\2\u0175"+
    "\4\0\2\u015f\1\u0160\5\0\30\u015f\1\u0160\1\u015f\2\u0160"+
    "\1\0\2\u0160\24\0\1\u0177\50\0\2\164\1\u0178\1\u0179"+
    "\4\0\30\164\1\u0178\1\167\1\u0178\1\u017a\1\0\2\u0178"+
    "\1\220\3\0\1\271\6\0\2\230\1\272\5\0\1\230"+
    "\1\u017b\26\230\1\272\1\230\1\272\1\230\1\0\2\272"+
    "\1\220\33\0\1\u0156\73\0\1\u0156\45\0\1\u017c\71\0"+
    "\1\u017d\67\0\1\u0156\37\0\1\u017e\74\0\1\u0156\52\0"+
    "\1\u016c\64\0\1\u0156\73\0\1\u0170\42\0\1\u017f\56\0"+
    "\1\u0180\60\0\1\u0156\100\0\1\u0156\52\0\1\u0181\31\0"+
    "\1\241\6\0\2\204\1\u0182\1\u0179\4\0\30\204\1\u0182"+
    "\1\206\1\u0182\1\u0183\1\0\2\u0182\1\220\3\0\1\u0184"+
    "\61\0\1\u0184\7\0\1\u0185\1\u0184\25\0\2\u0185\6\0"+
    "\1\u0184\1\0\2\u0184\1\0\2\u0184\3\0\2\u0174\2\u0175"+
    "\6\0\1\u0176\35\0\1\u0176\1\0\2\u0176\1\0\2\u0176"+
    "\15\0\1\u0186\1\u0179\34\0\1\u0186\1\222\2\u0186\1\0"+
    "\2\u0186\15\0\1\u0178\1\u0179\34\0\1\u0178\1\0\2\u0178"+
    "\1\0\2\u0178\1\220\12\0\2\164\1\u0178\1\u0179\4\0"+
    "\30\164\1\u0178\1\164\1\u0178\1\u017a\1\0\2\u0178\1\220"+
    "\3\0\1\271\6\0\2\230\1\u0187\1\u0179\4\0\30\230"+
    "\1\u0187\1\231\1\u0187\1\u0188\1\0\2\u0187\1\220\32\0"+
    "\1\u0189\74\0\1\u018a\40\0\1\u018b\42\0\1\u0129\14\0"+
    "\1\371\1\372\1\373\1\0\1\374\1\0\1\375\1\0"+
    "\1\376\1\0\1\377\3\0\1\u0100\1\u0101\6\0\1\u0102"+
    "\1\u0103\45\0\1\u0156\50\0\1\u0170\40\0\1\241\10\0"+
    "\1\u0182\1\u0179\34\0\1\u0182\1\0\2\u0182\1\0\2\u0182"+
    "\1\220\3\0\1\241\6\0\2\204\1\u0182\1\u0179\4\0"+
    "\30\204\1\u0182\1\204\1\u0182\1\u0183\1\0\2\u0182\1\220"+
    "\13\0\1\u0185\1\u0184\25\0\2\u0185\6\0\1\u0184\1\0"+
    "\2\u0184\1\0\2\u0184\14\0\1\u0185\1\u018c\1\u018d\24\0"+
    "\2\u0185\6\0\1\u018c\1\0\2\u018c\1\0\2\u018c\15\0"+
    "\1\u0186\1\u0179\34\0\1\u0186\1\0\2\u0186\1\0\2\u0186"+
    "\4\0\1\271\10\0\1\u0187\1\u0179\34\0\1\u0187\1\0"+
    "\2\u0187\1\0\2\u0187\1\220\3\0\1\271\6\0\2\230"+
    "\1\u0187\1\u0179\4\0\30\230\1\u0187\1\230\1\u0187\1\u0188"+
    "\1\0\2\u0187\1\220\41\0\1\u018e\57\0\1\u0156\50\0"+
    "\1\u018f\47\0\1\u018c\1\u018d\34\0\1\u018c\1\0\2\u018c"+
    "\1\0\2\u018c\13\0\2\u0190\1\u018d\5\0\30\u0190\1\u018d"+
    "\1\u0190\1\u018d\1\u0191\1\0\2\u018d\31\0\1\u0156\101\0"+
    "\1\u0192\14\0\1\u0193\2\0\1\u0194\1\u0195\2\0\2\u0190"+
    "\1\u0196\5\0\30\u0190\1\u0196\1\u0190\1\u0196\1\u0190\1\0"+
    "\2\u0196\4\0\1\u0193\2\0\1\u0194\1\u0195\2\0\2\u0190"+
    "\1\u0197\5\0\30\u0190\1\u0197\1\u0190\1\u0197\1\u0191\1\0"+
    "\2\u0197\26\0\1\u018a\46\0\1\u0198\1\u0199\1\u0193\5\0"+
    "\20\u0198\2\u0199\6\u0198\1\u0193\1\u0198\2\u0193\1\0\2\u0193"+
    "\7\0\1\u019a\62\0\1\u019a\55\0\1\u0193\10\0\1\u0196"+
    "\35\0\1\u0196\1\0\2\u0196\1\0\2\u0196\4\0\1\u0193"+
    "\6\0\2\u0190\1\u0197\5\0\30\u0190\1\u0197\1\u0190\1\u0197"+
    "\1\u0191\1\0\2\u0197\13\0\1\u0198\1\u0199\6\0\20\u0198"+
    "\2\u0199\6\u0198\1\0\1\u0198\1\0\1\u0198\16\0\1\u0198"+
    "\1\u0199\1\u019a\5\0\20\u0198\2\u0199\6\u0198\1\u019a\1\u0198"+
    "\1\u019a\1\u0199\1\0\2\u019a\1\0\1\u019b\13\0\1\u019a"+
    "\35\0\1\u019a\1\0\2\u019a\1\0\2\u019a\1\0\1\u019b"+
    "\13\0\1\u019b\2\0\1\u019c\32\0\1\u019b\1\0\2\u019b"+
    "\1\0\2\u019b\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\23\1\3\11\3\1\20\0\1\1\4\0"+
    "\3\1\23\0\1\1\1\0\1\1\23\0\1\1\155\0"+
    "\1\11\4\0\1\11\12\0\1\11\30\0\1\11\14\0"+
    "\1\1\1\0\1\11\41\0\1\11\5\0\1\11\2\0"+
    "\1\11\106\0\1\11\42\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 18: break;
          case 2: 
            { System.out.print(yytext()+"\n"); yybegin(1);
            } 
            // fall through
          case 19: break;
          case 3: 
            { System.out.print(yytext());
            } 
            // fall through
          case 20: break;
          case 4: 
            { System.out.println("While end found at line: " + yyline);
            yybegin(YYINITIAL);
            } 
            // fall through
          case 21: break;
          case 5: 
            { System.out.print("Comentario encontrado: \n"+ yytext()); yybegin(comment);
            } 
            // fall through
          case 22: break;
          case 6: 
            { System.out.print("Comentario en linea encontrado:"+yytext());
        yybegin(line_comment);
            } 
            // fall through
          case 23: break;
          case 7: 
            { System.out.print("Comentario encontrado: " + yytext() + "\n");
            } 
            // fall through
          case 24: break;
          case 8: 
            { System.out.println("Function found: " + yytext() + "\n");
            } 
            // fall through
          case 25: break;
          case 9: 
            { System.out.println("if was found:\n" + yytext());
            } 
            // fall through
          case 26: break;
          case 10: 
            { System.out.print(" Struct found:\n" + yytext());
            } 
            // fall through
          case 27: break;
          case 11: 
            { System.out.println("Number declaration found: " + yytext() + "\n");
            } 
            // fall through
          case 28: break;
          case 12: 
            { System.out.print(" import found:\n" + yytext());
            } 
            // fall through
          case 29: break;
          case 13: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() + "\n");
            } 
            // fall through
          case 30: break;
          case 14: 
            { System.out.println("Main: " + yytext() + "\n");
        //yybegin(rules);
            } 
            // fall through
          case 31: break;
          case 15: 
            { System.out.println("While found: " + yytext() + "\n");
        yybegin(whileLoops);
            } 
            // fall through
          case 32: break;
          case 16: 
            { System.out.println("Declaration: " + yytext() + "\n");
            } 
            // fall through
          case 33: break;
          case 17: 
            { System.out.println("For found: " + yytext() + "\n");
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
