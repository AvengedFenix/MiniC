/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int line_comment = 2;
  public static final int comment = 4;
  public static final int includes = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\20\1\51\1\51\1\55\22\0\1\52\1\1\1\0"+
    "\1\17\1\0\1\0\1\0\1\0\1\53\1\54\1\7\1\5\1\0"+
    "\1\6\1\15\1\10\4\12\1\42\1\12\1\41\3\12\1\0\1\14"+
    "\1\3\1\2\1\4\1\0\1\0\32\11\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\21\1\46\1\27\1\45\1\23\1\37\1\44\1\26"+
    "\1\40\1\43\1\11\1\33\1\31\1\36\1\30\1\32\1\11\1\24"+
    "\1\22\1\25\1\47\1\11\1\50\1\34\1\35\1\11\1\16\1\0"+
    "\1\0\7\0\1\51\32\0\1\51\1\0\35\0\1\0\u15c0\0\1\51"+
    "\u097f\0\13\51\35\0\1\51\1\51\5\0\1\51\57\0\1\51\u0fa0\0"+
    "\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\5\1\1\2\3\1\1\3\2\2\1\4\1\5"+
    "\34\0\1\6\27\0\1\7\132\0\1\10\16\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0142\0\u0256\0\270"+
    "\0\270\0\270\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\270\0\u078c"+
    "\0\u07ba\0\u07e8\0\u0170\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\270\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700"+
    "\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870"+
    "\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\270\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02"+
    "\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\5\1\6\1\7\2\5\1\10\3\5\1\11\1\12"+
    "\16\5\1\13\1\14\7\5\1\15\4\5\1\16\20\5"+
    "\1\17\44\5\1\6\124\5\66\0\1\20\54\0\1\21"+
    "\1\22\60\0\1\16\4\0\1\16\34\0\1\16\40\0"+
    "\1\23\30\0\1\16\4\0\1\12\34\0\1\16\30\0"+
    "\1\24\64\0\1\25\44\0\1\26\47\0\1\17\73\0"+
    "\1\27\43\0\1\30\104\0\1\31\42\0\1\32\44\0"+
    "\1\33\41\0\1\30\4\0\1\30\30\0\2\30\1\34"+
    "\1\0\1\30\11\0\2\35\6\0\30\35\1\0\1\35"+
    "\36\0\1\36\55\0\1\37\62\0\1\40\16\0\2\41"+
    "\2\42\4\0\2\35\6\0\30\35\1\0\1\35\26\0"+
    "\1\43\101\0\1\44\44\0\1\45\21\0\1\46\55\0"+
    "\1\46\6\0\2\47\6\0\30\47\1\0\1\47\56\0"+
    "\1\50\47\0\1\51\35\0\1\52\41\0\2\47\6\0"+
    "\30\47\1\0\1\47\14\0\2\47\6\0\30\47\1\0"+
    "\1\47\1\0\1\53\12\0\2\54\6\0\30\54\1\0"+
    "\1\54\26\0\1\55\45\0\1\56\4\0\1\56\30\0"+
    "\2\56\2\0\1\56\16\0\1\57\40\0\2\60\2\61"+
    "\4\0\2\54\6\0\30\54\1\0\1\54\16\0\1\62"+
    "\3\0\1\63\1\62\34\0\1\62\11\0\2\64\6\0"+
    "\30\64\1\0\1\64\5\0\1\65\55\0\1\65\6\0"+
    "\2\66\6\0\30\66\1\0\1\66\6\0\1\67\7\0"+
    "\1\62\4\0\1\62\34\0\1\62\2\0\1\70\6\0"+
    "\2\64\1\71\4\0\1\71\30\64\1\71\1\64\2\0"+
    "\1\71\11\0\2\66\6\0\30\66\1\0\1\66\14\0"+
    "\2\66\6\0\30\66\1\0\1\66\1\0\1\72\4\0"+
    "\1\67\15\0\1\73\1\74\1\75\1\0\1\76\1\0"+
    "\1\77\1\0\1\100\1\0\1\101\3\0\1\102\1\103"+
    "\6\0\1\104\1\105\17\0\1\106\1\70\4\0\1\70"+
    "\20\0\2\106\6\0\2\70\2\0\1\70\2\0\1\70"+
    "\10\0\1\71\4\0\1\71\30\0\2\71\2\0\1\71"+
    "\16\0\1\107\61\0\1\110\56\0\1\111\1\0\1\112"+
    "\12\0\1\113\41\0\1\114\57\0\1\115\11\0\1\116"+
    "\3\0\1\117\36\0\1\120\2\0\1\121\46\0\1\122"+
    "\64\0\1\123\7\0\1\124\50\0\1\125\44\0\1\126"+
    "\13\0\1\127\46\0\1\130\55\0\1\131\40\0\1\106"+
    "\1\132\1\133\3\0\1\132\20\0\2\106\6\0\2\132"+
    "\2\0\1\132\22\0\1\134\60\0\1\135\54\0\1\136"+
    "\20\0\1\137\54\0\1\140\35\0\1\141\55\0\1\142"+
    "\62\0\1\143\55\0\1\100\61\0\1\144\51\0\1\145"+
    "\51\0\1\146\57\0\1\147\57\0\1\150\54\0\1\151"+
    "\55\0\1\152\52\0\1\153\56\0\1\154\54\0\1\120"+
    "\1\154\42\0\1\132\1\133\3\0\1\132\30\0\2\132"+
    "\2\0\1\132\11\0\2\155\1\133\4\0\1\133\30\155"+
    "\1\133\1\156\2\0\1\133\23\0\1\157\75\0\1\160"+
    "\52\0\1\161\36\0\1\162\11\0\1\163\2\0\1\164"+
    "\1\0\1\165\4\0\1\166\1\167\45\0\1\170\55\0"+
    "\1\171\42\0\1\172\55\0\1\173\64\0\1\143\55\0"+
    "\1\174\51\0\1\173\50\0\1\175\74\0\1\176\36\0"+
    "\1\177\75\0\1\200\41\0\1\201\51\0\1\202\35\0"+
    "\2\203\2\204\4\0\2\155\1\205\4\0\1\205\30\155"+
    "\1\205\1\155\2\0\1\205\1\0\2\203\2\204\4\0"+
    "\2\155\1\156\4\0\1\156\30\155\2\156\2\0\1\156"+
    "\24\0\1\177\62\0\1\206\62\0\1\207\43\0\1\207"+
    "\1\210\5\0\1\211\62\0\1\212\45\0\1\213\55\0"+
    "\1\173\5\0\1\177\42\0\1\214\62\0\1\215\46\0"+
    "\1\216\64\0\1\173\46\0\1\217\51\0\1\220\73\0"+
    "\1\221\55\0\1\143\47\0\1\222\55\0\1\173\72\0"+
    "\1\223\50\0\1\224\44\0\1\173\33\0\1\225\55\0"+
    "\1\225\7\0\1\226\1\225\4\0\1\225\20\0\2\226"+
    "\6\0\2\225\2\0\1\225\1\0\2\203\2\204\6\0"+
    "\1\205\4\0\1\205\30\0\2\205\2\0\1\205\32\0"+
    "\1\173\67\0\1\173\41\0\1\227\65\0\1\230\63\0"+
    "\1\173\33\0\1\231\70\0\1\173\46\0\1\216\60\0"+
    "\1\173\67\0\1\222\36\0\1\232\52\0\1\233\54\0"+
    "\1\173\74\0\1\173\46\0\1\234\35\0\1\226\1\225"+
    "\4\0\1\225\20\0\2\226\6\0\2\225\2\0\1\225"+
    "\12\0\1\226\1\235\1\236\3\0\1\235\20\0\2\226"+
    "\6\0\2\235\2\0\1\235\31\0\1\237\70\0\1\240"+
    "\34\0\1\241\36\0\1\242\14\0\1\73\1\74\1\75"+
    "\1\0\1\76\1\0\1\77\1\0\1\100\1\0\1\101"+
    "\3\0\1\102\1\103\6\0\1\104\1\105\41\0\1\173"+
    "\44\0\1\222\45\0\1\235\1\236\3\0\1\235\30\0"+
    "\2\235\2\0\1\235\11\0\2\243\1\236\4\0\1\236"+
    "\30\243\1\236\1\244\2\0\1\236\40\0\1\245\53\0"+
    "\1\173\44\0\1\246\32\0\1\247\2\0\1\250\1\251"+
    "\2\0\2\243\1\252\4\0\1\252\30\243\1\252\1\243"+
    "\2\0\1\252\2\0\1\247\2\0\1\250\1\251\2\0"+
    "\2\243\1\253\4\0\1\253\30\243\1\253\1\244\2\0"+
    "\1\253\27\0\1\173\75\0\1\254\17\0\1\255\1\256"+
    "\1\247\4\0\1\247\20\255\2\256\6\255\2\247\2\0"+
    "\1\247\5\0\1\257\56\0\1\257\51\0\1\247\10\0"+
    "\1\252\4\0\1\252\30\0\2\252\2\0\1\252\2\0"+
    "\1\247\6\0\2\243\1\253\4\0\1\253\30\243\1\253"+
    "\1\244\2\0\1\253\24\0\1\240\42\0\1\255\1\256"+
    "\6\0\20\255\2\256\6\255\1\0\1\255\14\0\1\255"+
    "\1\256\1\257\4\0\1\257\20\255\2\256\6\255\1\257"+
    "\1\256\1\0\1\260\1\257\13\0\1\257\4\0\1\257"+
    "\30\0\2\257\1\0\1\260\1\257\13\0\1\260\2\0"+
    "\1\261\1\0\1\260\30\0\2\260\2\0\1\260";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7728];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\12\1\3\11\34\0\1\11\27\0\1\11"+
    "\132\0\1\11\16\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 10: break;
          case 2: 
            { System.out.println("\n"); yybegin(1);
            } 
            // fall through
          case 11: break;
          case 3: 
            { 
            } 
            // fall through
          case 12: break;
          case 4: 
            { System.out.println("Comentario encontrado"); yybegin(comment);
            } 
            // fall through
          case 13: break;
          case 5: 
            { System.out.println("Comentario en linea encontrado"); yybegin(line_comment);
            } 
            // fall through
          case 14: break;
          case 6: 
            { System.out.println("if was found:\n" + yytext());
            } 
            // fall through
          case 15: break;
          case 7: 
            { System.out.print("While expression found:\n " + yytext());
            } 
            // fall through
          case 16: break;
          case 8: 
            { System.out.println("include was found:\n" + yytext());
            } 
            // fall through
          case 17: break;
          case 9: 
            { System.out.print("For found\n: " + yytext());
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
