/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int whileLoops = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\42\1\43\1\43\1\42\22\0\1\41\1\1\1\47"+
    "\1\0\1\0\1\0\1\0\1\0\1\45\1\46\1\6\1\4\1\0"+
    "\1\5\1\0\1\7\12\11\1\0\1\13\1\3\1\2\1\3\1\0"+
    "\1\0\32\10\1\0\1\0\1\0\1\0\1\0\1\0\1\25\1\30"+
    "\1\32\1\26\1\31\1\24\1\23\1\33\1\16\2\10\1\21\1\44"+
    "\1\17\1\22\2\10\1\34\1\36\1\20\1\27\1\35\1\37\3\10"+
    "\1\14\1\0\1\15\7\0\1\43\32\0\1\40\1\0\35\0\1\0"+
    "\2\0\1\0\u15bd\0\1\40\u097f\0\13\40\35\0\1\43\1\43\5\0"+
    "\1\40\57\0\1\40\u0fa0\0\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\1\2\13\1\1\3\1\1\1\3\1\0"+
    "\1\1\20\0\1\1\22\0\1\4\156\0\1\5\4\0"+
    "\1\6\43\0\1\7\15\0\1\10\7\0\1\11\3\0"+
    "\1\12\16\0\1\13\32\0\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\120\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0258\0\u0280\0\120\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0208\0\u0780\0\u07a8\0\u07d0\0\u07f8"+
    "\0\u0820\0\u02a8\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50"+
    "\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0"+
    "\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10"+
    "\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50"+
    "\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310"+
    "\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450"+
    "\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590"+
    "\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0"+
    "\0\u16f8\0\u1720\0\u1748\0\u1770\0\u0258\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\120\0\u1950\0\u1978\0\u19a0\0\u19c8\0\120\0\u19f0\0\u1a18"+
    "\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58"+
    "\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98"+
    "\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8"+
    "\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18"+
    "\0\u1f40\0\120\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030"+
    "\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\120"+
    "\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260\0\120"+
    "\0\u2288\0\u22b0\0\u22d8\0\120\0\u2300\0\u2328\0\u2350\0\u2378"+
    "\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8"+
    "\0\u24e0\0\u2508\0\120\0\u2530\0\u2558\0\u2580\0\u25a8\0\u25d0"+
    "\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0\0\u26e8\0\u2710"+
    "\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850"+
    "\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918\0\120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\3\1\4\2\3\1\5\2\3\1\6\1\7\2\3"+
    "\1\10\2\3\1\11\1\3\1\12\1\13\1\14\1\3"+
    "\1\15\2\3\1\16\1\17\1\20\2\21\1\5\1\22"+
    "\16\3\1\23\2\3\1\6\24\3\1\23\1\24\4\3"+
    "\56\0\1\25\53\0\1\26\6\0\1\27\14\0\1\30"+
    "\1\0\2\31\1\26\1\31\23\0\1\32\4\0\1\33"+
    "\45\0\1\34\46\0\1\35\1\36\47\0\1\37\44\0"+
    "\1\40\52\0\1\41\60\0\1\42\36\0\1\43\43\0"+
    "\1\44\64\0\1\45\26\0\1\31\6\0\1\27\14\0"+
    "\1\30\1\0\4\31\16\0\1\23\27\0\1\23\5\0"+
    "\6\25\1\46\33\25\2\0\4\25\12\0\1\47\3\0"+
    "\1\50\5\0\1\51\1\0\1\52\11\0\2\53\1\47"+
    "\1\53\26\0\1\54\60\0\1\55\26\0\1\53\3\0"+
    "\1\50\5\0\1\51\1\0\1\52\11\0\4\53\24\0"+
    "\1\56\74\0\1\57\21\0\1\60\52\0\1\61\61\0"+
    "\1\62\42\0\1\63\56\0\1\64\33\0\1\65\52\0"+
    "\1\66\40\0\1\67\54\0\1\70\42\0\1\71\31\0"+
    "\6\25\1\46\1\72\32\25\2\0\4\25\12\0\1\23"+
    "\3\0\1\50\5\0\1\51\1\0\1\52\13\0\1\23"+
    "\24\0\1\73\51\0\1\74\50\0\1\75\43\0\1\50"+
    "\5\0\1\51\1\0\1\52\40\0\1\76\52\0\1\77"+
    "\37\0\1\100\25\0\4\100\14\0\2\101\4\0\22\101"+
    "\1\0\1\101\2\0\1\101\26\0\1\102\51\0\1\103"+
    "\34\0\1\62\25\0\4\62\1\0\1\104\32\0\1\105"+
    "\40\0\1\106\62\0\1\107\41\0\1\110\40\0\1\111"+
    "\51\0\1\112\46\0\1\113\51\0\1\114\54\0\1\115"+
    "\43\0\1\116\60\0\1\117\23\0\2\120\1\121\3\0"+
    "\17\120\1\122\2\120\1\121\1\123\2\121\1\124\4\0"+
    "\2\125\1\126\4\0\2\101\4\0\22\101\1\0\1\101"+
    "\2\0\1\101\15\0\1\127\25\0\4\127\24\0\1\102"+
    "\45\0\1\130\2\0\1\131\2\0\1\132\1\0\1\133"+
    "\1\0\1\134\1\0\1\135\36\0\1\136\40\0\1\137"+
    "\25\0\4\137\16\0\1\140\25\0\4\140\16\0\1\141"+
    "\25\0\4\141\35\0\1\142\47\0\1\143\30\0\1\144"+
    "\25\0\4\144\31\0\1\73\52\0\1\145\31\0\1\31"+
    "\25\0\4\31\24\0\1\116\37\0\2\120\1\146\3\0"+
    "\22\120\1\146\1\120\2\146\1\120\1\147\14\0\1\121"+
    "\22\0\1\150\2\0\4\121\1\151\13\0\2\120\1\146"+
    "\3\0\7\120\1\152\12\120\1\146\1\120\2\146\1\120"+
    "\1\147\12\0\2\120\1\153\3\0\17\120\1\122\2\120"+
    "\1\153\1\123\2\153\1\124\1\147\12\0\2\120\1\146"+
    "\3\0\7\120\1\154\12\120\1\146\1\120\2\146\1\120"+
    "\1\147\4\0\1\155\47\0\1\155\5\0\2\156\4\0"+
    "\22\156\1\0\1\156\2\0\1\156\13\0\2\120\1\157"+
    "\3\0\17\120\1\122\2\120\1\157\1\160\2\157\1\120"+
    "\22\0\1\161\52\0\1\162\46\0\1\163\50\0\1\164"+
    "\47\0\1\165\60\0\1\166\45\0\1\102\26\0\2\167"+
    "\1\157\3\0\17\167\1\170\2\167\1\157\1\171\2\157"+
    "\1\167\13\0\2\172\1\157\3\0\17\172\1\173\2\172"+
    "\1\157\1\174\2\157\1\172\13\0\2\120\4\0\22\120"+
    "\1\0\1\120\2\0\1\120\31\0\1\175\33\0\1\143"+
    "\25\0\4\143\1\0\1\176\12\0\2\177\4\0\22\177"+
    "\1\0\1\177\2\0\1\177\24\0\1\200\40\0\1\146"+
    "\25\0\4\146\1\0\1\147\14\0\1\147\3\0\1\201"+
    "\2\0\1\202\2\0\1\203\1\0\1\204\1\0\1\205"+
    "\1\0\1\206\2\0\1\207\2\0\4\147\2\0\1\210"+
    "\26\0\1\211\47\0\1\212\32\0\2\120\1\146\3\0"+
    "\16\120\1\213\3\120\1\146\1\120\2\146\1\120\1\147"+
    "\14\0\1\153\22\0\1\150\2\0\4\153\1\151\1\147"+
    "\12\0\2\120\1\146\3\0\1\214\21\120\1\146\1\120"+
    "\2\146\1\120\1\147\12\0\2\156\4\0\22\156\1\0"+
    "\1\156\2\0\1\156\13\0\2\156\4\0\22\156\1\0"+
    "\1\156\2\0\1\156\1\0\1\215\13\0\1\157\22\0"+
    "\1\150\2\0\4\157\14\0\2\120\1\216\3\0\17\120"+
    "\1\122\2\120\1\216\1\160\2\216\1\120\1\147\22\0"+
    "\1\217\46\0\1\220\52\0\1\221\54\0\1\222\42\0"+
    "\1\223\52\0\1\224\24\0\1\225\5\0\2\167\1\226"+
    "\3\0\22\167\1\226\1\167\2\226\1\167\1\147\4\0"+
    "\1\225\5\0\2\167\1\226\3\0\7\167\1\227\12\167"+
    "\1\226\1\167\2\226\1\167\1\147\4\0\1\225\5\0"+
    "\2\167\1\230\3\0\17\167\1\170\2\167\1\230\1\171"+
    "\2\230\1\167\1\147\4\0\1\231\5\0\2\172\1\232"+
    "\3\0\22\172\1\232\1\172\2\232\1\172\1\147\4\0"+
    "\1\231\5\0\2\172\1\232\3\0\7\172\1\233\12\172"+
    "\1\232\1\172\2\232\1\172\1\147\4\0\1\231\5\0"+
    "\2\172\1\234\3\0\17\172\1\173\2\172\1\234\1\174"+
    "\2\234\1\172\1\147\14\0\1\235\25\0\4\235\14\0"+
    "\2\236\1\176\3\0\22\236\1\176\1\237\2\176\1\236"+
    "\5\0\1\240\5\0\2\177\1\241\3\0\22\177\1\241"+
    "\1\177\2\241\1\177\34\0\1\113\35\0\1\242\52\0"+
    "\1\243\46\0\1\244\50\0\1\245\47\0\1\246\60\0"+
    "\1\247\36\0\1\250\37\0\1\210\1\0\1\251\23\0"+
    "\4\210\40\0\1\252\31\0\1\253\41\0\2\120\1\146"+
    "\3\0\1\254\21\120\1\146\1\120\2\146\1\120\1\147"+
    "\12\0\2\120\1\146\3\0\1\120\1\255\20\120\1\146"+
    "\1\120\2\146\1\120\1\147\16\0\1\256\45\0\1\216"+
    "\22\0\1\150\2\0\4\216\1\0\1\147\14\0\1\257"+
    "\25\0\4\257\27\0\1\217\51\0\1\161\52\0\1\260"+
    "\40\0\1\217\62\0\1\217\25\0\1\225\5\0\1\261"+
    "\3\0\1\262\13\0\4\225\6\0\1\225\7\0\1\226"+
    "\25\0\4\226\1\0\1\147\4\0\1\225\5\0\2\167"+
    "\1\226\3\0\16\167\1\263\3\167\1\226\1\167\2\226"+
    "\1\167\1\147\4\0\1\225\7\0\1\230\22\0\1\150"+
    "\2\0\4\230\1\0\1\147\14\0\1\231\25\0\4\231"+
    "\3\0\1\264\2\0\1\231\7\0\1\232\25\0\4\232"+
    "\1\0\1\147\4\0\1\231\5\0\2\172\1\232\3\0"+
    "\16\172\1\265\3\172\1\232\1\172\2\232\1\172\1\147"+
    "\4\0\1\231\7\0\1\234\22\0\1\150\2\0\4\234"+
    "\1\0\1\147\3\0\2\266\1\267\4\0\2\236\1\270"+
    "\3\0\22\236\1\270\1\236\2\270\1\236\4\0\2\266"+
    "\1\267\4\0\2\236\1\237\3\0\22\236\4\237\1\236"+
    "\14\0\1\271\1\240\25\0\4\240\6\0\1\240\7\0"+
    "\1\241\25\0\4\241\24\0\1\272\46\0\1\273\52\0"+
    "\1\274\54\0\1\275\42\0\1\276\52\0\1\277\40\0"+
    "\1\300\47\0\1\301\50\0\1\302\40\0\2\120\1\146"+
    "\3\0\7\120\1\303\12\120\1\146\1\120\2\146\1\120"+
    "\1\147\12\0\2\120\1\304\3\0\22\120\1\304\1\255"+
    "\2\304\1\120\1\305\12\0\2\306\4\0\22\306\1\0"+
    "\1\306\2\0\1\306\24\0\1\307\62\0\1\310\40\0"+
    "\1\311\24\0\1\225\5\0\2\167\1\226\3\0\1\312"+
    "\21\167\1\226\1\167\2\226\1\167\1\147\12\0\2\313"+
    "\1\264\3\0\22\313\4\264\1\313\2\0\1\314\2\0"+
    "\1\231\5\0\2\172\1\232\3\0\1\315\21\172\1\232"+
    "\1\172\2\232\1\172\1\147\4\0\1\316\47\0\1\316"+
    "\5\0\2\317\1\316\3\0\22\317\1\316\1\320\2\316"+
    "\1\317\4\0\2\266\1\267\6\0\1\270\25\0\4\270"+
    "\15\0\1\271\1\321\1\322\24\0\4\321\16\0\1\323"+
    "\25\0\4\323\27\0\1\272\51\0\1\242\52\0\1\324"+
    "\40\0\1\272\62\0\1\272\41\0\1\325\46\0\1\326"+
    "\34\0\1\302\25\0\4\302\1\0\1\327\12\0\2\120"+
    "\1\146\3\0\12\120\1\330\7\120\1\146\1\120\2\146"+
    "\1\120\1\147\14\0\1\304\25\0\4\304\1\0\1\305"+
    "\14\0\1\305\3\0\1\201\2\0\1\202\2\0\1\203"+
    "\1\0\1\204\1\0\1\205\1\0\1\206\2\0\1\207"+
    "\2\0\4\305\2\0\1\331\3\0\1\332\5\0\2\306"+
    "\1\333\3\0\22\306\1\333\1\306\2\333\1\306\34\0"+
    "\1\217\45\0\1\334\41\0\1\335\30\0\1\225\5\0"+
    "\2\167\1\226\3\0\7\167\1\336\12\167\1\226\1\167"+
    "\2\226\1\167\1\147\12\0\2\313\1\337\3\0\22\313"+
    "\1\337\1\313\2\337\1\313\2\0\1\314\12\0\1\314"+
    "\1\340\24\0\4\314\6\0\1\231\5\0\2\172\1\232"+
    "\3\0\7\172\1\341\12\172\1\232\1\172\2\232\1\172"+
    "\1\147\12\0\2\317\1\316\3\0\22\317\1\316\1\320"+
    "\2\316\1\317\13\0\2\317\1\342\3\0\22\317\1\342"+
    "\1\317\2\342\1\317\1\0\1\343\11\0\2\317\1\320"+
    "\3\0\22\317\4\320\1\317\1\0\1\343\13\0\1\321"+
    "\1\322\24\0\4\321\14\0\2\344\4\0\22\344\1\0"+
    "\1\344\2\0\1\344\24\0\1\345\40\0\1\325\25\0"+
    "\4\325\2\0\1\210\31\0\1\346\31\0\1\327\25\0"+
    "\4\327\2\0\1\331\11\0\2\120\1\146\3\0\3\120"+
    "\1\347\16\120\1\146\1\120\2\146\1\120\1\147\14\0"+
    "\1\331\1\0\1\350\23\0\4\331\15\0\1\351\1\332"+
    "\25\0\4\332\6\0\1\332\7\0\1\333\25\0\4\333"+
    "\35\0\1\314\54\0\1\334\13\0\1\225\5\0\2\167"+
    "\1\226\3\0\12\167\1\352\7\167\1\226\1\167\2\226"+
    "\1\167\1\147\14\0\1\337\25\0\4\337\3\0\1\314"+
    "\2\0\1\231\5\0\2\172\1\232\3\0\12\172\1\353"+
    "\7\172\1\232\1\172\2\232\1\172\1\147\14\0\1\342"+
    "\25\0\4\342\2\0\1\343\13\0\1\343\1\0\1\354"+
    "\23\0\4\343\14\0\2\344\1\325\3\0\22\344\1\325"+
    "\1\344\2\325\1\344\1\0\1\210\32\0\1\272\37\0"+
    "\1\355\36\0\2\120\1\146\3\0\13\120\1\356\6\120"+
    "\1\146\1\120\2\146\1\120\1\147\13\0\1\351\1\357"+
    "\1\360\24\0\4\357\6\0\1\225\5\0\2\167\1\226"+
    "\3\0\3\167\1\361\16\167\1\226\1\167\2\226\1\167"+
    "\1\147\4\0\1\231\5\0\2\172\1\232\3\0\3\172"+
    "\1\362\16\172\1\232\1\172\2\232\1\172\1\147\33\0"+
    "\1\363\26\0\2\120\1\146\3\0\20\120\1\364\1\120"+
    "\1\146\1\120\2\146\1\120\1\147\14\0\1\357\1\360"+
    "\24\0\4\357\14\0\2\365\1\360\3\0\22\365\1\360"+
    "\1\366\2\360\1\365\5\0\1\225\5\0\2\167\1\226"+
    "\3\0\13\167\1\367\6\167\1\226\1\167\2\226\1\167"+
    "\1\147\4\0\1\231\5\0\2\172\1\232\3\0\13\172"+
    "\1\370\6\172\1\232\1\172\2\232\1\172\1\147\40\0"+
    "\1\371\21\0\2\120\1\372\1\373\2\0\17\120\1\122"+
    "\2\120\1\372\1\374\2\372\1\120\1\147\3\0\2\375"+
    "\1\376\4\0\2\365\1\377\3\0\22\365\1\377\1\365"+
    "\2\377\1\365\4\0\2\375\1\376\4\0\2\365\1\366"+
    "\3\0\22\365\4\366\1\365\5\0\1\225\5\0\2\167"+
    "\1\226\3\0\20\167\1\u0100\1\167\1\226\1\167\2\226"+
    "\1\167\1\147\4\0\1\231\5\0\2\172\1\232\3\0"+
    "\20\172\1\u0101\1\172\1\232\1\172\2\232\1\172\1\147"+
    "\14\0\1\u0102\1\373\21\0\1\150\2\0\4\u0102\16\0"+
    "\1\372\1\373\24\0\4\372\1\0\1\147\12\0\2\120"+
    "\1\372\1\373\2\0\22\120\1\372\1\374\2\372\1\120"+
    "\1\147\4\0\1\u0103\47\0\1\u0103\6\0\1\u0104\1\u0103"+
    "\25\0\4\u0103\5\0\2\375\1\376\6\0\1\377\25\0"+
    "\4\377\6\0\1\225\5\0\2\167\1\u0105\1\373\2\0"+
    "\17\167\1\170\2\167\1\u0105\1\u0106\2\u0105\1\167\1\147"+
    "\4\0\1\231\5\0\2\172\1\u0107\1\373\2\0\17\172"+
    "\1\173\2\172\1\u0107\1\u0108\2\u0107\1\172\1\147\14\0"+
    "\1\u0102\1\373\24\0\4\u0102\15\0\1\u0104\1\u0103\25\0"+
    "\4\u0103\15\0\1\u0104\1\u0109\1\u010a\24\0\4\u0109\6\0"+
    "\1\225\7\0\1\u0105\1\373\24\0\4\u0105\1\0\1\147"+
    "\4\0\1\225\5\0\2\167\1\u0105\1\373\2\0\22\167"+
    "\1\u0105\1\u0106\2\u0105\1\167\1\147\4\0\1\231\7\0"+
    "\1\u0107\1\373\24\0\4\u0107\1\0\1\147\4\0\1\231"+
    "\5\0\2\172\1\u0107\1\373\2\0\22\172\1\u0107\1\u0108"+
    "\2\u0107\1\172\1\147\14\0\1\u0109\1\u010a\24\0\4\u0109"+
    "\14\0\2\u010b\1\u010a\3\0\22\u010b\1\u010a\1\u010c\2\u010a"+
    "\1\u010b\5\0\1\u010d\1\0\1\u010e\1\u010f\2\0\2\u010b"+
    "\1\u0110\3\0\22\u010b\1\u0110\1\u010b\2\u0110\1\u010b\5\0"+
    "\1\u010d\1\0\1\u010e\1\u010f\2\0\2\u010b\1\u0111\3\0"+
    "\22\u010b\1\u0111\1\u010c\2\u0111\1\u010b\13\0\1\u0112\1\u0113"+
    "\1\u010d\3\0\22\u0112\4\u010d\1\u0112\7\0\1\u0114\50\0"+
    "\1\u0114\44\0\1\u010d\7\0\1\u0110\25\0\4\u0110\6\0"+
    "\1\u010d\5\0\2\u010b\1\u0111\3\0\22\u010b\1\u0111\1\u010c"+
    "\2\u0111\1\u010b\13\0\1\u0112\1\u0113\4\0\22\u0112\1\0"+
    "\1\u0112\2\0\1\u0112\13\0\1\u0112\1\u0113\1\u0114\3\0"+
    "\22\u0112\1\u0114\1\u0113\2\u0114\1\u0112\1\0\1\u0115\13\0"+
    "\1\u0114\25\0\4\u0114\2\0\1\u0115\13\0\1\u0115\1\0"+
    "\1\u0116\23\0\4\u0115\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\15\1\1\11\1\0\1\1"+
    "\20\0\1\1\22\0\1\1\156\0\1\11\4\0\1\11"+
    "\43\0\1\11\15\0\1\11\7\0\1\11\3\0\1\11"+
    "\16\0\1\11\32\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 13: break;
          case 2: 
            { System.out.println("While end found at line: " + yyline);
            break;
            } 
            // fall through
          case 14: break;
          case 3: 
            { System.out.print(yytext());
            } 
            // fall through
          case 15: break;
          case 4: 
            { System.out.println("Comentario encontrado: " + yytext() + "\n");
            } 
            // fall through
          case 16: break;
          case 5: 
            { System.out.println("Function found: " + yytext() + "\n");
            } 
            // fall through
          case 17: break;
          case 6: 
            { System.out.println("if was found: " + yytext() + "\n");
            } 
            // fall through
          case 18: break;
          case 7: 
            { System.out.println("Number declaration found: " + yytext() + "\n");
            } 
            // fall through
          case 19: break;
          case 8: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() + "\n");
            } 
            // fall through
          case 20: break;
          case 9: 
            { System.out.println("Main: " + yytext() + "\n");

        //yybegin(rules);
            } 
            // fall through
          case 21: break;
          case 10: 
            { System.out.println("While found: " + yytext() + "\n");
        yybegin(whileLoops);
            } 
            // fall through
          case 22: break;
          case 11: 
            { System.out.println("Declaration: " + yytext() + "\n");
            } 
            // fall through
          case 23: break;
          case 12: 
            { System.out.println("For found: " + yytext() + "\n");
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
