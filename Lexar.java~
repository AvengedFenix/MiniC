/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int line_comment = 2;
  public static final int comment = 4;
  public static final int includes = 6;
  public static final int whileLoops = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\52\1\60\1\60\1\57\22\0\1\55\1\1\1\56"+
    "\1\21\1\5\1\5\1\5\1\5\1\61\1\62\1\10\1\6\1\5"+
    "\1\7\1\16\1\11\4\13\1\43\1\13\1\42\3\13\1\5\1\15"+
    "\1\3\1\2\1\4\1\5\1\5\32\12\1\5\1\0\1\5\1\5"+
    "\1\5\1\0\1\22\1\47\1\30\1\46\1\24\1\40\1\45\1\27"+
    "\1\41\1\44\1\12\1\34\1\32\1\37\1\31\1\33\1\12\1\25"+
    "\1\23\1\26\1\50\1\53\1\51\1\35\1\36\1\12\1\17\1\0"+
    "\1\20\7\0\1\60\32\0\1\54\1\5\35\0\1\5\u15c0\0\1\54"+
    "\u097f\0\13\54\35\0\1\60\1\60\5\0\1\54\57\0\1\54\u0fa0\0"+
    "\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\2\4\5\1\1"+
    "\1\2\11\1\1\6\2\1\1\7\1\1\1\6\1\7"+
    "\1\1\1\10\1\4\1\11\1\6\1\12\1\13\1\1"+
    "\20\0\1\6\4\0\1\12\1\13\1\1\23\0\1\6"+
    "\1\0\1\14\23\0\1\14\155\0\1\15\4\0\1\16"+
    "\12\0\1\17\30\0\1\20\14\0\1\21\1\0\1\22"+
    "\41\0\1\21\5\0\1\23\2\0\1\24\106\0\1\25"+
    "\42\0\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0132"+
    "\0\u0132\0\377\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04c8\0\u04fb\0\u052e\0\377"+
    "\0\u01cb\0\377\0\377\0\377\0\377\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0990\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u09f6\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u04c8\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\377"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\377\0\u290a\0\u293d\0\u2970"+
    "\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\377"+
    "\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d"+
    "\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05"+
    "\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d"+
    "\0\377\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102"+
    "\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u2aa2\0\u3234\0\377"+
    "\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc"+
    "\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564"+
    "\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9\0\u36fc"+
    "\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e\0\u3861\0\u3894"+
    "\0\u38c7\0\377\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6\0\377"+
    "\0\u39f9\0\u3a2c\0\377\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b"+
    "\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3"+
    "\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b"+
    "\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3"+
    "\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b"+
    "\0\u41be\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323"+
    "\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb"+
    "\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653"+
    "\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb"+
    "\0\u481e\0\377\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950"+
    "\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8"+
    "\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80"+
    "\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18"+
    "\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\6\1\17\4\12\1\20\1\6\1\21\4\6"+
    "\1\22\3\6\1\23\3\6\1\24\1\25\4\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\6\1\17"+
    "\1\35\16\6\1\36\35\6\1\37\4\6\1\36\1\40"+
    "\12\6\1\41\3\6\1\36\35\6\1\36\4\6\1\36"+
    "\1\40\2\6\63\40\14\6\1\36\3\6\1\42\31\6"+
    "\1\36\4\6\1\36\1\40\2\6\65\0\1\43\66\0"+
    "\1\44\63\0\1\44\64\0\1\45\61\0\1\46\1\47"+
    "\65\0\1\50\6\0\1\51\10\0\1\52\15\0\1\50"+
    "\1\0\2\53\1\0\1\50\1\53\43\0\1\54\47\0"+
    "\1\55\12\0\1\56\50\0\1\57\64\0\1\60\62\0"+
    "\1\61\2\0\1\62\65\0\1\63\1\64\53\0\1\65"+
    "\62\0\1\66\70\0\1\67\52\0\1\70\47\0\1\50"+
    "\6\0\1\51\10\0\1\52\15\0\1\71\1\0\2\53"+
    "\1\0\1\50\1\53\33\0\1\72\45\0\1\53\6\0"+
    "\1\51\10\0\1\52\15\0\1\53\1\0\2\53\1\0"+
    "\2\53\16\0\1\36\35\0\1\36\4\0\1\36\17\0"+
    "\1\36\35\0\1\37\4\0\1\36\3\0\10\73\1\74"+
    "\1\75\2\76\1\46\5\73\30\76\1\46\1\76\2\46"+
    "\1\73\2\46\2\73\12\0\2\77\1\47\5\0\30\77"+
    "\1\47\1\77\2\47\1\0\2\47\16\0\1\100\23\0"+
    "\1\101\1\102\4\0\1\103\3\0\1\100\1\0\2\104"+
    "\1\0\1\100\1\104\31\0\1\105\64\0\1\106\45\0"+
    "\1\104\23\0\1\101\1\102\4\0\1\103\3\0\1\104"+
    "\1\0\2\104\1\0\2\104\41\0\1\107\50\0\1\110"+
    "\102\0\1\111\37\0\1\112\77\0\1\113\50\0\1\114"+
    "\66\0\1\115\57\0\1\116\115\0\1\117\51\0\1\120"+
    "\43\0\1\121\54\0\1\122\100\0\1\123\35\0\1\100"+
    "\23\0\1\101\1\102\4\0\1\103\3\0\1\124\1\0"+
    "\2\104\1\0\1\100\1\104\43\0\1\125\21\0\10\73"+
    "\1\74\41\73\1\0\4\73\2\0\12\73\1\74\1\126"+
    "\40\73\1\0\4\73\2\0\12\73\1\127\41\73\1\0"+
    "\4\73\2\0\12\73\1\74\1\75\2\76\6\73\30\76"+
    "\1\0\1\76\1\73\1\76\1\73\2\0\2\73\12\0"+
    "\2\77\6\0\30\77\1\0\1\77\1\0\1\77\21\0"+
    "\1\36\23\0\1\101\1\102\4\0\1\103\3\0\1\36"+
    "\4\0\1\36\37\0\1\130\65\0\1\131\54\0\1\132"+
    "\71\0\1\101\1\102\4\0\1\103\45\0\1\133\70\0"+
    "\1\134\53\0\1\135\102\0\1\136\51\0\1\137\50\0"+
    "\1\140\102\0\1\141\31\0\1\114\35\0\1\114\1\0"+
    "\2\114\1\0\2\114\1\142\23\0\1\143\54\0\1\144"+
    "\35\0\1\144\1\0\2\144\1\0\2\144\14\0\2\145"+
    "\6\0\30\145\1\0\1\145\1\0\1\145\54\0\1\146"+
    "\47\0\1\147\67\0\1\56\55\0\1\150\42\0\1\36"+
    "\23\0\1\101\1\102\4\0\1\103\3\0\1\37\4\0"+
    "\1\36\51\0\1\151\14\0\10\73\1\74\1\152\2\153"+
    "\1\154\5\73\30\153\1\154\1\153\2\154\1\73\2\154"+
    "\2\73\31\0\1\155\57\0\1\156\104\0\1\157\37\0"+
    "\1\160\102\0\1\161\51\0\1\162\56\0\1\163\56\0"+
    "\1\164\52\0\1\165\35\0\1\165\1\0\2\165\1\0"+
    "\2\165\16\0\1\166\35\0\1\166\1\0\2\166\1\0"+
    "\2\166\32\0\1\167\3\0\1\170\3\0\1\171\1\172"+
    "\4\0\1\173\1\174\41\0\1\141\46\0\2\175\1\176"+
    "\5\0\10\175\1\177\17\175\1\176\1\200\1\176\1\201"+
    "\1\0\2\176\3\0\2\202\2\203\5\0\2\145\6\0"+
    "\30\145\1\0\1\145\1\0\1\145\41\0\1\204\42\0"+
    "\1\205\35\0\1\205\1\0\2\205\1\0\2\205\26\0"+
    "\1\206\52\0\1\207\35\0\1\207\1\0\2\207\1\0"+
    "\2\207\2\0\10\73\1\74\1\75\2\153\6\73\30\153"+
    "\1\0\1\153\1\73\1\153\1\73\2\0\12\73\1\74"+
    "\1\75\2\153\1\154\5\73\30\153\1\154\1\153\2\154"+
    "\1\73\2\154\2\73\22\0\1\131\54\0\1\210\35\0"+
    "\1\210\1\0\2\210\1\0\2\210\51\0\1\211\41\0"+
    "\1\161\50\0\1\53\35\0\1\53\1\0\2\53\1\0"+
    "\2\53\52\0\1\212\40\0\1\213\102\0\1\214\26\0"+
    "\2\215\1\216\5\0\30\215\1\216\1\217\1\216\1\220"+
    "\1\0\2\216\14\0\2\175\1\216\5\0\30\175\1\216"+
    "\1\200\1\216\1\221\1\0\2\216\31\0\1\222\64\0"+
    "\1\223\65\0\1\224\65\0\1\225\54\0\1\226\62\0"+
    "\1\227\43\0\2\175\1\230\5\0\30\175\1\230\1\175"+
    "\1\230\1\175\1\0\2\230\1\231\15\0\1\176\15\0"+
    "\1\232\17\0\1\176\1\233\2\176\1\0\2\176\14\0"+
    "\2\175\1\230\5\0\1\234\27\175\1\230\1\175\1\230"+
    "\1\175\1\0\2\230\1\231\13\0\2\175\1\230\5\0"+
    "\1\235\27\175\1\230\1\175\1\230\1\175\1\0\2\230"+
    "\1\231\13\0\2\175\1\236\5\0\10\175\1\177\17\175"+
    "\1\236\1\200\1\236\1\201\1\0\2\236\1\231\3\0"+
    "\1\237\62\0\1\237\7\0\2\240\6\0\30\240\1\0"+
    "\1\240\1\0\1\240\31\0\1\141\50\0\2\241\1\216"+
    "\5\0\30\241\1\216\1\242\1\216\1\243\1\0\2\216"+
    "\16\0\1\206\35\0\1\206\1\0\2\206\1\0\2\206"+
    "\1\244\13\0\2\175\6\0\30\175\1\0\1\175\1\0"+
    "\1\175\17\0\2\245\6\0\30\245\1\0\1\245\1\0"+
    "\1\245\41\0\1\246\74\0\1\247\30\0\1\250\35\0"+
    "\1\250\4\0\1\250\17\0\1\251\35\0\1\251\1\0"+
    "\2\251\1\0\2\251\4\0\1\252\7\0\2\215\1\253"+
    "\5\0\30\215\1\253\1\215\1\253\1\215\1\0\2\253"+
    "\1\231\15\0\1\216\35\0\1\216\1\233\2\216\1\0"+
    "\2\216\4\0\1\252\7\0\2\215\1\253\5\0\1\254"+
    "\27\215\1\253\1\215\1\253\1\215\1\0\2\253\1\231"+
    "\3\0\1\252\7\0\2\215\1\255\5\0\30\215\1\255"+
    "\1\217\1\255\1\220\1\0\2\255\1\231\13\0\2\175"+
    "\1\256\5\0\30\175\1\256\1\200\1\256\1\221\1\0"+
    "\2\256\1\231\23\0\1\257\77\0\1\260\54\0\1\261"+
    "\57\0\1\262\104\0\1\263\43\0\1\264\45\0\1\230"+
    "\35\0\1\230\1\0\2\230\1\0\2\230\1\231\15\0"+
    "\1\231\13\0\1\265\3\0\1\266\3\0\1\267\1\270"+
    "\4\0\1\271\1\272\2\0\1\231\1\273\2\231\1\0"+
    "\2\231\1\0\1\274\22\0\1\275\62\0\1\276\52\0"+
    "\2\175\1\230\5\0\17\175\1\277\10\175\1\230\1\175"+
    "\1\230\1\175\1\0\2\230\1\231\13\0\2\175\1\230"+
    "\5\0\3\175\1\300\24\175\1\230\1\175\1\230\1\175"+
    "\1\0\2\230\1\231\15\0\1\236\15\0\1\232\17\0"+
    "\1\236\1\233\2\236\1\0\2\236\1\231\13\0\2\240"+
    "\6\0\30\240\1\0\1\240\1\0\1\240\17\0\2\240"+
    "\6\0\30\240\1\0\1\240\1\0\1\240\4\0\1\301"+
    "\2\0\1\302\7\0\2\241\1\303\5\0\30\241\1\303"+
    "\1\241\1\303\1\241\1\0\2\303\1\231\3\0\1\302"+
    "\7\0\2\241\1\303\5\0\1\304\27\241\1\303\1\241"+
    "\1\303\1\241\1\0\2\303\1\231\3\0\1\302\7\0"+
    "\2\241\1\305\5\0\30\241\1\305\1\242\1\305\1\243"+
    "\1\0\2\305\1\231\13\0\2\306\1\244\5\0\30\306"+
    "\1\244\1\306\1\244\1\307\1\0\2\244\4\0\1\310"+
    "\7\0\2\245\1\311\5\0\30\245\1\311\1\245\1\311"+
    "\1\245\1\0\2\311\26\0\1\156\62\0\1\312\50\0"+
    "\2\313\1\314\5\0\30\313\1\314\1\313\1\0\1\313"+
    "\1\0\1\314\17\0\1\252\35\0\1\252\1\0\2\252"+
    "\1\315\2\252\4\0\1\252\11\0\1\253\35\0\1\253"+
    "\1\0\2\253\1\0\2\253\1\231\3\0\1\252\7\0"+
    "\2\215\1\253\5\0\3\215\1\316\24\215\1\253\1\215"+
    "\1\253\1\215\1\0\2\253\1\231\3\0\1\252\11\0"+
    "\1\255\35\0\1\255\1\233\2\255\1\0\2\255\1\231"+
    "\15\0\1\256\35\0\1\256\1\233\2\256\1\0\2\256"+
    "\1\231\26\0\1\262\102\0\1\262\37\0\1\225\54\0"+
    "\1\317\35\0\1\317\1\0\2\317\1\0\2\317\51\0"+
    "\1\320\47\0\1\262\55\0\1\321\64\0\1\322\65\0"+
    "\1\323\65\0\1\324\54\0\1\325\62\0\1\326\62\0"+
    "\1\327\45\0\1\274\2\0\1\330\32\0\1\274\1\0"+
    "\2\274\1\0\2\274\43\0\1\331\46\0\1\332\47\0"+
    "\2\175\1\230\5\0\15\175\1\333\12\175\1\230\1\175"+
    "\1\230\1\175\1\0\2\230\1\231\13\0\2\175\1\230"+
    "\5\0\17\175\1\334\10\175\1\230\1\175\1\230\1\175"+
    "\1\0\2\230\1\231\20\0\1\335\57\0\1\302\11\0"+
    "\1\336\11\0\1\337\11\0\1\302\1\0\2\302\1\0"+
    "\2\302\4\0\1\302\11\0\1\303\35\0\1\303\1\0"+
    "\2\303\1\0\2\303\1\231\3\0\1\302\7\0\2\241"+
    "\1\303\5\0\3\241\1\340\24\241\1\303\1\241\1\303"+
    "\1\241\1\0\2\303\1\231\3\0\1\302\11\0\1\305"+
    "\35\0\1\305\1\233\2\305\1\0\2\305\1\231\2\0"+
    "\2\341\2\342\5\0\2\306\1\343\5\0\30\306\1\343"+
    "\1\306\1\343\1\306\1\0\2\343\3\0\2\341\2\342"+
    "\5\0\2\306\1\307\5\0\30\306\1\307\1\306\2\307"+
    "\1\0\2\307\15\0\1\344\1\310\25\0\2\344\6\0"+
    "\1\310\1\0\2\310\1\0\2\310\4\0\1\310\11\0"+
    "\1\311\35\0\1\311\1\0\2\311\1\0\2\311\5\0"+
    "\1\345\10\0\1\312\35\0\1\312\1\0\2\312\1\346"+
    "\2\312\14\0\2\313\1\347\5\0\30\313\1\347\1\313"+
    "\1\0\1\313\1\0\1\347\15\0\2\313\1\314\2\0"+
    "\1\350\2\0\30\313\1\314\1\313\1\0\1\313\1\0"+
    "\1\314\15\0\2\351\1\315\5\0\30\351\1\315\1\351"+
    "\2\315\1\352\2\315\4\0\1\252\7\0\2\215\1\253"+
    "\5\0\17\215\1\353\10\215\1\253\1\215\1\253\1\215"+
    "\1\0\2\253\1\231\13\0\2\354\6\0\30\354\1\0"+
    "\1\354\1\0\1\354\41\0\1\355\50\0\1\356\77\0"+
    "\1\357\54\0\1\360\57\0\1\361\104\0\1\362\43\0"+
    "\1\363\72\0\1\364\60\0\1\365\64\0\1\366\33\0"+
    "\2\175\1\367\5\0\30\175\1\367\1\175\1\367\1\333"+
    "\1\0\2\367\1\370\13\0\2\175\1\230\5\0\1\371"+
    "\27\175\1\230\1\175\1\230\1\175\1\0\2\230\1\231"+
    "\26\0\1\372\57\0\1\373\42\0\1\302\7\0\2\241"+
    "\1\303\5\0\17\241\1\374\10\241\1\303\1\241\1\303"+
    "\1\241\1\0\2\303\1\231\3\0\1\375\62\0\1\375"+
    "\7\0\2\376\1\375\5\0\30\376\1\375\1\376\1\375"+
    "\1\377\1\0\2\375\3\0\2\341\2\342\7\0\1\343"+
    "\35\0\1\343\1\0\2\343\1\0\2\343\15\0\1\344"+
    "\1\u0100\1\u0101\24\0\2\344\6\0\1\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\5\0\1\345\16\0\1\u0102\1\u0103\1\u0104"+
    "\1\0\1\u0105\1\0\1\u0106\1\0\1\u0107\1\0\1\u0108"+
    "\3\0\1\u0109\1\u010a\6\0\1\u010b\1\u010c\23\0\2\u010d"+
    "\6\0\30\u010d\1\0\1\u010d\1\0\1\u010d\1\u010e\20\0"+
    "\1\347\2\0\1\350\32\0\1\347\4\0\1\347\15\0"+
    "\2\351\1\u010f\5\0\30\351\1\u010f\1\351\1\u010f\1\351"+
    "\1\352\2\u010f\16\0\1\352\1\u0110\34\0\1\352\1\0"+
    "\2\352\1\0\2\352\4\0\1\252\7\0\2\215\1\253"+
    "\5\0\1\u0111\27\215\1\253\1\215\1\253\1\215\1\0"+
    "\2\253\1\231\3\0\1\u0112\7\0\2\354\1\u0113\5\0"+
    "\30\354\1\u0113\1\354\1\u0113\1\354\1\0\2\u0113\26\0"+
    "\1\262\63\0\1\361\102\0\1\361\37\0\1\324\54\0"+
    "\1\u0114\35\0\1\u0114\1\0\2\u0114\1\0\2\u0114\51\0"+
    "\1\u0115\47\0\1\361\74\0\1\u0116\30\0\1\365\35\0"+
    "\1\365\1\0\2\365\1\0\2\365\1\u0117\23\0\1\u0118"+
    "\54\0\1\367\35\0\1\367\1\0\2\367\1\0\2\367"+
    "\1\370\15\0\1\370\13\0\1\265\3\0\1\266\3\0"+
    "\1\267\1\270\4\0\1\271\1\272\2\0\1\370\1\273"+
    "\2\370\1\0\2\370\1\0\1\u0119\12\0\2\175\1\230"+
    "\5\0\25\175\1\u011a\2\175\1\230\1\175\1\230\1\175"+
    "\1\0\2\230\1\231\51\0\1\u011b\46\0\1\u011c\30\0"+
    "\1\302\7\0\2\241\1\303\5\0\1\u011d\27\241\1\303"+
    "\1\241\1\303\1\241\1\0\2\303\1\231\13\0\2\376"+
    "\1\375\5\0\30\376\1\375\1\376\1\375\1\377\1\0"+
    "\2\375\14\0\2\376\1\u011e\5\0\30\376\1\u011e\1\376"+
    "\1\u011e\1\376\1\0\2\u011e\1\0\1\u011f\12\0\2\376"+
    "\1\377\5\0\30\376\1\377\1\376\2\377\1\0\2\377"+
    "\1\0\1\u011f\14\0\1\u0100\1\u0101\34\0\1\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\25\0\1\u0120\63\0\1\u0121\1\0"+
    "\1\u0122\12\0\1\u0123\46\0\1\u0124\64\0\1\u0125\11\0"+
    "\1\u0126\3\0\1\u0127\43\0\1\u0128\2\0\1\u0129\53\0"+
    "\1\u012a\71\0\1\u012b\7\0\1\u012c\55\0\1\u012d\51\0"+
    "\1\u012e\13\0\1\u012f\53\0\1\u0130\62\0\1\u0131\44\0"+
    "\2\u010d\6\0\30\u010d\1\0\1\u010d\1\0\1\u010d\1\u0132"+
    "\20\0\1\u010f\35\0\1\u010f\1\0\2\u010f\1\352\2\u010f"+
    "\4\0\1\252\7\0\2\215\1\253\5\0\25\215\1\u0133"+
    "\2\215\1\253\1\215\1\253\1\215\1\0\2\253\1\231"+
    "\14\0\1\u0134\1\u0112\25\0\2\u0134\6\0\1\u0112\1\0"+
    "\2\u0112\1\0\2\u0112\4\0\1\u0112\11\0\1\u0113\35\0"+
    "\1\u0113\1\0\2\u0113\1\0\2\u0113\14\0\2\u0135\6\0"+
    "\30\u0135\1\0\1\u0135\1\0\1\u0135\41\0\1\u0136\42\0"+
    "\1\u0116\35\0\1\u0116\1\0\2\u0116\1\0\2\u0116\1\0"+
    "\1\274\14\0\1\u0117\35\0\1\u0117\1\0\2\u0117\1\0"+
    "\2\u0117\1\0\1\u0119\47\0\1\u0137\27\0\1\u0119\2\0"+
    "\1\u0138\32\0\1\u0119\1\0\2\u0119\1\0\2\u0119\14\0"+
    "\2\175\1\230\5\0\12\175\1\u0139\15\175\1\230\1\175"+
    "\1\230\1\175\1\0\2\230\1\231\25\0\1\352\61\0"+
    "\1\u011b\41\0\1\302\7\0\2\241\1\303\5\0\25\241"+
    "\1\u013a\2\241\1\303\1\241\1\303\1\241\1\0\2\303"+
    "\1\231\15\0\1\u011e\35\0\1\u011e\1\0\2\u011e\1\0"+
    "\2\u011e\1\0\1\u011f\14\0\1\u011f\2\0\1\u013b\32\0"+
    "\1\u011f\1\0\2\u011f\1\0\2\u011f\25\0\1\u013c\65\0"+
    "\1\u013d\61\0\1\u013e\20\0\1\u013f\61\0\1\u0140\42\0"+
    "\1\u0141\62\0\1\u0142\67\0\1\u0143\62\0\1\u0107\66\0"+
    "\1\u0144\56\0\1\u0145\56\0\1\u0146\64\0\1\u0147\64\0"+
    "\1\u0148\61\0\1\u0149\62\0\1\u014a\57\0\1\u014b\63\0"+
    "\1\u014c\61\0\1\u0128\1\u014c\35\0\1\252\7\0\2\215"+
    "\1\253\5\0\12\215\1\u014d\15\215\1\253\1\215\1\253"+
    "\1\215\1\0\2\253\1\231\14\0\1\u0134\1\u014e\1\u014f"+
    "\24\0\2\u0134\6\0\1\u014e\1\0\2\u014e\1\0\2\u014e"+
    "\14\0\2\u0135\1\u0116\5\0\30\u0135\1\u0116\1\u0135\1\u0116"+
    "\1\u0135\1\0\2\u0116\1\0\1\274\24\0\1\361\72\0"+
    "\1\u0150\40\0\2\175\1\230\5\0\2\175\1\u0151\25\175"+
    "\1\230\1\175\1\230\1\175\1\0\2\230\1\231\3\0"+
    "\1\302\7\0\2\241\1\303\5\0\12\241\1\u0152\15\241"+
    "\1\303\1\241\1\303\1\241\1\0\2\303\1\231\25\0"+
    "\1\u0153\102\0\1\u0154\57\0\1\u0155\43\0\1\u0156\11\0"+
    "\1\u0157\2\0\1\u0158\1\0\1\u0159\4\0\1\u015a\1\u015b"+
    "\52\0\1\u015c\62\0\1\u015d\47\0\1\u015e\62\0\1\u015f"+
    "\71\0\1\u0143\62\0\1\u0160\56\0\1\u015f\55\0\1\u0161"+
    "\101\0\1\u0162\43\0\1\u0163\102\0\1\u0164\46\0\1\u0165"+
    "\56\0\1\u0166\42\0\1\252\7\0\2\215\1\253\5\0"+
    "\2\215\1\u0167\25\215\1\253\1\215\1\253\1\215\1\0"+
    "\2\253\1\231\15\0\1\u014e\1\u014f\34\0\1\u014e\1\0"+
    "\2\u014e\1\0\2\u014e\14\0\2\u0168\1\u014f\5\0\30\u0168"+
    "\1\u014f\1\u0168\1\u014f\1\u0169\1\0\2\u014f\26\0\1\u016a"+
    "\50\0\2\175\1\230\5\0\1\175\1\u016b\26\175\1\230"+
    "\1\175\1\230\1\175\1\0\2\230\1\231\3\0\1\302"+
    "\7\0\2\241\1\303\5\0\2\241\1\u016c\25\241\1\303"+
    "\1\241\1\303\1\241\1\0\2\303\1\231\26\0\1\u0163"+
    "\67\0\1\u016d\67\0\1\u016e\50\0\1\u016e\1\u016f\5\0"+
    "\1\u0170\67\0\1\u0171\52\0\1\u0172\62\0\1\u015f\5\0"+
    "\1\u0163\47\0\1\u0173\67\0\1\u0174\53\0\1\u0175\71\0"+
    "\1\u015f\53\0\1\u0176\56\0\1\u0177\100\0\1\u0178\62\0"+
    "\1\u0143\54\0\1\u0179\62\0\1\u015f\77\0\1\u017a\55\0"+
    "\1\u017b\51\0\1\u015f\37\0\1\252\7\0\2\215\1\253"+
    "\5\0\1\215\1\u017c\26\215\1\253\1\215\1\253\1\215"+
    "\1\0\2\253\1\231\2\0\2\u017d\2\u017e\5\0\2\u0168"+
    "\1\u017f\5\0\30\u0168\1\u017f\1\u0168\1\u017f\1\u0168\1\0"+
    "\2\u017f\3\0\2\u017d\2\u017e\5\0\2\u0168\1\u0169\5\0"+
    "\30\u0168\1\u0169\1\u0168\2\u0169\1\0\2\u0169\25\0\1\u0180"+
    "\51\0\2\175\1\u0181\1\u0182\4\0\30\175\1\u0181\1\200"+
    "\1\u0181\1\u0183\1\0\2\u0181\1\231\3\0\1\302\7\0"+
    "\2\241\1\303\5\0\1\241\1\u0184\26\241\1\303\1\241"+
    "\1\303\1\241\1\0\2\303\1\231\34\0\1\u015f\74\0"+
    "\1\u015f\46\0\1\u0185\72\0\1\u0186\70\0\1\u015f\40\0"+
    "\1\u0187\75\0\1\u015f\53\0\1\u0175\65\0\1\u015f\74\0"+
    "\1\u0179\43\0\1\u0188\57\0\1\u0189\61\0\1\u015f\101\0"+
    "\1\u015f\53\0\1\u018a\31\0\1\252\7\0\2\215\1\u018b"+
    "\1\u0182\4\0\30\215\1\u018b\1\217\1\u018b\1\u018c\1\0"+
    "\2\u018b\1\231\3\0\1\u018d\62\0\1\u018d\10\0\1\u018e"+
    "\1\u018d\25\0\2\u018e\6\0\1\u018d\1\0\2\u018d\1\0"+
    "\2\u018d\3\0\2\u017d\2\u017e\7\0\1\u017f\35\0\1\u017f"+
    "\1\0\2\u017f\1\0\2\u017f\16\0\1\u018f\1\u0182\34\0"+
    "\1\u018f\1\233\2\u018f\1\0\2\u018f\16\0\1\u0181\1\u0182"+
    "\34\0\1\u0181\1\0\2\u0181\1\0\2\u0181\1\231\13\0"+
    "\2\175\1\u0181\1\u0182\4\0\30\175\1\u0181\1\175\1\u0181"+
    "\1\u0183\1\0\2\u0181\1\231\3\0\1\302\7\0\2\241"+
    "\1\u0190\1\u0182\4\0\30\241\1\u0190\1\242\1\u0190\1\u0191"+
    "\1\0\2\u0190\1\231\33\0\1\u0192\75\0\1\u0193\41\0"+
    "\1\u0194\42\0\1\u0132\15\0\1\u0102\1\u0103\1\u0104\1\0"+
    "\1\u0105\1\0\1\u0106\1\0\1\u0107\1\0\1\u0108\3\0"+
    "\1\u0109\1\u010a\6\0\1\u010b\1\u010c\46\0\1\u015f\51\0"+
    "\1\u0179\40\0\1\252\11\0\1\u018b\1\u0182\34\0\1\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\231\3\0\1\252\7\0"+
    "\2\215\1\u018b\1\u0182\4\0\30\215\1\u018b\1\215\1\u018b"+
    "\1\u018c\1\0\2\u018b\1\231\14\0\1\u018e\1\u018d\25\0"+
    "\2\u018e\6\0\1\u018d\1\0\2\u018d\1\0\2\u018d\15\0"+
    "\1\u018e\1\u0195\1\u0196\24\0\2\u018e\6\0\1\u0195\1\0"+
    "\2\u0195\1\0\2\u0195\16\0\1\u018f\1\u0182\34\0\1\u018f"+
    "\1\0\2\u018f\1\0\2\u018f\4\0\1\302\11\0\1\u0190"+
    "\1\u0182\34\0\1\u0190\1\0\2\u0190\1\0\2\u0190\1\231"+
    "\3\0\1\302\7\0\2\241\1\u0190\1\u0182\4\0\30\241"+
    "\1\u0190\1\241\1\u0190\1\u0191\1\0\2\u0190\1\231\42\0"+
    "\1\u0197\60\0\1\u015f\51\0\1\u0198\50\0\1\u0195\1\u0196"+
    "\34\0\1\u0195\1\0\2\u0195\1\0\2\u0195\14\0\2\u0199"+
    "\1\u0196\5\0\30\u0199\1\u0196\1\u0199\1\u0196\1\u019a\1\0"+
    "\2\u0196\32\0\1\u015f\102\0\1\u019b\14\0\1\u019c\3\0"+
    "\1\u019d\1\u019e\2\0\2\u0199\1\u019f\5\0\30\u0199\1\u019f"+
    "\1\u0199\1\u019f\1\u0199\1\0\2\u019f\4\0\1\u019c\3\0"+
    "\1\u019d\1\u019e\2\0\2\u0199\1\u01a0\5\0\30\u0199\1\u01a0"+
    "\1\u0199\1\u01a0\1\u019a\1\0\2\u01a0\27\0\1\u0193\47\0"+
    "\1\u01a1\1\u01a2\1\u019c\5\0\20\u01a1\2\u01a2\6\u01a1\1\u019c"+
    "\1\u01a1\2\u019c\1\0\2\u019c\10\0\1\u01a3\63\0\1\u01a3"+
    "\55\0\1\u019c\11\0\1\u019f\35\0\1\u019f\1\0\2\u019f"+
    "\1\0\2\u019f\4\0\1\u019c\7\0\2\u0199\1\u01a0\5\0"+
    "\30\u0199\1\u01a0\1\u0199\1\u01a0\1\u019a\1\0\2\u01a0\14\0"+
    "\1\u01a1\1\u01a2\6\0\20\u01a1\2\u01a2\6\u01a1\1\0\1\u01a1"+
    "\1\0\1\u01a1\17\0\1\u01a1\1\u01a2\1\u01a3\5\0\20\u01a1"+
    "\2\u01a2\6\u01a1\1\u01a3\1\u01a1\1\u01a3\1\u01a2\1\0\2\u01a3"+
    "\1\0\1\u01a4\14\0\1\u01a3\35\0\1\u01a3\1\0\2\u01a3"+
    "\1\0\2\u01a3\1\0\1\u01a4\14\0\1\u01a4\2\0\1\u01a5"+
    "\32\0\1\u01a4\1\0\2\u01a4\1\0\2\u01a4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20247];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\25\1\1\11\1\1\4\11"+
    "\3\1\20\0\1\1\4\0\3\1\23\0\1\1\1\0"+
    "\1\1\23\0\1\1\155\0\1\11\4\0\1\11\12\0"+
    "\1\11\30\0\1\11\14\0\1\1\1\0\1\11\41\0"+
    "\1\11\5\0\1\11\2\0\1\11\106\0\1\11\42\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 23: break;
          case 2: 
            { System.out.println("Special symbol found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            } 
            // fall through
          case 24: break;
          case 3: 
            { System.out.println("Assignation operator found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            } 
            // fall through
          case 25: break;
          case 4: 
            { System.out.println("Relational operator found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            } 
            // fall through
          case 26: break;
          case 5: 
            { System.out.println("Aritmethic operator found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            } 
            // fall through
          case 27: break;
          case 6: 
            { System.out.print(yytext()+"\n"); yybegin(1);
            } 
            // fall through
          case 28: break;
          case 7: 
            { System.out.print(yytext());
            } 
            // fall through
          case 29: break;
          case 8: 
            { System.out.println("While end found at line: " + " => at (" +yyline + ","+ yycolumn+")" );
            yybegin(YYINITIAL);
            } 
            // fall through
          case 30: break;
          case 9: 
            { System.out.println("Increment or decrement found: " + yytext() + " => at (" + yyline +"," + yycolumn +")");
            } 
            // fall through
          case 31: break;
          case 10: 
            { System.out.print("Comentario encontrado: \n"+ yytext()); yybegin(comment);
            } 
            // fall through
          case 32: break;
          case 11: 
            { System.out.print("Comentario en linea encontrado:"  + " => at (" +yyline + ","+ yycolumn+")" +yytext() );
        yybegin(line_comment);
            } 
            // fall through
          case 33: break;
          case 12: 
            { System.out.print("Comentario encontrado: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" + "\n");
            } 
            // fall through
          case 34: break;
          case 13: 
            { System.out.println("Function found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
            } 
            // fall through
          case 35: break;
          case 14: 
            { System.out.println("if was found:\n" + yytext()  + " => at (" +yyline + ","+ yycolumn+")");
            } 
            // fall through
          case 36: break;
          case 15: 
            { System.out.print(" Struct found:\n" + yytext()  + " => at (" +yyline + ","+ yycolumn+")");
            } 
            // fall through
          case 37: break;
          case 16: 
            { System.out.println("Number declaration found: " + yytext()  + " => at (" +yyline + ","+ yycolumn + ")" );
            } 
            // fall through
          case 38: break;
          case 17: 
            { System.out.print("import found:\n" + yytext() + " => at (" +yyline + ","+ yycolumn+")");
            } 
            // fall through
          case 39: break;
          case 18: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() +  " => at (" +yyline + ","+ yycolumn+")");
            } 
            // fall through
          case 40: break;
          case 19: 
            { System.out.println("Main: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")");
        //yybegin(rules);
            } 
            // fall through
          case 41: break;
          case 20: 
            { System.out.println("While found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
        yybegin(whileLoops);
            } 
            // fall through
          case 42: break;
          case 21: 
            { System.out.println("Declaration: " + yytext() + "\n"  + " => at (" +yyline + ","+ yycolumn+")");
            } 
            // fall through
          case 43: break;
          case 22: 
            { System.out.println("For found: " + yytext()  + " => at (" +yyline + ","+ yycolumn+")" );
            } 
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
