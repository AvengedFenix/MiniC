/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\41\1\42\1\42\1\41\22\0\1\40\1\1\1\45"+
    "\1\0\1\0\1\0\1\0\1\0\1\43\1\44\1\6\1\4\1\0"+
    "\1\5\1\0\1\7\12\11\1\0\1\13\1\3\1\2\1\3\1\0"+
    "\1\0\32\10\1\0\1\0\1\0\1\0\1\0\1\0\1\24\1\27"+
    "\1\31\1\25\1\30\1\23\1\22\1\32\1\15\2\10\1\20\1\10"+
    "\1\16\1\21\2\10\1\33\1\35\1\17\1\26\1\34\1\36\3\10"+
    "\1\14\1\0\1\0\7\0\1\42\32\0\1\37\1\0\35\0\1\0"+
    "\2\0\1\0\u15bd\0\1\37\u097f\0\13\37\35\0\1\42\1\42\5\0"+
    "\1\37\57\0\1\37\u0fa0\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\16\1\1\2\1\0\1\1\20\0\1\1\22\0"+
    "\1\3\1\1\132\0\1\4\1\0\1\5\37\0\1\6"+
    "\12\0\1\7\11\0\1\10\13\0\1\11\31\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u01c8"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u023a\0\u0792\0\u07b8"+
    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u0214\0\u134c\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\46\0\u14ee\0\46\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6"+
    "\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916"+
    "\0\u193c\0\u1962\0\u1988\0\46\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\46\0\u1b2a"+
    "\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a"+
    "\0\46\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64"+
    "\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\46\0\u1e22\0\u1e48\0\u1e6e"+
    "\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e"+
    "\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce"+
    "\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\2\1\3\2\2\1\4\2\2\1\5\2\2\1\6"+
    "\2\2\1\7\1\2\1\10\1\11\1\12\1\2\1\13"+
    "\2\2\1\14\1\15\1\16\2\17\1\4\1\20\3\2"+
    "\54\0\1\21\51\0\1\22\5\0\1\23\14\0\1\24"+
    "\1\0\2\25\1\22\1\25\21\0\1\26\4\0\1\27"+
    "\43\0\1\30\44\0\1\31\1\32\45\0\1\33\42\0"+
    "\1\34\50\0\1\35\56\0\1\36\34\0\1\37\41\0"+
    "\1\40\62\0\1\41\25\0\1\25\5\0\1\23\14\0"+
    "\1\24\1\0\4\25\3\0\6\21\1\42\32\21\2\0"+
    "\3\21\12\0\1\43\2\0\1\44\5\0\1\45\1\0"+
    "\1\46\11\0\2\47\1\43\1\47\24\0\1\50\56\0"+
    "\1\51\25\0\1\47\2\0\1\44\5\0\1\45\1\0"+
    "\1\46\11\0\4\47\22\0\1\52\71\0\1\53\20\0"+
    "\1\54\50\0\1\55\57\0\1\56\40\0\1\57\54\0"+
    "\1\60\31\0\1\61\50\0\1\62\36\0\1\63\52\0"+
    "\1\64\40\0\1\65\30\0\6\21\1\42\1\66\31\21"+
    "\2\0\3\21\12\0\1\67\2\0\1\44\5\0\1\45"+
    "\1\0\1\46\13\0\1\67\22\0\1\70\47\0\1\71"+
    "\46\0\1\72\41\0\1\44\5\0\1\45\1\0\1\46"+
    "\36\0\1\73\50\0\1\74\36\0\1\75\24\0\4\75"+
    "\13\0\2\76\3\0\22\76\1\0\1\76\27\0\1\52"+
    "\47\0\1\26\33\0\1\56\24\0\4\56\1\77\31\0"+
    "\1\100\36\0\1\101\60\0\1\102\37\0\1\103\36\0"+
    "\1\104\47\0\1\105\37\0\1\67\26\0\1\67\23\0"+
    "\1\106\47\0\1\107\52\0\1\110\41\0\1\111\56\0"+
    "\1\112\22\0\2\113\3\0\17\113\1\114\2\113\1\0"+
    "\1\113\6\0\2\115\1\116\4\0\2\76\3\0\22\76"+
    "\1\0\1\76\22\0\1\117\2\0\1\120\2\0\1\121"+
    "\1\0\1\122\1\0\1\123\1\0\1\124\34\0\1\125"+
    "\37\0\1\126\24\0\4\126\15\0\1\127\24\0\4\127"+
    "\15\0\1\130\24\0\4\130\33\0\1\131\45\0\1\132"+
    "\27\0\1\133\24\0\4\133\27\0\1\70\50\0\1\134"+
    "\30\0\1\25\24\0\4\25\22\0\1\111\36\0\2\113"+
    "\1\135\2\0\22\113\1\135\1\113\2\135\1\136\12\0"+
    "\2\113\1\135\2\0\7\113\1\137\12\113\1\135\1\113"+
    "\2\135\1\136\4\0\1\140\45\0\1\140\5\0\2\141"+
    "\3\0\22\141\1\0\1\141\23\0\1\142\50\0\1\143"+
    "\44\0\1\144\46\0\1\145\45\0\1\146\56\0\1\147"+
    "\43\0\1\52\25\0\2\150\3\0\17\150\1\151\2\150"+
    "\1\0\1\150\15\0\2\152\3\0\17\152\1\153\2\152"+
    "\1\0\1\152\15\0\2\113\3\0\22\113\1\0\1\113"+
    "\32\0\1\154\32\0\1\132\24\0\4\132\1\155\12\0"+
    "\2\156\3\0\22\156\1\0\1\156\25\0\1\157\37\0"+
    "\1\135\24\0\4\135\1\136\14\0\1\136\2\0\1\160"+
    "\2\0\1\161\2\0\1\162\1\0\1\163\1\0\1\164"+
    "\1\0\1\165\2\0\1\166\2\0\4\136\1\0\1\167"+
    "\11\0\2\113\1\135\2\0\16\113\1\170\3\113\1\135"+
    "\1\113\2\135\1\136\12\0\2\141\3\0\22\141\1\0"+
    "\1\141\15\0\2\141\3\0\22\141\1\0\1\141\3\0"+
    "\1\171\20\0\1\172\44\0\1\173\50\0\1\174\52\0"+
    "\1\175\40\0\1\176\50\0\1\177\23\0\1\200\5\0"+
    "\2\150\1\201\2\0\22\150\1\201\1\150\2\201\1\136"+
    "\4\0\1\200\5\0\2\150\1\201\2\0\7\150\1\202"+
    "\12\150\1\201\1\150\2\201\1\136\4\0\1\203\5\0"+
    "\2\152\1\204\2\0\22\152\1\204\1\152\2\204\1\136"+
    "\4\0\1\203\5\0\2\152\1\204\2\0\7\152\1\205"+
    "\12\152\1\204\1\152\2\204\1\136\14\0\1\206\24\0"+
    "\4\206\13\0\2\207\1\155\2\0\22\207\1\155\1\210"+
    "\2\155\5\0\1\211\5\0\2\156\1\212\2\0\22\156"+
    "\1\212\1\156\2\212\33\0\1\106\33\0\1\213\50\0"+
    "\1\214\44\0\1\215\46\0\1\216\45\0\1\217\56\0"+
    "\1\220\34\0\1\221\36\0\1\167\1\0\1\222\22\0"+
    "\4\167\13\0\2\113\1\135\2\0\1\223\21\113\1\135"+
    "\1\113\2\135\1\136\16\0\1\224\43\0\1\225\24\0"+
    "\4\225\25\0\1\172\47\0\1\142\50\0\1\226\36\0"+
    "\1\172\60\0\1\172\24\0\1\200\4\0\1\227\3\0"+
    "\1\230\13\0\4\200\5\0\1\200\7\0\1\201\24\0"+
    "\4\201\1\136\4\0\1\200\5\0\2\150\1\201\2\0"+
    "\16\150\1\231\3\150\1\201\1\150\2\201\1\136\14\0"+
    "\1\203\24\0\4\203\2\0\1\232\2\0\1\203\7\0"+
    "\1\204\24\0\4\204\1\136\4\0\1\203\5\0\2\152"+
    "\1\204\2\0\16\152\1\233\3\152\1\204\1\152\2\204"+
    "\1\136\3\0\2\234\1\235\4\0\2\207\1\236\2\0"+
    "\22\207\1\236\1\207\2\236\4\0\2\234\1\235\4\0"+
    "\2\207\1\210\2\0\22\207\4\210\14\0\1\237\1\211"+
    "\24\0\4\211\5\0\1\211\7\0\1\212\24\0\4\212"+
    "\22\0\1\240\44\0\1\241\50\0\1\242\52\0\1\243"+
    "\40\0\1\244\50\0\1\245\36\0\1\246\40\0\2\113"+
    "\1\135\2\0\7\113\1\247\12\113\1\135\1\113\2\135"+
    "\1\136\12\0\2\250\3\0\22\250\1\0\1\250\25\0"+
    "\1\251\60\0\1\252\36\0\1\253\23\0\1\200\5\0"+
    "\2\150\1\201\2\0\1\254\21\150\1\201\1\150\2\201"+
    "\1\136\12\0\2\255\1\232\2\0\22\255\4\232\2\0"+
    "\1\256\2\0\1\203\5\0\2\152\1\204\2\0\1\257"+
    "\21\152\1\204\1\152\2\204\1\136\4\0\1\260\45\0"+
    "\1\260\5\0\2\261\1\260\2\0\22\261\1\260\1\262"+
    "\2\260\4\0\2\234\1\235\6\0\1\236\24\0\4\236"+
    "\14\0\1\237\1\263\1\264\23\0\4\263\15\0\1\265"+
    "\24\0\4\265\25\0\1\240\47\0\1\213\50\0\1\266"+
    "\36\0\1\240\60\0\1\240\37\0\1\267\30\0\2\113"+
    "\1\135\2\0\12\113\1\270\7\113\1\135\1\113\2\135"+
    "\1\136\4\0\1\271\5\0\2\250\1\272\2\0\22\250"+
    "\1\272\1\250\2\272\33\0\1\172\43\0\1\273\37\0"+
    "\1\274\27\0\1\200\5\0\2\150\1\201\2\0\7\150"+
    "\1\275\12\150\1\201\1\150\2\201\1\136\12\0\2\255"+
    "\1\276\2\0\22\255\1\276\1\255\2\276\2\0\1\256"+
    "\12\0\1\256\1\277\23\0\4\256\5\0\1\203\5\0"+
    "\2\152\1\204\2\0\7\152\1\300\12\152\1\204\1\152"+
    "\2\204\1\136\12\0\2\261\1\260\2\0\22\261\1\260"+
    "\1\262\2\260\13\0\2\261\1\301\2\0\22\261\1\301"+
    "\1\261\2\301\1\0\1\302\11\0\2\261\1\262\2\0"+
    "\22\261\4\262\1\0\1\302\13\0\1\263\1\264\23\0"+
    "\4\263\13\0\2\303\3\0\22\303\1\0\1\303\25\0"+
    "\1\304\37\0\1\267\24\0\4\267\1\0\1\167\11\0"+
    "\2\113\1\135\2\0\3\113\1\305\16\113\1\135\1\113"+
    "\2\135\1\136\13\0\1\306\1\271\24\0\4\271\5\0"+
    "\1\271\7\0\1\272\24\0\4\272\33\0\1\256\52\0"+
    "\1\273\12\0\1\200\5\0\2\150\1\201\2\0\12\150"+
    "\1\307\7\150\1\201\1\150\2\201\1\136\14\0\1\276"+
    "\24\0\4\276\2\0\1\256\2\0\1\203\5\0\2\152"+
    "\1\204\2\0\12\152\1\310\7\152\1\204\1\152\2\204"+
    "\1\136\14\0\1\301\24\0\4\301\1\0\1\302\13\0"+
    "\1\302\1\0\1\311\22\0\4\302\13\0\2\303\1\267"+
    "\2\0\22\303\1\267\1\303\2\267\1\0\1\167\31\0"+
    "\1\240\25\0\2\113\1\135\2\0\13\113\1\312\6\113"+
    "\1\135\1\113\2\135\1\136\13\0\1\306\1\313\1\314"+
    "\23\0\4\313\5\0\1\200\5\0\2\150\1\201\2\0"+
    "\3\150\1\315\16\150\1\201\1\150\2\201\1\136\4\0"+
    "\1\203\5\0\2\152\1\204\2\0\3\152\1\316\16\152"+
    "\1\204\1\152\2\204\1\136\12\0\2\113\1\135\2\0"+
    "\20\113\1\317\1\113\1\135\1\113\2\135\1\136\14\0"+
    "\1\313\1\314\23\0\4\313\13\0\2\320\1\314\2\0"+
    "\22\320\1\314\1\321\2\314\5\0\1\200\5\0\2\150"+
    "\1\201\2\0\13\150\1\322\6\150\1\201\1\150\2\201"+
    "\1\136\4\0\1\203\5\0\2\152\1\204\2\0\13\152"+
    "\1\323\6\152\1\204\1\152\2\204\1\136\12\0\2\113"+
    "\1\324\1\325\1\0\17\113\1\114\2\113\1\324\1\326"+
    "\2\324\1\136\3\0\2\327\1\330\4\0\2\320\1\331"+
    "\2\0\22\320\1\331\1\320\2\331\4\0\2\327\1\330"+
    "\4\0\2\320\1\321\2\0\22\320\4\321\5\0\1\200"+
    "\5\0\2\150\1\201\2\0\20\150\1\332\1\150\1\201"+
    "\1\150\2\201\1\136\4\0\1\203\5\0\2\152\1\204"+
    "\2\0\20\152\1\333\1\152\1\204\1\152\2\204\1\136"+
    "\14\0\1\324\1\325\23\0\4\324\1\136\12\0\2\113"+
    "\1\324\1\325\1\0\22\113\1\324\1\326\2\324\1\136"+
    "\4\0\1\334\45\0\1\334\6\0\1\335\1\334\24\0"+
    "\4\334\4\0\2\327\1\330\6\0\1\331\24\0\4\331"+
    "\5\0\1\200\5\0\2\150\1\336\1\325\1\0\17\150"+
    "\1\151\2\150\1\336\1\337\2\336\1\136\4\0\1\203"+
    "\5\0\2\152\1\340\1\325\1\0\17\152\1\153\2\152"+
    "\1\340\1\341\2\340\1\136\13\0\1\335\1\334\24\0"+
    "\4\334\14\0\1\335\1\342\1\343\23\0\4\342\5\0"+
    "\1\200\7\0\1\336\1\325\23\0\4\336\1\136\4\0"+
    "\1\200\5\0\2\150\1\336\1\325\1\0\22\150\1\336"+
    "\1\337\2\336\1\136\4\0\1\203\7\0\1\340\1\325"+
    "\23\0\4\340\1\136\4\0\1\203\5\0\2\152\1\340"+
    "\1\325\1\0\22\152\1\340\1\341\2\340\1\136\14\0"+
    "\1\342\1\343\23\0\4\342\13\0\2\344\1\343\2\0"+
    "\22\344\1\343\1\345\2\343\5\0\1\346\1\0\1\347"+
    "\1\350\2\0\2\344\1\351\2\0\22\344\1\351\1\344"+
    "\2\351\5\0\1\346\1\0\1\347\1\350\2\0\2\344"+
    "\1\352\2\0\22\344\1\352\1\345\2\352\13\0\1\353"+
    "\1\354\1\346\2\0\22\353\4\346\7\0\1\355\46\0"+
    "\1\355\42\0\1\346\7\0\1\351\24\0\4\351\5\0"+
    "\1\346\5\0\2\344\1\352\2\0\22\344\1\352\1\345"+
    "\2\352\13\0\1\353\1\354\3\0\22\353\1\0\1\353"+
    "\15\0\1\353\1\354\1\355\2\0\22\353\1\355\1\354"+
    "\2\355\1\0\1\356\13\0\1\355\24\0\4\355\1\0"+
    "\1\356\13\0\1\356\1\0\1\357\22\0\4\356\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\0\1\1\20\0\1\1\22\0"+
    "\2\1\132\0\1\11\1\0\1\11\37\0\1\11\12\0"+
    "\1\11\11\0\1\11\13\0\1\11\31\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 11: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 12: break;
          case 3: 
            { System.out.println("Comentario encontrado: " + yytext() + "\n");
            } 
            // fall through
          case 13: break;
          case 4: 
            { System.out.println("Function found: " + yytext() + "\n");
            } 
            // fall through
          case 14: break;
          case 5: 
            { System.out.println("if was found: " + yytext() + "\n");
            } 
            // fall through
          case 15: break;
          case 6: 
            { System.out.println("Number declaration found: " + yytext() + "\n");
            } 
            // fall through
          case 16: break;
          case 7: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() + "\n");
            } 
            // fall through
          case 17: break;
          case 8: 
            { System.out.println("While found: " + yytext() + "\n");

        //yybegin(metodo);
            } 
            // fall through
          case 18: break;
          case 9: 
            { System.out.println("Declaration: " + yytext() + "\n");
            } 
            // fall through
          case 19: break;
          case 10: 
            { System.out.println("For found: " + yytext() + "\n");
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
