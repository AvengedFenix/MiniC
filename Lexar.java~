/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>main.flex</tt>
 */
class Lexar {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int line_comment = 2;
  public static final int comment = 4;
  public static final int includes = 6;
  public static final int whileLoops = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\51\1\57\1\57\1\56\22\0\1\54\1\1\1\55"+
    "\1\20\1\0\1\0\1\0\1\0\1\60\1\61\1\7\1\5\1\0"+
    "\1\6\1\15\1\10\4\12\1\42\1\12\1\41\3\12\1\0\1\14"+
    "\1\3\1\2\1\4\1\0\1\0\22\11\1\62\7\11\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\21\1\46\1\27\1\45\1\23\1\37"+
    "\1\44\1\26\1\40\1\43\1\11\1\33\1\31\1\36\1\30\1\32"+
    "\1\11\1\24\1\22\1\25\1\47\1\52\1\50\1\34\1\35\1\11"+
    "\1\16\1\0\1\17\7\0\1\57\32\0\1\53\1\0\35\0\1\0"+
    "\u15c0\0\1\53\u097f\0\13\53\35\0\1\57\1\57\5\0\1\53\57\0"+
    "\1\53\u0fa0\0\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\16\1\1\2\2\1\1\3\1\1\1\2\1\3"+
    "\1\4\1\2\1\5\1\6\1\1\20\0\1\2\4\0"+
    "\1\5\1\6\1\1\23\0\1\2\1\0\1\7\23\0"+
    "\1\7\155\0\1\10\4\0\1\11\41\0\1\12\3\0"+
    "\1\13\26\0\1\14\2\0\1\15\30\0\1\16\54\0"+
    "\1\17\24\0\1\17\1\0\1\20\104\0\1\21\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u042f\0\u0462"+
    "\0\u0495\0\377\0\377\0\377\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u08f7\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u095d\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b"+
    "\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\u042f\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178"+
    "\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310"+
    "\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8"+
    "\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640"+
    "\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\377\0\u27a5"+
    "\0\u27d8\0\u280b\0\u283e\0\377\0\u2871\0\u28a4\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2"+
    "\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a"+
    "\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2"+
    "\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\377\0\u2f04\0\u2f37"+
    "\0\u2f6a\0\377\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c"+
    "\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234"+
    "\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc"+
    "\0\377\0\u33ff\0\u3432\0\377\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\377\0\u392d\0\u3960\0\u3993"+
    "\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b"+
    "\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3"+
    "\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b"+
    "\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3"+
    "\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b"+
    "\0\u41be\0\u3e8e\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0"+
    "\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488"+
    "\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\377\0\u45ed"+
    "\0\377\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752"+
    "\0\u4785\0\u47b8\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea"+
    "\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82"+
    "\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a"+
    "\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2"+
    "\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a"+
    "\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2"+
    "\0\u5115\0\u5148\0\u517b\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a"+
    "\0\u52ad\0\u52e0\0\u5313\0\u5346\0\u5379\0\377\0\u53ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\6\1\7\1\10\2\6\1\11\4\6\1\12\1\6"+
    "\1\13\4\6\1\14\3\6\1\15\3\6\1\16\1\17"+
    "\4\6\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\6\1\11\1\27\16\6\1\30\35\6\1\31\4\6"+
    "\1\30\1\32\12\6\1\7\3\6\1\30\35\6\1\30"+
    "\4\6\1\30\1\32\3\6\63\32\13\6\1\30\3\6"+
    "\1\33\31\6\1\30\4\6\1\30\1\32\3\6\73\0"+
    "\1\34\61\0\1\35\1\36\65\0\1\37\6\0\1\40"+
    "\10\0\1\41\15\0\1\37\1\0\2\42\1\0\1\37"+
    "\1\42\43\0\1\43\47\0\1\44\12\0\1\45\50\0"+
    "\1\46\64\0\1\47\62\0\1\50\2\0\1\51\65\0"+
    "\1\52\1\53\53\0\1\54\62\0\1\55\70\0\1\56"+
    "\52\0\1\57\47\0\1\37\6\0\1\40\10\0\1\41"+
    "\15\0\1\60\1\0\2\42\1\0\1\37\1\42\33\0"+
    "\1\61\45\0\1\42\6\0\1\40\10\0\1\41\15\0"+
    "\1\42\1\0\2\42\1\0\2\42\16\0\1\30\35\0"+
    "\1\30\4\0\1\30\17\0\1\30\35\0\1\31\4\0"+
    "\1\30\4\0\7\62\1\63\1\64\2\65\1\35\5\62"+
    "\30\65\1\35\1\65\2\35\1\62\2\35\2\62\1\65"+
    "\11\0\2\66\1\36\5\0\30\66\1\36\1\66\2\36"+
    "\1\0\2\36\2\0\1\66\13\0\1\67\23\0\1\70"+
    "\1\71\4\0\1\72\3\0\1\67\1\0\2\73\1\0"+
    "\1\67\1\73\31\0\1\74\64\0\1\75\45\0\1\73"+
    "\23\0\1\70\1\71\4\0\1\72\3\0\1\73\1\0"+
    "\2\73\1\0\2\73\41\0\1\76\50\0\1\77\102\0"+
    "\1\100\37\0\1\101\77\0\1\102\50\0\1\103\66\0"+
    "\1\104\57\0\1\105\115\0\1\106\51\0\1\107\43\0"+
    "\1\110\54\0\1\111\100\0\1\112\35\0\1\67\23\0"+
    "\1\70\1\71\4\0\1\72\3\0\1\113\1\0\2\73"+
    "\1\0\1\67\1\73\43\0\1\114\22\0\7\62\1\63"+
    "\41\62\1\0\4\62\2\0\12\62\1\63\1\115\40\62"+
    "\1\0\4\62\2\0\12\62\1\116\41\62\1\0\4\62"+
    "\2\0\12\62\1\63\1\64\2\65\6\62\30\65\1\0"+
    "\1\65\1\62\1\65\1\62\2\0\2\62\1\65\11\0"+
    "\2\66\6\0\30\66\1\0\1\66\1\0\1\66\5\0"+
    "\1\66\13\0\1\30\23\0\1\70\1\71\4\0\1\72"+
    "\3\0\1\30\4\0\1\30\37\0\1\117\65\0\1\120"+
    "\54\0\1\121\71\0\1\70\1\71\4\0\1\72\45\0"+
    "\1\122\70\0\1\123\53\0\1\124\102\0\1\125\51\0"+
    "\1\126\50\0\1\127\102\0\1\130\31\0\1\103\35\0"+
    "\1\103\1\0\2\103\1\0\2\103\1\131\23\0\1\132"+
    "\54\0\1\133\35\0\1\133\1\0\2\133\1\0\2\133"+
    "\14\0\2\134\6\0\30\134\1\0\1\134\1\0\1\134"+
    "\5\0\1\134\46\0\1\135\47\0\1\136\67\0\1\45"+
    "\55\0\1\137\42\0\1\30\23\0\1\70\1\71\4\0"+
    "\1\72\3\0\1\31\4\0\1\30\51\0\1\140\15\0"+
    "\7\62\1\63\1\141\2\142\1\143\5\62\30\142\1\143"+
    "\1\142\2\143\1\62\2\143\2\62\1\142\30\0\1\144"+
    "\57\0\1\145\104\0\1\146\37\0\1\147\102\0\1\150"+
    "\51\0\1\151\56\0\1\152\56\0\1\153\52\0\1\154"+
    "\35\0\1\154\1\0\2\154\1\0\2\154\16\0\1\155"+
    "\35\0\1\155\1\0\2\155\1\0\2\155\32\0\1\156"+
    "\3\0\1\157\3\0\1\160\1\161\4\0\1\162\1\163"+
    "\41\0\1\130\46\0\2\164\1\165\5\0\10\164\1\166"+
    "\17\164\1\165\1\167\1\165\1\170\1\0\2\165\2\0"+
    "\1\164\1\0\2\171\2\172\4\0\2\134\6\0\30\134"+
    "\1\0\1\134\1\0\1\134\5\0\1\134\33\0\1\173"+
    "\42\0\1\174\35\0\1\174\1\0\2\174\1\0\2\174"+
    "\26\0\1\175\52\0\1\176\35\0\1\176\1\0\2\176"+
    "\1\0\2\176\3\0\7\62\1\63\1\64\2\142\6\62"+
    "\30\142\1\0\1\142\1\62\1\142\1\62\2\0\2\62"+
    "\1\142\7\62\1\63\1\64\2\142\1\143\5\62\30\142"+
    "\1\143\1\142\2\143\1\62\2\143\2\62\1\142\21\0"+
    "\1\120\54\0\1\177\35\0\1\177\1\0\2\177\1\0"+
    "\2\177\51\0\1\200\41\0\1\150\50\0\1\42\35\0"+
    "\1\42\1\0\2\42\1\0\2\42\52\0\1\201\40\0"+
    "\1\202\102\0\1\203\26\0\2\204\1\205\5\0\30\204"+
    "\1\205\1\206\1\205\1\207\1\0\2\205\2\0\1\204"+
    "\11\0\2\164\1\205\5\0\30\164\1\205\1\167\1\205"+
    "\1\210\1\0\2\205\2\0\1\164\26\0\1\211\64\0"+
    "\1\212\65\0\1\213\65\0\1\214\54\0\1\215\62\0"+
    "\1\216\43\0\2\164\1\217\5\0\30\164\1\217\1\164"+
    "\1\217\1\164\1\0\2\217\1\220\1\0\1\164\13\0"+
    "\1\165\15\0\1\221\17\0\1\165\1\222\2\165\1\0"+
    "\2\165\14\0\2\164\1\217\5\0\1\223\27\164\1\217"+
    "\1\164\1\217\1\164\1\0\2\217\1\220\1\0\1\164"+
    "\11\0\2\164\1\217\5\0\1\224\27\164\1\217\1\164"+
    "\1\217\1\164\1\0\2\217\1\220\1\0\1\164\11\0"+
    "\2\164\1\225\5\0\10\164\1\166\17\164\1\225\1\167"+
    "\1\225\1\170\1\0\2\225\1\220\1\0\1\164\2\0"+
    "\1\226\62\0\1\226\6\0\2\227\6\0\30\227\1\0"+
    "\1\227\1\0\1\227\5\0\1\227\23\0\1\130\50\0"+
    "\2\230\1\205\5\0\30\230\1\205\1\231\1\205\1\232"+
    "\1\0\2\205\2\0\1\230\13\0\1\175\35\0\1\175"+
    "\1\0\2\175\1\0\2\175\1\233\13\0\2\164\6\0"+
    "\30\164\1\0\1\164\1\0\1\164\5\0\1\164\11\0"+
    "\2\234\6\0\30\234\1\0\1\234\1\0\1\234\5\0"+
    "\1\234\33\0\1\235\74\0\1\236\37\0\1\237\25\0"+
    "\1\240\25\0\1\241\35\0\1\241\1\0\2\241\1\0"+
    "\2\241\5\0\1\242\6\0\2\204\1\243\5\0\30\204"+
    "\1\243\1\204\1\243\1\204\1\0\2\243\1\220\1\0"+
    "\1\204\13\0\1\205\35\0\1\205\1\222\2\205\1\0"+
    "\2\205\5\0\1\242\6\0\2\204\1\243\5\0\1\244"+
    "\27\204\1\243\1\204\1\243\1\204\1\0\2\243\1\220"+
    "\1\0\1\204\2\0\1\242\6\0\2\204\1\245\5\0"+
    "\30\204\1\245\1\206\1\245\1\207\1\0\2\245\1\220"+
    "\1\0\1\204\11\0\2\164\1\246\5\0\30\164\1\246"+
    "\1\167\1\246\1\210\1\0\2\246\1\220\1\0\1\164"+
    "\21\0\1\247\77\0\1\250\54\0\1\251\57\0\1\252"+
    "\104\0\1\253\43\0\1\254\45\0\1\217\35\0\1\217"+
    "\1\0\2\217\1\0\2\217\1\220\15\0\1\220\13\0"+
    "\1\255\3\0\1\256\3\0\1\257\1\260\4\0\1\261"+
    "\1\262\2\0\1\220\1\263\2\220\1\0\2\220\1\0"+
    "\1\264\22\0\1\265\62\0\1\266\52\0\2\164\1\217"+
    "\5\0\17\164\1\267\10\164\1\217\1\164\1\217\1\164"+
    "\1\0\2\217\1\220\1\0\1\164\11\0\2\164\1\217"+
    "\5\0\3\164\1\270\24\164\1\217\1\164\1\217\1\164"+
    "\1\0\2\217\1\220\1\0\1\164\13\0\1\225\15\0"+
    "\1\221\17\0\1\225\1\222\2\225\1\0\2\225\1\220"+
    "\13\0\2\227\6\0\30\227\1\0\1\227\1\0\1\227"+
    "\5\0\1\227\11\0\2\227\6\0\30\227\1\0\1\227"+
    "\1\0\1\227\4\0\1\271\1\227\2\0\1\272\6\0"+
    "\2\230\1\273\5\0\30\230\1\273\1\230\1\273\1\230"+
    "\1\0\2\273\1\220\1\0\1\230\2\0\1\272\6\0"+
    "\2\230\1\273\5\0\1\274\27\230\1\273\1\230\1\273"+
    "\1\230\1\0\2\273\1\220\1\0\1\230\2\0\1\272"+
    "\6\0\2\230\1\275\5\0\30\230\1\275\1\231\1\275"+
    "\1\232\1\0\2\275\1\220\1\0\1\230\11\0\2\276"+
    "\1\233\5\0\30\276\1\233\1\276\1\233\1\277\1\0"+
    "\2\233\2\0\1\276\2\0\1\300\6\0\2\234\1\301"+
    "\5\0\30\234\1\301\1\234\1\301\1\234\1\0\2\301"+
    "\2\0\1\234\23\0\1\145\62\0\1\302\64\0\1\44"+
    "\63\0\1\303\47\0\1\242\35\0\1\242\1\0\2\242"+
    "\1\304\2\242\5\0\1\242\10\0\1\243\35\0\1\243"+
    "\1\0\2\243\1\0\2\243\1\220\4\0\1\242\6\0"+
    "\2\204\1\243\5\0\3\204\1\305\24\204\1\243\1\204"+
    "\1\243\1\204\1\0\2\243\1\220\1\0\1\204\2\0"+
    "\1\242\10\0\1\245\35\0\1\245\1\222\2\245\1\0"+
    "\2\245\1\220\15\0\1\246\35\0\1\246\1\222\2\246"+
    "\1\0\2\246\1\220\26\0\1\252\102\0\1\252\37\0"+
    "\1\214\54\0\1\306\35\0\1\306\1\0\2\306\1\0"+
    "\2\306\51\0\1\307\47\0\1\252\55\0\1\310\64\0"+
    "\1\311\65\0\1\312\65\0\1\313\54\0\1\314\62\0"+
    "\1\315\62\0\1\316\45\0\1\264\2\0\1\317\32\0"+
    "\1\264\1\0\2\264\1\0\2\264\43\0\1\320\46\0"+
    "\1\321\47\0\2\164\1\217\5\0\15\164\1\322\12\164"+
    "\1\217\1\164\1\217\1\164\1\0\2\217\1\220\1\0"+
    "\1\164\11\0\2\164\1\217\5\0\17\164\1\323\10\164"+
    "\1\217\1\164\1\217\1\164\1\0\2\217\1\220\1\0"+
    "\1\164\16\0\1\324\57\0\1\272\11\0\1\325\11\0"+
    "\1\326\11\0\1\272\1\0\2\272\1\0\2\272\5\0"+
    "\1\272\10\0\1\273\35\0\1\273\1\0\2\273\1\0"+
    "\2\273\1\220\4\0\1\272\6\0\2\230\1\273\5\0"+
    "\3\230\1\327\24\230\1\273\1\230\1\273\1\230\1\0"+
    "\2\273\1\220\1\0\1\230\2\0\1\272\10\0\1\275"+
    "\35\0\1\275\1\222\2\275\1\0\2\275\1\220\3\0"+
    "\2\330\2\331\4\0\2\276\1\332\5\0\30\276\1\332"+
    "\1\276\1\332\1\276\1\0\2\332\2\0\1\276\1\0"+
    "\2\330\2\331\4\0\2\276\1\277\5\0\30\276\1\277"+
    "\1\276\2\277\1\0\2\277\2\0\1\276\12\0\1\333"+
    "\1\300\25\0\2\333\6\0\1\300\1\0\2\300\1\0"+
    "\2\300\5\0\1\300\10\0\1\301\35\0\1\301\1\0"+
    "\2\301\1\0\2\301\43\0\1\43\7\0\1\334\52\0"+
    "\1\335\33\0\2\336\1\304\5\0\30\336\1\304\1\336"+
    "\2\304\1\337\2\304\2\0\1\336\2\0\1\242\6\0"+
    "\2\204\1\243\5\0\17\204\1\340\10\204\1\243\1\204"+
    "\1\243\1\204\1\0\2\243\1\220\1\0\1\204\11\0"+
    "\2\341\6\0\30\341\1\0\1\341\1\0\1\341\5\0"+
    "\1\341\33\0\1\342\50\0\1\343\77\0\1\344\54\0"+
    "\1\345\57\0\1\346\104\0\1\347\43\0\1\350\72\0"+
    "\1\351\60\0\1\352\64\0\1\353\33\0\2\164\1\354"+
    "\5\0\30\164\1\354\1\164\1\354\1\322\1\0\2\354"+
    "\1\355\1\0\1\164\11\0\2\164\1\217\5\0\1\356"+
    "\27\164\1\217\1\164\1\217\1\164\1\0\2\217\1\220"+
    "\1\0\1\164\24\0\1\357\57\0\1\360\43\0\1\272"+
    "\6\0\2\230\1\273\5\0\17\230\1\361\10\230\1\273"+
    "\1\230\1\273\1\230\1\0\2\273\1\220\1\0\1\230"+
    "\2\0\1\362\62\0\1\362\6\0\2\363\1\362\5\0"+
    "\30\363\1\362\1\363\1\362\1\364\1\0\2\362\2\0"+
    "\1\363\1\0\2\330\2\331\6\0\1\332\35\0\1\332"+
    "\1\0\2\332\1\0\2\332\15\0\1\333\1\365\1\366"+
    "\24\0\2\333\6\0\1\365\1\0\2\365\1\0\2\365"+
    "\31\0\1\367\61\0\1\370\46\0\2\336\1\371\5\0"+
    "\30\336\1\371\1\336\1\371\1\336\1\337\2\371\2\0"+
    "\1\336\13\0\1\337\1\372\34\0\1\337\1\0\2\337"+
    "\1\0\2\337\5\0\1\242\6\0\2\204\1\243\5\0"+
    "\1\373\27\204\1\243\1\204\1\243\1\204\1\0\2\243"+
    "\1\220\1\0\1\204\2\0\1\374\6\0\2\341\1\375"+
    "\5\0\30\341\1\375\1\341\1\375\1\341\1\0\2\375"+
    "\2\0\1\341\23\0\1\252\63\0\1\346\102\0\1\346"+
    "\37\0\1\313\54\0\1\376\35\0\1\376\1\0\2\376"+
    "\1\0\2\376\51\0\1\377\47\0\1\346\74\0\1\u0100"+
    "\30\0\1\352\35\0\1\352\1\0\2\352\1\0\2\352"+
    "\1\u0101\23\0\1\u0102\54\0\1\354\35\0\1\354\1\0"+
    "\2\354\1\0\2\354\1\355\15\0\1\355\13\0\1\255"+
    "\3\0\1\256\3\0\1\257\1\260\4\0\1\261\1\262"+
    "\2\0\1\355\1\263\2\355\1\0\2\355\1\0\1\u0103"+
    "\12\0\2\164\1\217\5\0\25\164\1\u0104\2\164\1\217"+
    "\1\164\1\217\1\164\1\0\2\217\1\220\1\0\1\164"+
    "\47\0\1\u0105\46\0\1\u0106\31\0\1\272\6\0\2\230"+
    "\1\273\5\0\1\u0107\27\230\1\273\1\230\1\273\1\230"+
    "\1\0\2\273\1\220\1\0\1\230\11\0\2\363\1\362"+
    "\5\0\30\363\1\362\1\363\1\362\1\364\1\0\2\362"+
    "\2\0\1\363\11\0\2\363\1\u0108\5\0\30\363\1\u0108"+
    "\1\363\1\u0108\1\363\1\0\2\u0108\1\0\1\u0109\1\363"+
    "\11\0\2\363\1\364\5\0\30\363\1\364\1\363\2\364"+
    "\1\0\2\364\1\0\1\u0109\1\363\13\0\1\365\1\366"+
    "\34\0\1\365\1\0\2\365\1\0\2\365\43\0\1\u010a"+
    "\45\0\1\u010b\52\0\1\371\35\0\1\371\1\0\2\371"+
    "\1\337\2\371\5\0\1\242\6\0\2\204\1\243\5\0"+
    "\25\204\1\u010c\2\204\1\243\1\204\1\243\1\204\1\0"+
    "\2\243\1\220\1\0\1\204\12\0\1\u010d\1\374\25\0"+
    "\2\u010d\6\0\1\374\1\0\2\374\1\0\2\374\5\0"+
    "\1\374\10\0\1\375\35\0\1\375\1\0\2\375\1\0"+
    "\2\375\14\0\2\u010e\6\0\30\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\5\0\1\u010e\33\0\1\u010f\42\0\1\u0100\35\0"+
    "\1\u0100\1\0\2\u0100\1\0\2\u0100\1\0\1\264\14\0"+
    "\1\u0101\35\0\1\u0101\1\0\2\u0101\1\0\2\u0101\1\0"+
    "\1\u0103\47\0\1\u0110\27\0\1\u0103\2\0\1\u0111\32\0"+
    "\1\u0103\1\0\2\u0103\1\0\2\u0103\14\0\2\164\1\217"+
    "\5\0\12\164\1\u0112\15\164\1\217\1\164\1\217\1\164"+
    "\1\0\2\217\1\220\1\0\1\164\23\0\1\337\61\0"+
    "\1\u0105\42\0\1\272\6\0\2\230\1\273\5\0\25\230"+
    "\1\u0113\2\230\1\273\1\230\1\273\1\230\1\0\2\273"+
    "\1\220\1\0\1\230\13\0\1\u0108\35\0\1\u0108\1\0"+
    "\2\u0108\1\0\2\u0108\1\0\1\u0109\14\0\1\u0109\2\0"+
    "\1\u0114\32\0\1\u0109\1\0\2\u0109\1\0\2\u0109\30\0"+
    "\1\u0115\117\0\1\u0116\2\0\1\242\6\0\2\204\1\243"+
    "\5\0\12\204\1\u0117\15\204\1\243\1\204\1\243\1\204"+
    "\1\0\2\243\1\220\1\0\1\204\12\0\1\u010d\1\u0118"+
    "\1\u0119\24\0\2\u010d\6\0\1\u0118\1\0\2\u0118\1\0"+
    "\2\u0118\14\0\2\u010e\1\u0100\5\0\30\u010e\1\u0100\1\u010e"+
    "\1\u0100\1\u010e\1\0\2\u0100\1\0\1\264\1\u010e\23\0"+
    "\1\346\72\0\1\u011a\40\0\2\164\1\217\5\0\2\164"+
    "\1\u011b\25\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\1\0\1\164\2\0\1\272\6\0\2\230\1\273"+
    "\5\0\12\230\1\u011c\15\230\1\273\1\230\1\273\1\230"+
    "\1\0\2\273\1\220\1\0\1\230\23\0\1\u011d\71\0"+
    "\1\u011e\32\0\1\242\6\0\2\204\1\243\5\0\2\204"+
    "\1\u011f\25\204\1\243\1\204\1\243\1\204\1\0\2\243"+
    "\1\220\1\0\1\204\13\0\1\u0118\1\u0119\34\0\1\u0118"+
    "\1\0\2\u0118\1\0\2\u0118\14\0\2\u0120\1\u0119\5\0"+
    "\30\u0120\1\u0119\1\u0120\1\u0119\1\u0121\1\0\2\u0119\2\0"+
    "\1\u0120\23\0\1\u0122\50\0\2\164\1\217\5\0\1\164"+
    "\1\u0123\26\164\1\217\1\164\1\217\1\164\1\0\2\217"+
    "\1\220\1\0\1\164\2\0\1\272\6\0\2\230\1\273"+
    "\5\0\2\230\1\u0124\25\230\1\273\1\230\1\273\1\230"+
    "\1\0\2\273\1\220\1\0\1\230\62\0\1\u0125\21\0"+
    "\1\u0126\43\0\1\242\6\0\2\204\1\243\5\0\1\204"+
    "\1\u0127\26\204\1\243\1\204\1\243\1\204\1\0\2\243"+
    "\1\220\1\0\1\204\1\0\2\u0128\2\u0129\4\0\2\u0120"+
    "\1\u012a\5\0\30\u0120\1\u012a\1\u0120\1\u012a\1\u0120\1\0"+
    "\2\u012a\2\0\1\u0120\1\0\2\u0128\2\u0129\4\0\2\u0120"+
    "\1\u0121\5\0\30\u0120\1\u0121\1\u0120\2\u0121\1\0\2\u0121"+
    "\2\0\1\u0120\22\0\1\u012b\51\0\2\164\1\u012c\1\u012d"+
    "\4\0\30\164\1\u012c\1\167\1\u012c\1\u012e\1\0\2\u012c"+
    "\1\220\1\0\1\164\2\0\1\272\6\0\2\230\1\273"+
    "\5\0\1\230\1\u012f\26\230\1\273\1\230\1\273\1\230"+
    "\1\0\2\273\1\220\1\0\1\230\32\0\1\u0130\57\0"+
    "\1\u0131\35\0\1\242\6\0\2\204\1\u0132\1\u012d\4\0"+
    "\30\204\1\u0132\1\206\1\u0132\1\u0133\1\0\2\u0132\1\220"+
    "\1\0\1\204\2\0\1\u0134\62\0\1\u0134\7\0\1\u0135"+
    "\1\u0134\25\0\2\u0135\6\0\1\u0134\1\0\2\u0134\1\0"+
    "\2\u0134\4\0\2\u0128\2\u0129\6\0\1\u012a\35\0\1\u012a"+
    "\1\0\2\u012a\1\0\2\u012a\16\0\1\u0136\1\u012d\34\0"+
    "\1\u0136\1\222\2\u0136\1\0\2\u0136\16\0\1\u012c\1\u012d"+
    "\34\0\1\u012c\1\0\2\u012c\1\0\2\u012c\1\220\13\0"+
    "\2\164\1\u012c\1\u012d\4\0\30\164\1\u012c\1\164\1\u012c"+
    "\1\u012e\1\0\2\u012c\1\220\1\0\1\164\2\0\1\272"+
    "\6\0\2\230\1\u0137\1\u012d\4\0\30\230\1\u0137\1\231"+
    "\1\u0137\1\u0138\1\0\2\u0137\1\220\1\0\1\230\21\0"+
    "\1\u0139\64\0\1\u013a\41\0\1\242\10\0\1\u0132\1\u012d"+
    "\34\0\1\u0132\1\0\2\u0132\1\0\2\u0132\1\220\4\0"+
    "\1\242\6\0\2\204\1\u0132\1\u012d\4\0\30\204\1\u0132"+
    "\1\204\1\u0132\1\u0133\1\0\2\u0132\1\220\1\0\1\204"+
    "\12\0\1\u0135\1\u0134\25\0\2\u0135\6\0\1\u0134\1\0"+
    "\2\u0134\1\0\2\u0134\15\0\1\u0135\1\u013b\1\u013c\24\0"+
    "\2\u0135\6\0\1\u013b\1\0\2\u013b\1\0\2\u013b\16\0"+
    "\1\u0136\1\u012d\34\0\1\u0136\1\0\2\u0136\1\0\2\u0136"+
    "\5\0\1\272\10\0\1\u0137\1\u012d\34\0\1\u0137\1\0"+
    "\2\u0137\1\0\2\u0137\1\220\4\0\1\272\6\0\2\230"+
    "\1\u0137\1\u012d\4\0\30\230\1\u0137\1\230\1\u0137\1\u0138"+
    "\1\0\2\u0137\1\220\1\0\1\230\27\0\1\u013d\44\0"+
    "\2\u013a\6\0\27\u013a\1\u013e\1\0\1\u013a\1\0\1\u013a"+
    "\5\0\1\u013a\13\0\1\u013b\1\u013c\34\0\1\u013b\1\0"+
    "\2\u013b\1\0\2\u013b\14\0\2\u013f\1\u013c\5\0\30\u013f"+
    "\1\u013c\1\u013f\1\u013c\1\u0140\1\0\2\u013c\2\0\1\u013f"+
    "\23\0\1\u0141\50\0\2\u013a\6\0\5\u013a\1\u0142\21\u013a"+
    "\1\u013e\1\0\1\u013a\1\0\1\u013a\5\0\1\u013a\2\0"+
    "\1\u0143\2\0\1\u0144\1\u0145\2\0\2\u013f\1\u0146\5\0"+
    "\30\u013f\1\u0146\1\u013f\1\u0146\1\u013f\1\0\2\u0146\2\0"+
    "\1\u013f\2\0\1\u0143\2\0\1\u0144\1\u0145\2\0\2\u013f"+
    "\1\u0147\5\0\30\u013f\1\u0147\1\u013f\1\u0147\1\u0140\1\0"+
    "\2\u0147\2\0\1\u013f\3\0\1\u0148\44\0\1\334\4\0"+
    "\1\u0149\16\0\2\u013a\6\0\17\u013a\1\u014a\7\u013a\1\u013e"+
    "\1\0\1\u013a\1\0\1\u013a\5\0\1\u013a\11\0\1\u014b"+
    "\1\u014c\1\u0143\5\0\20\u014b\2\u014c\6\u014b\1\u0143\1\u014b"+
    "\2\u0143\1\0\2\u0143\2\0\1\u014b\5\0\1\u014d\63\0"+
    "\1\u014d\56\0\1\u0143\10\0\1\u0146\35\0\1\u0146\1\0"+
    "\2\u0146\1\0\2\u0146\5\0\1\u0143\6\0\2\u013f\1\u0147"+
    "\5\0\30\u013f\1\u0147\1\u013f\1\u0147\1\u0140\1\0\2\u0147"+
    "\2\0\1\u013f\3\0\1\u0148\15\0\1\u014e\1\u014f\1\u0150"+
    "\1\0\1\u0151\1\0\1\u0152\1\0\1\u0153\1\0\1\u0154"+
    "\3\0\1\u0155\1\u0156\6\0\1\u0157\1\u0158\23\0\2\u0159"+
    "\6\0\30\u0159\1\0\1\u0159\1\0\1\u0159\1\u015a\4\0"+
    "\1\u0159\11\0\2\u013a\6\0\4\u013a\1\u015b\22\u013a\1\u013e"+
    "\1\0\1\u013a\1\0\1\u013a\5\0\1\u013a\11\0\1\u014b"+
    "\1\u014c\6\0\20\u014b\2\u014c\6\u014b\1\0\1\u014b\1\0"+
    "\1\u014b\5\0\1\u014b\11\0\1\u014b\1\u014c\1\u014d\5\0"+
    "\20\u014b\2\u014c\6\u014b\1\u014d\1\u014b\1\u014d\1\u014c\1\0"+
    "\2\u014d\1\0\1\u015c\1\u014b\13\0\1\u014d\35\0\1\u014d"+
    "\1\0\2\u014d\1\0\2\u014d\1\0\1\u015c\23\0\1\u015d"+
    "\63\0\1\u015e\1\0\1\u015f\12\0\1\u0160\46\0\1\u0161"+
    "\64\0\1\u0162\11\0\1\u0163\3\0\1\u0164\43\0\1\u0165"+
    "\2\0\1\u0166\53\0\1\u0167\71\0\1\u0168\7\0\1\u0169"+
    "\55\0\1\u016a\51\0\1\u016b\13\0\1\u016c\53\0\1\u016d"+
    "\62\0\1\u016e\44\0\2\u0159\6\0\30\u0159\1\0\1\u0159"+
    "\1\0\1\u0159\1\u016f\4\0\1\u0159\11\0\2\u013a\6\0"+
    "\2\u013a\1\u0170\24\u013a\1\u013e\1\0\1\u013a\1\0\1\u013a"+
    "\5\0\1\u013a\13\0\1\u015c\2\0\1\u0171\32\0\1\u015c"+
    "\1\0\2\u015c\1\0\2\u015c\25\0\1\u0172\65\0\1\u0173"+
    "\61\0\1\u0174\20\0\1\u0175\61\0\1\u0176\42\0\1\u0177"+
    "\62\0\1\u0178\67\0\1\u0179\62\0\1\u0153\66\0\1\u017a"+
    "\56\0\1\u017b\56\0\1\u017c\64\0\1\u017d\64\0\1\u017e"+
    "\61\0\1\u017f\62\0\1\u0180\57\0\1\u0181\63\0\1\u0182"+
    "\61\0\1\u0165\1\u0182\45\0\2\u013a\6\0\27\u013a\1\u013e"+
    "\1\0\1\u013a\1\0\1\u013a\5\0\1\u0183\23\0\1\u0184"+
    "\102\0\1\u0185\57\0\1\u0186\43\0\1\u0187\11\0\1\u0188"+
    "\2\0\1\u0189\1\0\1\u018a\4\0\1\u018b\1\u018c\52\0"+
    "\1\u018d\62\0\1\u018e\47\0\1\u018f\62\0\1\u0190\71\0"+
    "\1\u0179\62\0\1\u0191\56\0\1\u0190\55\0\1\u0192\101\0"+
    "\1\u0193\43\0\1\u0194\102\0\1\u0195\46\0\1\u0196\56\0"+
    "\1\u0197\52\0\2\u013a\6\0\11\u013a\1\u0198\15\u013a\1\u013e"+
    "\1\0\1\u013a\1\0\1\u013a\5\0\1\u013a\24\0\1\u0194"+
    "\67\0\1\u0199\67\0\1\u019a\50\0\1\u019a\1\u019b\5\0"+
    "\1\u019c\67\0\1\u019d\52\0\1\u019e\62\0\1\u0190\5\0"+
    "\1\u0194\47\0\1\u019f\67\0\1\u01a0\53\0\1\u01a1\71\0"+
    "\1\u0190\53\0\1\u01a2\56\0\1\u01a3\100\0\1\u01a4\62\0"+
    "\1\u0179\54\0\1\u01a5\62\0\1\u0190\77\0\1\u01a6\55\0"+
    "\1\u01a7\51\0\1\u0190\47\0\2\u013a\6\0\1\u01a8\26\u013a"+
    "\1\u013e\1\0\1\u013a\1\0\1\u013a\5\0\1\u013a\32\0"+
    "\1\u0190\74\0\1\u0190\46\0\1\u01a9\72\0\1\u01aa\70\0"+
    "\1\u0190\40\0\1\u01ab\75\0\1\u0190\53\0\1\u01a1\65\0"+
    "\1\u0190\74\0\1\u01a5\43\0\1\u01ac\57\0\1\u01ad\61\0"+
    "\1\u0190\101\0\1\u0190\53\0\1\u01ae\41\0\2\u013a\6\0"+
    "\6\u013a\1\u01af\20\u013a\1\u013e\1\0\1\u013a\1\0\1\u013a"+
    "\5\0\1\u013a\31\0\1\u01b0\75\0\1\u01b1\41\0\1\u01b2"+
    "\43\0\1\u016f\14\0\1\u014e\1\u014f\1\u0150\1\0\1\u0151"+
    "\1\0\1\u0152\1\0\1\u0153\1\0\1\u0154\3\0\1\u0155"+
    "\1\u0156\6\0\1\u0157\1\u0158\46\0\1\u0190\51\0\1\u01a5"+
    "\50\0\2\u013a\6\0\2\u013a\1\u01b3\24\u013a\1\u013e\1\0"+
    "\1\u013a\1\0\1\u013a\5\0\1\u013a\40\0\1\u01b4\60\0"+
    "\1\u0190\51\0\1\u01b5\46\0\2\u013a\3\0\1\u01b6\2\0"+
    "\2\u013a\1\u01b3\24\u013a\1\u013e\1\0\1\u013a\1\0\1\u013a"+
    "\5\0\1\u013a\27\0\1\u0190\102\0\1\u01b7\37\0\1\u01b1"+
    "\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21471];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\23\1\3\11\3\1\20\0\1\1\4\0"+
    "\3\1\23\0\1\1\1\0\1\1\23\0\1\1\155\0"+
    "\1\11\4\0\1\11\41\0\1\11\3\0\1\11\26\0"+
    "\1\11\2\0\1\11\30\0\1\11\54\0\1\1\24\0"+
    "\1\11\1\0\1\11\104\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexar(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 18: break;
          case 2: 
            { System.out.print(yytext()+"\n"); yybegin(1);
            } 
            // fall through
          case 19: break;
          case 3: 
            { System.out.print(yytext());
            } 
            // fall through
          case 20: break;
          case 4: 
            { System.out.println("While end found at line: " + yyline);
            yybegin(YYINITIAL);
            } 
            // fall through
          case 21: break;
          case 5: 
            { System.out.print("Comentario encontrado: \n"+ yytext()); yybegin(comment);
            } 
            // fall through
          case 22: break;
          case 6: 
            { System.out.print("Comentario en linea encontrado:"+yytext());
        yybegin(line_comment);
            } 
            // fall through
          case 23: break;
          case 7: 
            { System.out.print("Comentario encontrado: " + yytext() + "\n");
            } 
            // fall through
          case 24: break;
          case 8: 
            { System.out.println("Function found: " + yytext() + "\n");
            } 
            // fall through
          case 25: break;
          case 9: 
            { System.out.println("if was found:\n" + yytext());
            } 
            // fall through
          case 26: break;
          case 10: 
            { System.out.println("Number declaration found: " + yytext() + "\n");
            } 
            // fall through
          case 27: break;
          case 11: 
            { System.out.println("Bool or char Asignation and declaration: " + yytext() + "\n");
            } 
            // fall through
          case 28: break;
          case 12: 
            { System.out.println("Main: " + yytext() + "\n");
        //yybegin(rules);
            } 
            // fall through
          case 29: break;
          case 13: 
            { System.out.println("While found: " + yytext() + "\n");
        yybegin(whileLoops);
            } 
            // fall through
          case 30: break;
          case 14: 
            { System.out.println("Declaration: " + yytext() + "\n");
            } 
            // fall through
          case 31: break;
          case 15: 
            { System.out.print(" import found:\n" + yytext());
            } 
            // fall through
          case 32: break;
          case 16: 
            { System.out.println("For found: " + yytext() + "\n");
            } 
            // fall through
          case 33: break;
          case 17: 
            { System.out.print(" Struct found:\n" + yytext());
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexar [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexar scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexar(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
